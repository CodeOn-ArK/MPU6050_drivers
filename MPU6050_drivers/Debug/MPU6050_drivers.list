
MPU6050_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001eac  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b0  0800207c  0800207c  0001207c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800212c  0800212c  00020094  2**0
                  CONTENTS
  4 .ARM          00000000  0800212c  0800212c  00020094  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800212c  0800212c  00020094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800212c  0800212c  0001212c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002130  08002130  00012130  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  08002134  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000050  20000094  080021c8  00020094  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000e4  080021c8  000200e4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000403f  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000a01  00000000  00000000  00024103  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000278  00000000  00000000  00024b08  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000220  00000000  00000000  00024d80  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00003473  00000000  00000000  00024fa0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000021ba  00000000  00000000  00028413  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0000be5f  00000000  00000000  0002a5cd  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0003642c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001058  00000000  00000000  000364a8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000094 	.word	0x20000094
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08002064 	.word	0x08002064

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000098 	.word	0x20000098
 800020c:	08002064 	.word	0x08002064

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <GPIO_PeriClkCntrl>:
 * @return  : void
 *
 * @Note	: none
 */
void GPIO_PeriClkCntrl(GPIO_regdef_t *pGPIOx, uint8_t En_Di)
{
 80002b0:	b480      	push	{r7}
 80002b2:	b083      	sub	sp, #12
 80002b4:	af00      	add	r7, sp, #0
 80002b6:	6078      	str	r0, [r7, #4]
 80002b8:	460b      	mov	r3, r1
 80002ba:	70fb      	strb	r3, [r7, #3]
	if(En_Di == ENABLE)
 80002bc:	78fb      	ldrb	r3, [r7, #3]
 80002be:	2b01      	cmp	r3, #1
 80002c0:	d156      	bne.n	8000370 <GPIO_PeriClkCntrl+0xc0>
	{
		if(pGPIOx == GPIOA)
 80002c2:	687b      	ldr	r3, [r7, #4]
 80002c4:	4a5a      	ldr	r2, [pc, #360]	; (8000430 <GPIO_PeriClkCntrl+0x180>)
 80002c6:	4293      	cmp	r3, r2
 80002c8:	d106      	bne.n	80002d8 <GPIO_PeriClkCntrl+0x28>
		{
			GPIOA_CLK_EN();
 80002ca:	4b5a      	ldr	r3, [pc, #360]	; (8000434 <GPIO_PeriClkCntrl+0x184>)
 80002cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002ce:	4a59      	ldr	r2, [pc, #356]	; (8000434 <GPIO_PeriClkCntrl+0x184>)
 80002d0:	f043 0301 	orr.w	r3, r3, #1
 80002d4:	6313      	str	r3, [r2, #48]	; 0x30
 80002d6:	e04b      	b.n	8000370 <GPIO_PeriClkCntrl+0xc0>
		}
		else if(pGPIOx == GPIOB)
 80002d8:	687b      	ldr	r3, [r7, #4]
 80002da:	4a57      	ldr	r2, [pc, #348]	; (8000438 <GPIO_PeriClkCntrl+0x188>)
 80002dc:	4293      	cmp	r3, r2
 80002de:	d106      	bne.n	80002ee <GPIO_PeriClkCntrl+0x3e>
		{
			GPIOB_CLK_EN();
 80002e0:	4b54      	ldr	r3, [pc, #336]	; (8000434 <GPIO_PeriClkCntrl+0x184>)
 80002e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002e4:	4a53      	ldr	r2, [pc, #332]	; (8000434 <GPIO_PeriClkCntrl+0x184>)
 80002e6:	f043 0302 	orr.w	r3, r3, #2
 80002ea:	6313      	str	r3, [r2, #48]	; 0x30
 80002ec:	e040      	b.n	8000370 <GPIO_PeriClkCntrl+0xc0>
		}
		else if(pGPIOx == GPIOC)
 80002ee:	687b      	ldr	r3, [r7, #4]
 80002f0:	4a52      	ldr	r2, [pc, #328]	; (800043c <GPIO_PeriClkCntrl+0x18c>)
 80002f2:	4293      	cmp	r3, r2
 80002f4:	d106      	bne.n	8000304 <GPIO_PeriClkCntrl+0x54>
		{
			GPIOC_CLK_EN();
 80002f6:	4b4f      	ldr	r3, [pc, #316]	; (8000434 <GPIO_PeriClkCntrl+0x184>)
 80002f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002fa:	4a4e      	ldr	r2, [pc, #312]	; (8000434 <GPIO_PeriClkCntrl+0x184>)
 80002fc:	f043 0304 	orr.w	r3, r3, #4
 8000300:	6313      	str	r3, [r2, #48]	; 0x30
 8000302:	e035      	b.n	8000370 <GPIO_PeriClkCntrl+0xc0>
		}
		else if(pGPIOx == GPIOD)
 8000304:	687b      	ldr	r3, [r7, #4]
 8000306:	4a4e      	ldr	r2, [pc, #312]	; (8000440 <GPIO_PeriClkCntrl+0x190>)
 8000308:	4293      	cmp	r3, r2
 800030a:	d106      	bne.n	800031a <GPIO_PeriClkCntrl+0x6a>
		{
			GPIOD_CLK_EN();
 800030c:	4b49      	ldr	r3, [pc, #292]	; (8000434 <GPIO_PeriClkCntrl+0x184>)
 800030e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000310:	4a48      	ldr	r2, [pc, #288]	; (8000434 <GPIO_PeriClkCntrl+0x184>)
 8000312:	f043 0308 	orr.w	r3, r3, #8
 8000316:	6313      	str	r3, [r2, #48]	; 0x30
 8000318:	e02a      	b.n	8000370 <GPIO_PeriClkCntrl+0xc0>
		}
		else if(pGPIOx == GPIOE)
 800031a:	687b      	ldr	r3, [r7, #4]
 800031c:	4a49      	ldr	r2, [pc, #292]	; (8000444 <GPIO_PeriClkCntrl+0x194>)
 800031e:	4293      	cmp	r3, r2
 8000320:	d106      	bne.n	8000330 <GPIO_PeriClkCntrl+0x80>
		{
			GPIOE_CLK_EN();
 8000322:	4b44      	ldr	r3, [pc, #272]	; (8000434 <GPIO_PeriClkCntrl+0x184>)
 8000324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000326:	4a43      	ldr	r2, [pc, #268]	; (8000434 <GPIO_PeriClkCntrl+0x184>)
 8000328:	f043 0310 	orr.w	r3, r3, #16
 800032c:	6313      	str	r3, [r2, #48]	; 0x30
 800032e:	e01f      	b.n	8000370 <GPIO_PeriClkCntrl+0xc0>
		}
		else if(pGPIOx == GPIOF)
 8000330:	687b      	ldr	r3, [r7, #4]
 8000332:	4a45      	ldr	r2, [pc, #276]	; (8000448 <GPIO_PeriClkCntrl+0x198>)
 8000334:	4293      	cmp	r3, r2
 8000336:	d106      	bne.n	8000346 <GPIO_PeriClkCntrl+0x96>
		{
			GPIOF_CLK_EN();
 8000338:	4b3e      	ldr	r3, [pc, #248]	; (8000434 <GPIO_PeriClkCntrl+0x184>)
 800033a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800033c:	4a3d      	ldr	r2, [pc, #244]	; (8000434 <GPIO_PeriClkCntrl+0x184>)
 800033e:	f043 0320 	orr.w	r3, r3, #32
 8000342:	6313      	str	r3, [r2, #48]	; 0x30
 8000344:	e014      	b.n	8000370 <GPIO_PeriClkCntrl+0xc0>
		}
		else if(pGPIOx == GPIOG)
 8000346:	687b      	ldr	r3, [r7, #4]
 8000348:	4a40      	ldr	r2, [pc, #256]	; (800044c <GPIO_PeriClkCntrl+0x19c>)
 800034a:	4293      	cmp	r3, r2
 800034c:	d106      	bne.n	800035c <GPIO_PeriClkCntrl+0xac>
		{
			GPIOG_CLK_EN();
 800034e:	4b39      	ldr	r3, [pc, #228]	; (8000434 <GPIO_PeriClkCntrl+0x184>)
 8000350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000352:	4a38      	ldr	r2, [pc, #224]	; (8000434 <GPIO_PeriClkCntrl+0x184>)
 8000354:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000358:	6313      	str	r3, [r2, #48]	; 0x30
 800035a:	e009      	b.n	8000370 <GPIO_PeriClkCntrl+0xc0>
		}
		else if(pGPIOx == GPIOH)
 800035c:	687b      	ldr	r3, [r7, #4]
 800035e:	4a3c      	ldr	r2, [pc, #240]	; (8000450 <GPIO_PeriClkCntrl+0x1a0>)
 8000360:	4293      	cmp	r3, r2
 8000362:	d105      	bne.n	8000370 <GPIO_PeriClkCntrl+0xc0>
		{
			GPIOH_CLK_EN();
 8000364:	4b33      	ldr	r3, [pc, #204]	; (8000434 <GPIO_PeriClkCntrl+0x184>)
 8000366:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000368:	4a32      	ldr	r2, [pc, #200]	; (8000434 <GPIO_PeriClkCntrl+0x184>)
 800036a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800036e:	6313      	str	r3, [r2, #48]	; 0x30
		}
	}

	if(En_Di == DISABLE)
 8000370:	78fb      	ldrb	r3, [r7, #3]
 8000372:	2b00      	cmp	r3, #0
 8000374:	d156      	bne.n	8000424 <GPIO_PeriClkCntrl+0x174>
	{
		if(pGPIOx == GPIOA)
 8000376:	687b      	ldr	r3, [r7, #4]
 8000378:	4a2d      	ldr	r2, [pc, #180]	; (8000430 <GPIO_PeriClkCntrl+0x180>)
 800037a:	4293      	cmp	r3, r2
 800037c:	d106      	bne.n	800038c <GPIO_PeriClkCntrl+0xdc>
		{
			GPIOA_CLK_DI();
 800037e:	4b2d      	ldr	r3, [pc, #180]	; (8000434 <GPIO_PeriClkCntrl+0x184>)
 8000380:	691b      	ldr	r3, [r3, #16]
 8000382:	4a2c      	ldr	r2, [pc, #176]	; (8000434 <GPIO_PeriClkCntrl+0x184>)
 8000384:	f043 0301 	orr.w	r3, r3, #1
 8000388:	6113      	str	r3, [r2, #16]
		{
			GPIOH_CLK_DI();
		}
	}

}
 800038a:	e04b      	b.n	8000424 <GPIO_PeriClkCntrl+0x174>
		else if(pGPIOx == GPIOB)
 800038c:	687b      	ldr	r3, [r7, #4]
 800038e:	4a2a      	ldr	r2, [pc, #168]	; (8000438 <GPIO_PeriClkCntrl+0x188>)
 8000390:	4293      	cmp	r3, r2
 8000392:	d106      	bne.n	80003a2 <GPIO_PeriClkCntrl+0xf2>
			GPIOB_CLK_DI();
 8000394:	4b27      	ldr	r3, [pc, #156]	; (8000434 <GPIO_PeriClkCntrl+0x184>)
 8000396:	691b      	ldr	r3, [r3, #16]
 8000398:	4a26      	ldr	r2, [pc, #152]	; (8000434 <GPIO_PeriClkCntrl+0x184>)
 800039a:	f043 0302 	orr.w	r3, r3, #2
 800039e:	6113      	str	r3, [r2, #16]
}
 80003a0:	e040      	b.n	8000424 <GPIO_PeriClkCntrl+0x174>
		else if(pGPIOx == GPIOC)
 80003a2:	687b      	ldr	r3, [r7, #4]
 80003a4:	4a25      	ldr	r2, [pc, #148]	; (800043c <GPIO_PeriClkCntrl+0x18c>)
 80003a6:	4293      	cmp	r3, r2
 80003a8:	d106      	bne.n	80003b8 <GPIO_PeriClkCntrl+0x108>
			GPIOC_CLK_DI();
 80003aa:	4b22      	ldr	r3, [pc, #136]	; (8000434 <GPIO_PeriClkCntrl+0x184>)
 80003ac:	691b      	ldr	r3, [r3, #16]
 80003ae:	4a21      	ldr	r2, [pc, #132]	; (8000434 <GPIO_PeriClkCntrl+0x184>)
 80003b0:	f043 0304 	orr.w	r3, r3, #4
 80003b4:	6113      	str	r3, [r2, #16]
}
 80003b6:	e035      	b.n	8000424 <GPIO_PeriClkCntrl+0x174>
		else if(pGPIOx == GPIOD)
 80003b8:	687b      	ldr	r3, [r7, #4]
 80003ba:	4a21      	ldr	r2, [pc, #132]	; (8000440 <GPIO_PeriClkCntrl+0x190>)
 80003bc:	4293      	cmp	r3, r2
 80003be:	d106      	bne.n	80003ce <GPIO_PeriClkCntrl+0x11e>
			GPIOD_CLK_DI();
 80003c0:	4b1c      	ldr	r3, [pc, #112]	; (8000434 <GPIO_PeriClkCntrl+0x184>)
 80003c2:	691b      	ldr	r3, [r3, #16]
 80003c4:	4a1b      	ldr	r2, [pc, #108]	; (8000434 <GPIO_PeriClkCntrl+0x184>)
 80003c6:	f043 0308 	orr.w	r3, r3, #8
 80003ca:	6113      	str	r3, [r2, #16]
}
 80003cc:	e02a      	b.n	8000424 <GPIO_PeriClkCntrl+0x174>
		else if(pGPIOx == GPIOE)
 80003ce:	687b      	ldr	r3, [r7, #4]
 80003d0:	4a1c      	ldr	r2, [pc, #112]	; (8000444 <GPIO_PeriClkCntrl+0x194>)
 80003d2:	4293      	cmp	r3, r2
 80003d4:	d106      	bne.n	80003e4 <GPIO_PeriClkCntrl+0x134>
			GPIOE_CLK_DI();
 80003d6:	4b17      	ldr	r3, [pc, #92]	; (8000434 <GPIO_PeriClkCntrl+0x184>)
 80003d8:	691b      	ldr	r3, [r3, #16]
 80003da:	4a16      	ldr	r2, [pc, #88]	; (8000434 <GPIO_PeriClkCntrl+0x184>)
 80003dc:	f043 0310 	orr.w	r3, r3, #16
 80003e0:	6113      	str	r3, [r2, #16]
}
 80003e2:	e01f      	b.n	8000424 <GPIO_PeriClkCntrl+0x174>
		else if(pGPIOx == GPIOF)
 80003e4:	687b      	ldr	r3, [r7, #4]
 80003e6:	4a18      	ldr	r2, [pc, #96]	; (8000448 <GPIO_PeriClkCntrl+0x198>)
 80003e8:	4293      	cmp	r3, r2
 80003ea:	d106      	bne.n	80003fa <GPIO_PeriClkCntrl+0x14a>
			GPIOF_CLK_DI();
 80003ec:	4b11      	ldr	r3, [pc, #68]	; (8000434 <GPIO_PeriClkCntrl+0x184>)
 80003ee:	691b      	ldr	r3, [r3, #16]
 80003f0:	4a10      	ldr	r2, [pc, #64]	; (8000434 <GPIO_PeriClkCntrl+0x184>)
 80003f2:	f043 0320 	orr.w	r3, r3, #32
 80003f6:	6113      	str	r3, [r2, #16]
}
 80003f8:	e014      	b.n	8000424 <GPIO_PeriClkCntrl+0x174>
		else if(pGPIOx == GPIOG)
 80003fa:	687b      	ldr	r3, [r7, #4]
 80003fc:	4a13      	ldr	r2, [pc, #76]	; (800044c <GPIO_PeriClkCntrl+0x19c>)
 80003fe:	4293      	cmp	r3, r2
 8000400:	d106      	bne.n	8000410 <GPIO_PeriClkCntrl+0x160>
			GPIOG_CLK_DI();
 8000402:	4b0c      	ldr	r3, [pc, #48]	; (8000434 <GPIO_PeriClkCntrl+0x184>)
 8000404:	691b      	ldr	r3, [r3, #16]
 8000406:	4a0b      	ldr	r2, [pc, #44]	; (8000434 <GPIO_PeriClkCntrl+0x184>)
 8000408:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800040c:	6113      	str	r3, [r2, #16]
}
 800040e:	e009      	b.n	8000424 <GPIO_PeriClkCntrl+0x174>
		else if(pGPIOx == GPIOH)
 8000410:	687b      	ldr	r3, [r7, #4]
 8000412:	4a0f      	ldr	r2, [pc, #60]	; (8000450 <GPIO_PeriClkCntrl+0x1a0>)
 8000414:	4293      	cmp	r3, r2
 8000416:	d105      	bne.n	8000424 <GPIO_PeriClkCntrl+0x174>
			GPIOH_CLK_DI();
 8000418:	4b06      	ldr	r3, [pc, #24]	; (8000434 <GPIO_PeriClkCntrl+0x184>)
 800041a:	691b      	ldr	r3, [r3, #16]
 800041c:	4a05      	ldr	r2, [pc, #20]	; (8000434 <GPIO_PeriClkCntrl+0x184>)
 800041e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000422:	6113      	str	r3, [r2, #16]
}
 8000424:	bf00      	nop
 8000426:	370c      	adds	r7, #12
 8000428:	46bd      	mov	sp, r7
 800042a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800042e:	4770      	bx	lr
 8000430:	40020000 	.word	0x40020000
 8000434:	40023800 	.word	0x40023800
 8000438:	40020400 	.word	0x40020400
 800043c:	40020800 	.word	0x40020800
 8000440:	40020c00 	.word	0x40020c00
 8000444:	40021000 	.word	0x40021000
 8000448:	40021400 	.word	0x40021400
 800044c:	40021800 	.word	0x40021800
 8000450:	40021c00 	.word	0x40021c00

08000454 <GPIO_Init>:
 * @return  : void
 *
 * @Note	: NULL
 */
void GPIO_Init(GPIO_handle_t *pGPIOHandle)
{
 8000454:	b580      	push	{r7, lr}
 8000456:	b084      	sub	sp, #16
 8000458:	af00      	add	r7, sp, #0
 800045a:	6078      	str	r0, [r7, #4]
	uint32_t temp = 0;
 800045c:	2300      	movs	r3, #0
 800045e:	60fb      	str	r3, [r7, #12]

	//CONFIG RCC FOR THE GPIO PORT
	GPIO_PeriClkCntrl(pGPIOHandle->pGPIOx, ENABLE);
 8000460:	687b      	ldr	r3, [r7, #4]
 8000462:	681b      	ldr	r3, [r3, #0]
 8000464:	2101      	movs	r1, #1
 8000466:	4618      	mov	r0, r3
 8000468:	f7ff ff22 	bl	80002b0 <GPIO_PeriClkCntrl>

	// CONFIGURE THE MODE OF GPIO PIN
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= 3)
 800046c:	687b      	ldr	r3, [r7, #4]
 800046e:	795b      	ldrb	r3, [r3, #5]
 8000470:	b2db      	uxtb	r3, r3
 8000472:	2b03      	cmp	r3, #3
 8000474:	d813      	bhi.n	800049e <GPIO_Init+0x4a>
	{

		temp = ( pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000476:	687b      	ldr	r3, [r7, #4]
 8000478:	795b      	ldrb	r3, [r3, #5]
 800047a:	b2db      	uxtb	r3, r3
 800047c:	461a      	mov	r2, r3
 800047e:	687b      	ldr	r3, [r7, #4]
 8000480:	791b      	ldrb	r3, [r3, #4]
 8000482:	b2db      	uxtb	r3, r3
 8000484:	005b      	lsls	r3, r3, #1
 8000486:	fa02 f303 	lsl.w	r3, r2, r3
 800048a:	60fb      	str	r3, [r7, #12]
		pGPIOHandle->pGPIOx->MODER |= temp;
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	681b      	ldr	r3, [r3, #0]
 8000490:	6819      	ldr	r1, [r3, #0]
 8000492:	687b      	ldr	r3, [r7, #4]
 8000494:	681b      	ldr	r3, [r3, #0]
 8000496:	68fa      	ldr	r2, [r7, #12]
 8000498:	430a      	orrs	r2, r1
 800049a:	601a      	str	r2, [r3, #0]
 800049c:	e0c7      	b.n	800062e <GPIO_Init+0x1da>

	}
	else
	{
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT)
 800049e:	687b      	ldr	r3, [r7, #4]
 80004a0:	795b      	ldrb	r3, [r3, #5]
 80004a2:	b2db      	uxtb	r3, r3
 80004a4:	2b04      	cmp	r3, #4
 80004a6:	d11a      	bne.n	80004de <GPIO_Init+0x8a>
		{
			//CONFIGURE THE FTSR (FALLING TRIGGER SELECTION REGISTER)
			EXTI->FTSR |= (0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80004a8:	687b      	ldr	r3, [r7, #4]
 80004aa:	791b      	ldrb	r3, [r3, #4]
 80004ac:	b2db      	uxtb	r3, r3
 80004ae:	461a      	mov	r2, r3
 80004b0:	2301      	movs	r3, #1
 80004b2:	fa03 f202 	lsl.w	r2, r3, r2
 80004b6:	4b9e      	ldr	r3, [pc, #632]	; (8000730 <GPIO_Init+0x2dc>)
 80004b8:	68db      	ldr	r3, [r3, #12]
 80004ba:	4611      	mov	r1, r2
 80004bc:	4a9c      	ldr	r2, [pc, #624]	; (8000730 <GPIO_Init+0x2dc>)
 80004be:	430b      	orrs	r3, r1
 80004c0:	60d3      	str	r3, [r2, #12]
			//CLEAR RTSR
			EXTI->RTSR &= ~(0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	791b      	ldrb	r3, [r3, #4]
 80004c6:	b2db      	uxtb	r3, r3
 80004c8:	461a      	mov	r2, r3
 80004ca:	2301      	movs	r3, #1
 80004cc:	4093      	lsls	r3, r2
 80004ce:	43da      	mvns	r2, r3
 80004d0:	4b97      	ldr	r3, [pc, #604]	; (8000730 <GPIO_Init+0x2dc>)
 80004d2:	689b      	ldr	r3, [r3, #8]
 80004d4:	4611      	mov	r1, r2
 80004d6:	4a96      	ldr	r2, [pc, #600]	; (8000730 <GPIO_Init+0x2dc>)
 80004d8:	400b      	ands	r3, r1
 80004da:	6093      	str	r3, [r2, #8]
 80004dc:	e03e      	b.n	800055c <GPIO_Init+0x108>
		}
		else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT)
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	795b      	ldrb	r3, [r3, #5]
 80004e2:	b2db      	uxtb	r3, r3
 80004e4:	2b05      	cmp	r3, #5
 80004e6:	d11a      	bne.n	800051e <GPIO_Init+0xca>
		{
			//CONFIGURE THE RTSR (RISING TRIGGER SELECTION REGISTER
			EXTI->RTSR |= (0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	791b      	ldrb	r3, [r3, #4]
 80004ec:	b2db      	uxtb	r3, r3
 80004ee:	461a      	mov	r2, r3
 80004f0:	2301      	movs	r3, #1
 80004f2:	fa03 f202 	lsl.w	r2, r3, r2
 80004f6:	4b8e      	ldr	r3, [pc, #568]	; (8000730 <GPIO_Init+0x2dc>)
 80004f8:	689b      	ldr	r3, [r3, #8]
 80004fa:	4611      	mov	r1, r2
 80004fc:	4a8c      	ldr	r2, [pc, #560]	; (8000730 <GPIO_Init+0x2dc>)
 80004fe:	430b      	orrs	r3, r1
 8000500:	6093      	str	r3, [r2, #8]
			//CLEAR FTSR
			EXTI->FTSR &= ~(0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	791b      	ldrb	r3, [r3, #4]
 8000506:	b2db      	uxtb	r3, r3
 8000508:	461a      	mov	r2, r3
 800050a:	2301      	movs	r3, #1
 800050c:	4093      	lsls	r3, r2
 800050e:	43da      	mvns	r2, r3
 8000510:	4b87      	ldr	r3, [pc, #540]	; (8000730 <GPIO_Init+0x2dc>)
 8000512:	68db      	ldr	r3, [r3, #12]
 8000514:	4611      	mov	r1, r2
 8000516:	4a86      	ldr	r2, [pc, #536]	; (8000730 <GPIO_Init+0x2dc>)
 8000518:	400b      	ands	r3, r1
 800051a:	60d3      	str	r3, [r2, #12]
 800051c:	e01e      	b.n	800055c <GPIO_Init+0x108>
		}
		else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT)
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	795b      	ldrb	r3, [r3, #5]
 8000522:	b2db      	uxtb	r3, r3
 8000524:	2b06      	cmp	r3, #6
 8000526:	d119      	bne.n	800055c <GPIO_Init+0x108>
		{
			//CONFIGURE BOTH RTSR AND FTSRpGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
			EXTI->FTSR |= (0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	791b      	ldrb	r3, [r3, #4]
 800052c:	b2db      	uxtb	r3, r3
 800052e:	461a      	mov	r2, r3
 8000530:	2301      	movs	r3, #1
 8000532:	fa03 f202 	lsl.w	r2, r3, r2
 8000536:	4b7e      	ldr	r3, [pc, #504]	; (8000730 <GPIO_Init+0x2dc>)
 8000538:	68db      	ldr	r3, [r3, #12]
 800053a:	4611      	mov	r1, r2
 800053c:	4a7c      	ldr	r2, [pc, #496]	; (8000730 <GPIO_Init+0x2dc>)
 800053e:	430b      	orrs	r3, r1
 8000540:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR |= (0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	791b      	ldrb	r3, [r3, #4]
 8000546:	b2db      	uxtb	r3, r3
 8000548:	461a      	mov	r2, r3
 800054a:	2301      	movs	r3, #1
 800054c:	fa03 f202 	lsl.w	r2, r3, r2
 8000550:	4b77      	ldr	r3, [pc, #476]	; (8000730 <GPIO_Init+0x2dc>)
 8000552:	689b      	ldr	r3, [r3, #8]
 8000554:	4611      	mov	r1, r2
 8000556:	4a76      	ldr	r2, [pc, #472]	; (8000730 <GPIO_Init+0x2dc>)
 8000558:	430b      	orrs	r3, r1
 800055a:	6093      	str	r3, [r2, #8]
		}

		//CONFIGURE THE GPIO PORT SELECTION IN SYSCFG_EXTICR
		uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber/2;
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	791b      	ldrb	r3, [r3, #4]
 8000560:	b2db      	uxtb	r3, r3
 8000562:	085b      	lsrs	r3, r3, #1
 8000564:	72fb      	strb	r3, [r7, #11]
		uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber%2;
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	791b      	ldrb	r3, [r3, #4]
 800056a:	b2db      	uxtb	r3, r3
 800056c:	f003 0301 	and.w	r3, r3, #1
 8000570:	72bb      	strb	r3, [r7, #10]

		uint8_t portcode = GPIO_BA_CODE(pGPIOHandle->pGPIOx);
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	681b      	ldr	r3, [r3, #0]
 8000576:	4a6f      	ldr	r2, [pc, #444]	; (8000734 <GPIO_Init+0x2e0>)
 8000578:	4293      	cmp	r3, r2
 800057a:	d032      	beq.n	80005e2 <GPIO_Init+0x18e>
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	4a6d      	ldr	r2, [pc, #436]	; (8000738 <GPIO_Init+0x2e4>)
 8000582:	4293      	cmp	r3, r2
 8000584:	d02b      	beq.n	80005de <GPIO_Init+0x18a>
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	4a6c      	ldr	r2, [pc, #432]	; (800073c <GPIO_Init+0x2e8>)
 800058c:	4293      	cmp	r3, r2
 800058e:	d024      	beq.n	80005da <GPIO_Init+0x186>
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	4a6a      	ldr	r2, [pc, #424]	; (8000740 <GPIO_Init+0x2ec>)
 8000596:	4293      	cmp	r3, r2
 8000598:	d01d      	beq.n	80005d6 <GPIO_Init+0x182>
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	681b      	ldr	r3, [r3, #0]
 800059e:	4a69      	ldr	r2, [pc, #420]	; (8000744 <GPIO_Init+0x2f0>)
 80005a0:	4293      	cmp	r3, r2
 80005a2:	d016      	beq.n	80005d2 <GPIO_Init+0x17e>
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	4a67      	ldr	r2, [pc, #412]	; (8000748 <GPIO_Init+0x2f4>)
 80005aa:	4293      	cmp	r3, r2
 80005ac:	d00f      	beq.n	80005ce <GPIO_Init+0x17a>
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	681b      	ldr	r3, [r3, #0]
 80005b2:	4a66      	ldr	r2, [pc, #408]	; (800074c <GPIO_Init+0x2f8>)
 80005b4:	4293      	cmp	r3, r2
 80005b6:	d008      	beq.n	80005ca <GPIO_Init+0x176>
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	4a64      	ldr	r2, [pc, #400]	; (8000750 <GPIO_Init+0x2fc>)
 80005be:	4293      	cmp	r3, r2
 80005c0:	d101      	bne.n	80005c6 <GPIO_Init+0x172>
 80005c2:	2307      	movs	r3, #7
 80005c4:	e00e      	b.n	80005e4 <GPIO_Init+0x190>
 80005c6:	23ff      	movs	r3, #255	; 0xff
 80005c8:	e00c      	b.n	80005e4 <GPIO_Init+0x190>
 80005ca:	2306      	movs	r3, #6
 80005cc:	e00a      	b.n	80005e4 <GPIO_Init+0x190>
 80005ce:	2305      	movs	r3, #5
 80005d0:	e008      	b.n	80005e4 <GPIO_Init+0x190>
 80005d2:	2304      	movs	r3, #4
 80005d4:	e006      	b.n	80005e4 <GPIO_Init+0x190>
 80005d6:	2303      	movs	r3, #3
 80005d8:	e004      	b.n	80005e4 <GPIO_Init+0x190>
 80005da:	2302      	movs	r3, #2
 80005dc:	e002      	b.n	80005e4 <GPIO_Init+0x190>
 80005de:	2301      	movs	r3, #1
 80005e0:	e000      	b.n	80005e4 <GPIO_Init+0x190>
 80005e2:	2300      	movs	r3, #0
 80005e4:	727b      	strb	r3, [r7, #9]

		SYSCFG_CLK_EN();
 80005e6:	4b5b      	ldr	r3, [pc, #364]	; (8000754 <GPIO_Init+0x300>)
 80005e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80005ea:	4a5a      	ldr	r2, [pc, #360]	; (8000754 <GPIO_Init+0x300>)
 80005ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005f0:	6453      	str	r3, [r2, #68]	; 0x44
		SYSCFG->EXTICR[temp1] |= ( portcode << 4*temp2 );
 80005f2:	4a59      	ldr	r2, [pc, #356]	; (8000758 <GPIO_Init+0x304>)
 80005f4:	7afb      	ldrb	r3, [r7, #11]
 80005f6:	3302      	adds	r3, #2
 80005f8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80005fc:	7a79      	ldrb	r1, [r7, #9]
 80005fe:	7abb      	ldrb	r3, [r7, #10]
 8000600:	009b      	lsls	r3, r3, #2
 8000602:	fa01 f303 	lsl.w	r3, r1, r3
 8000606:	4618      	mov	r0, r3
 8000608:	4953      	ldr	r1, [pc, #332]	; (8000758 <GPIO_Init+0x304>)
 800060a:	7afb      	ldrb	r3, [r7, #11]
 800060c:	4302      	orrs	r2, r0
 800060e:	3302      	adds	r3, #2
 8000610:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


		//ENABLE THE EXTI INTERRUPT DELIVERY USING IMR
		EXTI->IMR |= (0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	791b      	ldrb	r3, [r3, #4]
 8000618:	b2db      	uxtb	r3, r3
 800061a:	461a      	mov	r2, r3
 800061c:	2301      	movs	r3, #1
 800061e:	fa03 f202 	lsl.w	r2, r3, r2
 8000622:	4b43      	ldr	r3, [pc, #268]	; (8000730 <GPIO_Init+0x2dc>)
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	4611      	mov	r1, r2
 8000628:	4a41      	ldr	r2, [pc, #260]	; (8000730 <GPIO_Init+0x2dc>)
 800062a:	430b      	orrs	r3, r1
 800062c:	6013      	str	r3, [r2, #0]

	}

	temp = 0;
 800062e:	2300      	movs	r3, #0
 8000630:	60fb      	str	r3, [r7, #12]
	// CONFIGURE THE SPEED
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	799b      	ldrb	r3, [r3, #6]
 8000636:	b2db      	uxtb	r3, r3
 8000638:	461a      	mov	r2, r3
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	791b      	ldrb	r3, [r3, #4]
 800063e:	b2db      	uxtb	r3, r3
 8000640:	005b      	lsls	r3, r3, #1
 8000642:	fa02 f303 	lsl.w	r3, r2, r3
 8000646:	60fb      	str	r3, [r7, #12]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	6899      	ldr	r1, [r3, #8]
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	68fa      	ldr	r2, [r7, #12]
 8000654:	430a      	orrs	r2, r1
 8000656:	609a      	str	r2, [r3, #8]

	temp = 0;
 8000658:	2300      	movs	r3, #0
 800065a:	60fb      	str	r3, [r7, #12]
	// CONFIGURE THE PUPD SETTINGS
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	79db      	ldrb	r3, [r3, #7]
 8000660:	b2db      	uxtb	r3, r3
 8000662:	461a      	mov	r2, r3
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	791b      	ldrb	r3, [r3, #4]
 8000668:	b2db      	uxtb	r3, r3
 800066a:	005b      	lsls	r3, r3, #1
 800066c:	fa02 f303 	lsl.w	r3, r2, r3
 8000670:	60fb      	str	r3, [r7, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	681b      	ldr	r3, [r3, #0]
 8000676:	68d9      	ldr	r1, [r3, #12]
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	68fa      	ldr	r2, [r7, #12]
 800067e:	430a      	orrs	r2, r1
 8000680:	60da      	str	r2, [r3, #12]

	temp = 0;
 8000682:	2300      	movs	r3, #0
 8000684:	60fb      	str	r3, [r7, #12]
	// CONFIGURE THE OPTYPE
	pGPIOHandle->pGPIOx->OTYPER |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	7a1b      	ldrb	r3, [r3, #8]
 800068a:	b2db      	uxtb	r3, r3
 800068c:	461a      	mov	r2, r3
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	791b      	ldrb	r3, [r3, #4]
 8000692:	b2db      	uxtb	r3, r3
 8000694:	fa02 f103 	lsl.w	r1, r2, r3
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	685a      	ldr	r2, [r3, #4]
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	430a      	orrs	r2, r1
 80006a4:	605a      	str	r2, [r3, #4]

	temp = 0;
 80006a6:	2300      	movs	r3, #0
 80006a8:	60fb      	str	r3, [r7, #12]
	// CONFIGURE THE ALTERNATE FUNCTIONALITY OF THE PIN
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_ALT_FN)
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	795b      	ldrb	r3, [r3, #5]
 80006ae:	b2db      	uxtb	r3, r3
 80006b0:	2b02      	cmp	r3, #2
 80006b2:	f040 8094 	bne.w	80007de <GPIO_Init+0x38a>
	{
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber <= 3)
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	791b      	ldrb	r3, [r3, #4]
 80006ba:	b2db      	uxtb	r3, r3
 80006bc:	2b03      	cmp	r3, #3
 80006be:	d815      	bhi.n	80006ec <GPIO_Init+0x298>
		{
			temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4 * (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4)));
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	7a5b      	ldrb	r3, [r3, #9]
 80006c4:	b2db      	uxtb	r3, r3
 80006c6:	461a      	mov	r2, r3
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	791b      	ldrb	r3, [r3, #4]
 80006cc:	b2db      	uxtb	r3, r3
 80006ce:	f003 0303 	and.w	r3, r3, #3
 80006d2:	009b      	lsls	r3, r3, #2
 80006d4:	fa02 f303 	lsl.w	r3, r2, r3
 80006d8:	60fb      	str	r3, [r7, #12]
			pGPIOHandle->pGPIOx->AFR[0] |= temp;
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	6a19      	ldr	r1, [r3, #32]
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	68fa      	ldr	r2, [r7, #12]
 80006e6:	430a      	orrs	r2, r1
 80006e8:	621a      	str	r2, [r3, #32]
		{
			temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (16 + 4 * (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4)));
			pGPIOHandle->pGPIOx->AFR[1] |= temp;
		}
	}
}
 80006ea:	e078      	b.n	80007de <GPIO_Init+0x38a>
		else if((pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber <= 7) && (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber > 3))
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	791b      	ldrb	r3, [r3, #4]
 80006f0:	b2db      	uxtb	r3, r3
 80006f2:	2b07      	cmp	r3, #7
 80006f4:	d832      	bhi.n	800075c <GPIO_Init+0x308>
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	791b      	ldrb	r3, [r3, #4]
 80006fa:	b2db      	uxtb	r3, r3
 80006fc:	2b03      	cmp	r3, #3
 80006fe:	d92d      	bls.n	800075c <GPIO_Init+0x308>
			temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (16 + 4 * (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4)));
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	7a5b      	ldrb	r3, [r3, #9]
 8000704:	b2db      	uxtb	r3, r3
 8000706:	461a      	mov	r2, r3
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	791b      	ldrb	r3, [r3, #4]
 800070c:	b2db      	uxtb	r3, r3
 800070e:	f003 0303 	and.w	r3, r3, #3
 8000712:	3304      	adds	r3, #4
 8000714:	009b      	lsls	r3, r3, #2
 8000716:	fa02 f303 	lsl.w	r3, r2, r3
 800071a:	60fb      	str	r3, [r7, #12]
			pGPIOHandle->pGPIOx->AFR[0] |= temp;
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	6a19      	ldr	r1, [r3, #32]
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	68fa      	ldr	r2, [r7, #12]
 8000728:	430a      	orrs	r2, r1
 800072a:	621a      	str	r2, [r3, #32]
 800072c:	e057      	b.n	80007de <GPIO_Init+0x38a>
 800072e:	bf00      	nop
 8000730:	40013c00 	.word	0x40013c00
 8000734:	40020000 	.word	0x40020000
 8000738:	40020400 	.word	0x40020400
 800073c:	40020800 	.word	0x40020800
 8000740:	40020c00 	.word	0x40020c00
 8000744:	40021000 	.word	0x40021000
 8000748:	40021400 	.word	0x40021400
 800074c:	40021800 	.word	0x40021800
 8000750:	40021c00 	.word	0x40021c00
 8000754:	40023800 	.word	0x40023800
 8000758:	40013800 	.word	0x40013800
		else if((pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber <= 11) && (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber > 7))
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	791b      	ldrb	r3, [r3, #4]
 8000760:	b2db      	uxtb	r3, r3
 8000762:	2b0b      	cmp	r3, #11
 8000764:	d81a      	bhi.n	800079c <GPIO_Init+0x348>
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	791b      	ldrb	r3, [r3, #4]
 800076a:	b2db      	uxtb	r3, r3
 800076c:	2b07      	cmp	r3, #7
 800076e:	d915      	bls.n	800079c <GPIO_Init+0x348>
			temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << ( 4 * (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4)));
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	7a5b      	ldrb	r3, [r3, #9]
 8000774:	b2db      	uxtb	r3, r3
 8000776:	461a      	mov	r2, r3
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	791b      	ldrb	r3, [r3, #4]
 800077c:	b2db      	uxtb	r3, r3
 800077e:	f003 0303 	and.w	r3, r3, #3
 8000782:	009b      	lsls	r3, r3, #2
 8000784:	fa02 f303 	lsl.w	r3, r2, r3
 8000788:	60fb      	str	r3, [r7, #12]
			pGPIOHandle->pGPIOx->AFR[1] |= temp;
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	68fa      	ldr	r2, [r7, #12]
 8000796:	430a      	orrs	r2, r1
 8000798:	625a      	str	r2, [r3, #36]	; 0x24
 800079a:	e020      	b.n	80007de <GPIO_Init+0x38a>
		else if((pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber <= 15) && (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber > 11))
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	791b      	ldrb	r3, [r3, #4]
 80007a0:	b2db      	uxtb	r3, r3
 80007a2:	2b0f      	cmp	r3, #15
 80007a4:	d81b      	bhi.n	80007de <GPIO_Init+0x38a>
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	791b      	ldrb	r3, [r3, #4]
 80007aa:	b2db      	uxtb	r3, r3
 80007ac:	2b0b      	cmp	r3, #11
 80007ae:	d916      	bls.n	80007de <GPIO_Init+0x38a>
			temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (16 + 4 * (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4)));
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	7a5b      	ldrb	r3, [r3, #9]
 80007b4:	b2db      	uxtb	r3, r3
 80007b6:	461a      	mov	r2, r3
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	791b      	ldrb	r3, [r3, #4]
 80007bc:	b2db      	uxtb	r3, r3
 80007be:	f003 0303 	and.w	r3, r3, #3
 80007c2:	3304      	adds	r3, #4
 80007c4:	009b      	lsls	r3, r3, #2
 80007c6:	fa02 f303 	lsl.w	r3, r2, r3
 80007ca:	60fb      	str	r3, [r7, #12]
			pGPIOHandle->pGPIOx->AFR[1] |= temp;
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	68fa      	ldr	r2, [r7, #12]
 80007d8:	430a      	orrs	r2, r1
 80007da:	625a      	str	r2, [r3, #36]	; 0x24
}
 80007dc:	e7ff      	b.n	80007de <GPIO_Init+0x38a>
 80007de:	bf00      	nop
 80007e0:	3710      	adds	r7, #16
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	bf00      	nop

080007e8 <GPIO_ReadIPin>:
 * @return  : void
 *
 * @Note	: Returns SET(1) or RESET(0)
 */
uint8_t GPIO_ReadIPin(GPIO_regdef_t *pGPIOx, uint8_t Pin_No)
{
 80007e8:	b480      	push	{r7}
 80007ea:	b085      	sub	sp, #20
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]
 80007f0:	460b      	mov	r3, r1
 80007f2:	70fb      	strb	r3, [r7, #3]

	uint8_t temp;

	temp = (uint8_t)( (pGPIOx->IDR >> Pin_No) & 0x00000001);
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	691a      	ldr	r2, [r3, #16]
 80007f8:	78fb      	ldrb	r3, [r7, #3]
 80007fa:	fa22 f303 	lsr.w	r3, r2, r3
 80007fe:	b2db      	uxtb	r3, r3
 8000800:	f003 0301 	and.w	r3, r3, #1
 8000804:	73fb      	strb	r3, [r7, #15]

	return(temp);
 8000806:	7bfb      	ldrb	r3, [r7, #15]
}
 8000808:	4618      	mov	r0, r3
 800080a:	3714      	adds	r7, #20
 800080c:	46bd      	mov	sp, r7
 800080e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000812:	4770      	bx	lr

08000814 <GPIO_ToggleOPin>:
 * @return  : void
 *
 * @Note	: NULL
 */
void GPIO_ToggleOPin(GPIO_regdef_t *pGPIOx, uint8_t Pin_No)
{
 8000814:	b480      	push	{r7}
 8000816:	b083      	sub	sp, #12
 8000818:	af00      	add	r7, sp, #0
 800081a:	6078      	str	r0, [r7, #4]
 800081c:	460b      	mov	r3, r1
 800081e:	70fb      	strb	r3, [r7, #3]

	pGPIOx->ODR ^= (0x1 << Pin_No);
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	695b      	ldr	r3, [r3, #20]
 8000824:	78fa      	ldrb	r2, [r7, #3]
 8000826:	2101      	movs	r1, #1
 8000828:	fa01 f202 	lsl.w	r2, r1, r2
 800082c:	405a      	eors	r2, r3
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	615a      	str	r2, [r3, #20]
}
 8000832:	bf00      	nop
 8000834:	370c      	adds	r7, #12
 8000836:	46bd      	mov	sp, r7
 8000838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083c:	4770      	bx	lr

0800083e <I2C_GenerateStartCondition>:
 *
 * @Note              - private function

 */
static void I2C_GenerateStartCondition(I2C_RegDef_t *pI2Cx)
{
 800083e:	b480      	push	{r7}
 8000840:	b083      	sub	sp, #12
 8000842:	af00      	add	r7, sp, #0
 8000844:	6078      	str	r0, [r7, #4]
	pI2Cx->CR1 |= (0x1 << I2C_CR1_START);
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	601a      	str	r2, [r3, #0]
}
 8000852:	bf00      	nop
 8000854:	370c      	adds	r7, #12
 8000856:	46bd      	mov	sp, r7
 8000858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085c:	4770      	bx	lr

0800085e <I2C_ExecuteAddrPhase>:
 *
 * @Note              - private function

 */
static void I2C_ExecuteAddrPhase(I2C_RegDef_t *pI2Cx, uint8_t SlaveAddr, uint8_t mode)
{
 800085e:	b480      	push	{r7}
 8000860:	b083      	sub	sp, #12
 8000862:	af00      	add	r7, sp, #0
 8000864:	6078      	str	r0, [r7, #4]
 8000866:	460b      	mov	r3, r1
 8000868:	70fb      	strb	r3, [r7, #3]
 800086a:	4613      	mov	r3, r2
 800086c:	70bb      	strb	r3, [r7, #2]
	if(mode == WRITE)
 800086e:	78bb      	ldrb	r3, [r7, #2]
 8000870:	2b00      	cmp	r3, #0
 8000872:	d105      	bne.n	8000880 <I2C_ExecuteAddrPhase+0x22>
	{
		pI2Cx->DR  =  ( (SlaveAddr << 1) | 0x0 );								//Shifting the slave address left by in byte bringing in a 0 from right which is the new LSB
 8000874:	78fb      	ldrb	r3, [r7, #3]
 8000876:	005b      	lsls	r3, r3, #1
 8000878:	461a      	mov	r2, r3
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	611a      	str	r2, [r3, #16]
	}
	else
	{
		pI2Cx->DR = ( (SlaveAddr << 1) |  0x1 );
	}
}
 800087e:	e006      	b.n	800088e <I2C_ExecuteAddrPhase+0x30>
		pI2Cx->DR = ( (SlaveAddr << 1) |  0x1 );
 8000880:	78fb      	ldrb	r3, [r7, #3]
 8000882:	005b      	lsls	r3, r3, #1
 8000884:	f043 0301 	orr.w	r3, r3, #1
 8000888:	461a      	mov	r2, r3
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	611a      	str	r2, [r3, #16]
}
 800088e:	bf00      	nop
 8000890:	370c      	adds	r7, #12
 8000892:	46bd      	mov	sp, r7
 8000894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000898:	4770      	bx	lr

0800089a <I2C_Enable>:
 *
 * @Note              - NULL

 */
void I2C_Enable(I2C_RegDef_t *pI2Cx , uint8_t EN_DI)
{
 800089a:	b480      	push	{r7}
 800089c:	b083      	sub	sp, #12
 800089e:	af00      	add	r7, sp, #0
 80008a0:	6078      	str	r0, [r7, #4]
 80008a2:	460b      	mov	r3, r1
 80008a4:	70fb      	strb	r3, [r7, #3]
	if(EN_DI == ENABLE)
 80008a6:	78fb      	ldrb	r3, [r7, #3]
 80008a8:	2b01      	cmp	r3, #1
 80008aa:	d106      	bne.n	80008ba <I2C_Enable+0x20>
		pI2Cx->CR1 |= ( 0x1 << I2C_CR1_PE );
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	f043 0201 	orr.w	r2, r3, #1
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	601a      	str	r2, [r3, #0]

	else pI2Cx->CR1 &= ~(0x1 << I2C_CR1_PE);

}
 80008b8:	e005      	b.n	80008c6 <I2C_Enable+0x2c>
	else pI2Cx->CR1 &= ~(0x1 << I2C_CR1_PE);
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	f023 0201 	bic.w	r2, r3, #1
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	601a      	str	r2, [r3, #0]
}
 80008c6:	bf00      	nop
 80008c8:	370c      	adds	r7, #12
 80008ca:	46bd      	mov	sp, r7
 80008cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d0:	4770      	bx	lr

080008d2 <I2C_GetFagStatus>:
 *
 * @Note              - NULL

 */
uint8_t I2C_GetFagStatus(I2C_RegDef_t *pI2Cx, uint32_t FlagName)
{
 80008d2:	b480      	push	{r7}
 80008d4:	b083      	sub	sp, #12
 80008d6:	af00      	add	r7, sp, #0
 80008d8:	6078      	str	r0, [r7, #4]
 80008da:	6039      	str	r1, [r7, #0]
	if( pI2Cx->SR1 & (0x1 << FlagName) )
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	695b      	ldr	r3, [r3, #20]
 80008e0:	2101      	movs	r1, #1
 80008e2:	683a      	ldr	r2, [r7, #0]
 80008e4:	fa01 f202 	lsl.w	r2, r1, r2
 80008e8:	4013      	ands	r3, r2
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d001      	beq.n	80008f2 <I2C_GetFagStatus+0x20>
		return FLAG_SET;
 80008ee:	2301      	movs	r3, #1
 80008f0:	e000      	b.n	80008f4 <I2C_GetFagStatus+0x22>

	return FLAG_RESET;
 80008f2:	2300      	movs	r3, #0
}
 80008f4:	4618      	mov	r0, r3
 80008f6:	370c      	adds	r7, #12
 80008f8:	46bd      	mov	sp, r7
 80008fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fe:	4770      	bx	lr

08000900 <RCC_GetClkVal>:
 *
 * @Note              - NULL

 */
uint32_t RCC_GetClkVal(void)
{
 8000900:	b480      	push	{r7}
 8000902:	b085      	sub	sp, #20
 8000904:	af00      	add	r7, sp, #0
	uint32_t PCLK1, Clk_SCL, temp;
	uint8_t System_clk_status, AHB1_Prescalar, APB1_Prescalar;

	System_clk_status = ((RCC->CFGR >> 2 ) & (0x3));
 8000906:	4b20      	ldr	r3, [pc, #128]	; (8000988 <RCC_GetClkVal+0x88>)
 8000908:	689b      	ldr	r3, [r3, #8]
 800090a:	089b      	lsrs	r3, r3, #2
 800090c:	b2db      	uxtb	r3, r3
 800090e:	f003 0303 	and.w	r3, r3, #3
 8000912:	727b      	strb	r3, [r7, #9]

	if(System_clk_status == 0)
 8000914:	7a7b      	ldrb	r3, [r7, #9]
 8000916:	2b00      	cmp	r3, #0
 8000918:	d101      	bne.n	800091e <RCC_GetClkVal+0x1e>
	{
		//HSI
		Clk_SCL = 16000000;
 800091a:	4b1c      	ldr	r3, [pc, #112]	; (800098c <RCC_GetClkVal+0x8c>)
 800091c:	60fb      	str	r3, [r7, #12]
	}else if(System_clk_status == 3)
	{
		//PLL_R
	}

	temp = ((RCC->CFGR >> 4) & (0x4));
 800091e:	4b1a      	ldr	r3, [pc, #104]	; (8000988 <RCC_GetClkVal+0x88>)
 8000920:	689b      	ldr	r3, [r3, #8]
 8000922:	091b      	lsrs	r3, r3, #4
 8000924:	f003 0304 	and.w	r3, r3, #4
 8000928:	607b      	str	r3, [r7, #4]

	if(temp < 8)
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	2b07      	cmp	r3, #7
 800092e:	d802      	bhi.n	8000936 <RCC_GetClkVal+0x36>
	{
		AHB1_Prescalar = 1;
 8000930:	2301      	movs	r3, #1
 8000932:	72fb      	strb	r3, [r7, #11]
 8000934:	e006      	b.n	8000944 <RCC_GetClkVal+0x44>
	}else
	{
		AHB1_Prescalar = (AHB1P[temp] - 8);
 8000936:	4a16      	ldr	r2, [pc, #88]	; (8000990 <RCC_GetClkVal+0x90>)
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800093e:	b2db      	uxtb	r3, r3
 8000940:	3b08      	subs	r3, #8
 8000942:	72fb      	strb	r3, [r7, #11]
	}

	temp = ((RCC->CFGR >> 10 ) & (0x3));
 8000944:	4b10      	ldr	r3, [pc, #64]	; (8000988 <RCC_GetClkVal+0x88>)
 8000946:	689b      	ldr	r3, [r3, #8]
 8000948:	0a9b      	lsrs	r3, r3, #10
 800094a:	f003 0303 	and.w	r3, r3, #3
 800094e:	607b      	str	r3, [r7, #4]

	if(temp < 4)
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	2b03      	cmp	r3, #3
 8000954:	d802      	bhi.n	800095c <RCC_GetClkVal+0x5c>
	{
		APB1_Prescalar = 1;
 8000956:	2301      	movs	r3, #1
 8000958:	72bb      	strb	r3, [r7, #10]
 800095a:	e006      	b.n	800096a <RCC_GetClkVal+0x6a>

	}else
	{
		APB1_Prescalar = (APB1p[temp] - 4);
 800095c:	4a0d      	ldr	r2, [pc, #52]	; (8000994 <RCC_GetClkVal+0x94>)
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000964:	b2db      	uxtb	r3, r3
 8000966:	3b04      	subs	r3, #4
 8000968:	72bb      	strb	r3, [r7, #10]
	}

	PCLK1 = (Clk_SCL/ AHB1_Prescalar)/APB1_Prescalar;
 800096a:	7afb      	ldrb	r3, [r7, #11]
 800096c:	68fa      	ldr	r2, [r7, #12]
 800096e:	fbb2 f2f3 	udiv	r2, r2, r3
 8000972:	7abb      	ldrb	r3, [r7, #10]
 8000974:	fbb2 f3f3 	udiv	r3, r2, r3
 8000978:	603b      	str	r3, [r7, #0]

	return PCLK1;
 800097a:	683b      	ldr	r3, [r7, #0]
}
 800097c:	4618      	mov	r0, r3
 800097e:	3714      	adds	r7, #20
 8000980:	46bd      	mov	sp, r7
 8000982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000986:	4770      	bx	lr
 8000988:	40023800 	.word	0x40023800
 800098c:	00f42400 	.word	0x00f42400
 8000990:	20000000 	.word	0x20000000
 8000994:	20000020 	.word	0x20000020

08000998 <I2C_PeriClkCntrl>:
 *
 * @Note              - NULL

 */
void I2C_PeriClkCntrl(I2C_RegDef_t *pI2Cx, uint8_t En_Di)
{
 8000998:	b480      	push	{r7}
 800099a:	b083      	sub	sp, #12
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
 80009a0:	460b      	mov	r3, r1
 80009a2:	70fb      	strb	r3, [r7, #3]
	if(En_Di  ==	 ENABLE)
 80009a4:	78fb      	ldrb	r3, [r7, #3]
 80009a6:	2b01      	cmp	r3, #1
 80009a8:	d120      	bne.n	80009ec <I2C_PeriClkCntrl+0x54>
	{
		if(pI2Cx == I2C1)
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	4a22      	ldr	r2, [pc, #136]	; (8000a38 <I2C_PeriClkCntrl+0xa0>)
 80009ae:	4293      	cmp	r3, r2
 80009b0:	d106      	bne.n	80009c0 <I2C_PeriClkCntrl+0x28>
			I2C1_CLK_EN();
 80009b2:	4b22      	ldr	r3, [pc, #136]	; (8000a3c <I2C_PeriClkCntrl+0xa4>)
 80009b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009b6:	4a21      	ldr	r2, [pc, #132]	; (8000a3c <I2C_PeriClkCntrl+0xa4>)
 80009b8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80009bc:	6413      	str	r3, [r2, #64]	; 0x40
		else if(pI2Cx == I2C3)
			I2C3_CLK_DI();

	}

}
 80009be:	e035      	b.n	8000a2c <I2C_PeriClkCntrl+0x94>
		else if(pI2Cx == I2C2)
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	4a1f      	ldr	r2, [pc, #124]	; (8000a40 <I2C_PeriClkCntrl+0xa8>)
 80009c4:	4293      	cmp	r3, r2
 80009c6:	d106      	bne.n	80009d6 <I2C_PeriClkCntrl+0x3e>
			I2C2_CLK_EN();
 80009c8:	4b1c      	ldr	r3, [pc, #112]	; (8000a3c <I2C_PeriClkCntrl+0xa4>)
 80009ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009cc:	4a1b      	ldr	r2, [pc, #108]	; (8000a3c <I2C_PeriClkCntrl+0xa4>)
 80009ce:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80009d2:	6413      	str	r3, [r2, #64]	; 0x40
}
 80009d4:	e02a      	b.n	8000a2c <I2C_PeriClkCntrl+0x94>
		else if(pI2Cx == I2C3)
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	4a1a      	ldr	r2, [pc, #104]	; (8000a44 <I2C_PeriClkCntrl+0xac>)
 80009da:	4293      	cmp	r3, r2
 80009dc:	d126      	bne.n	8000a2c <I2C_PeriClkCntrl+0x94>
			I2C2_CLK_EN();
 80009de:	4b17      	ldr	r3, [pc, #92]	; (8000a3c <I2C_PeriClkCntrl+0xa4>)
 80009e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009e2:	4a16      	ldr	r2, [pc, #88]	; (8000a3c <I2C_PeriClkCntrl+0xa4>)
 80009e4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80009e8:	6413      	str	r3, [r2, #64]	; 0x40
}
 80009ea:	e01f      	b.n	8000a2c <I2C_PeriClkCntrl+0x94>
		if(pI2Cx == I2C1)
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	4a12      	ldr	r2, [pc, #72]	; (8000a38 <I2C_PeriClkCntrl+0xa0>)
 80009f0:	4293      	cmp	r3, r2
 80009f2:	d106      	bne.n	8000a02 <I2C_PeriClkCntrl+0x6a>
			I2C1_CLK_DI();
 80009f4:	4b11      	ldr	r3, [pc, #68]	; (8000a3c <I2C_PeriClkCntrl+0xa4>)
 80009f6:	6a1b      	ldr	r3, [r3, #32]
 80009f8:	4a10      	ldr	r2, [pc, #64]	; (8000a3c <I2C_PeriClkCntrl+0xa4>)
 80009fa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80009fe:	6213      	str	r3, [r2, #32]
}
 8000a00:	e014      	b.n	8000a2c <I2C_PeriClkCntrl+0x94>
		else if(pI2Cx == I2C2)
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	4a0e      	ldr	r2, [pc, #56]	; (8000a40 <I2C_PeriClkCntrl+0xa8>)
 8000a06:	4293      	cmp	r3, r2
 8000a08:	d106      	bne.n	8000a18 <I2C_PeriClkCntrl+0x80>
			I2C2_CLK_DI();
 8000a0a:	4b0c      	ldr	r3, [pc, #48]	; (8000a3c <I2C_PeriClkCntrl+0xa4>)
 8000a0c:	6a1b      	ldr	r3, [r3, #32]
 8000a0e:	4a0b      	ldr	r2, [pc, #44]	; (8000a3c <I2C_PeriClkCntrl+0xa4>)
 8000a10:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000a14:	6213      	str	r3, [r2, #32]
}
 8000a16:	e009      	b.n	8000a2c <I2C_PeriClkCntrl+0x94>
		else if(pI2Cx == I2C3)
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	4a0a      	ldr	r2, [pc, #40]	; (8000a44 <I2C_PeriClkCntrl+0xac>)
 8000a1c:	4293      	cmp	r3, r2
 8000a1e:	d105      	bne.n	8000a2c <I2C_PeriClkCntrl+0x94>
			I2C3_CLK_DI();
 8000a20:	4b06      	ldr	r3, [pc, #24]	; (8000a3c <I2C_PeriClkCntrl+0xa4>)
 8000a22:	6a1b      	ldr	r3, [r3, #32]
 8000a24:	4a05      	ldr	r2, [pc, #20]	; (8000a3c <I2C_PeriClkCntrl+0xa4>)
 8000a26:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000a2a:	6213      	str	r3, [r2, #32]
}
 8000a2c:	bf00      	nop
 8000a2e:	370c      	adds	r7, #12
 8000a30:	46bd      	mov	sp, r7
 8000a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a36:	4770      	bx	lr
 8000a38:	40005400 	.word	0x40005400
 8000a3c:	40023800 	.word	0x40023800
 8000a40:	40005800 	.word	0x40005800
 8000a44:	40005c00 	.word	0x40005c00

08000a48 <I2C_Init>:
 *
 * @Note              - NULL

 */
void I2C_Init(I2C_Handle_t *pI2CHandle)				//INITIALIZES I2C PORT
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b086      	sub	sp, #24
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
	uint32_t tempreg = 0;
 8000a50:	2300      	movs	r3, #0
 8000a52:	613b      	str	r3, [r7, #16]

	//Enable the I2Cx peripheral clock
	I2C_PeriClkCntrl(pI2CHandle->pI2Cx , ENABLE);
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	2101      	movs	r1, #1
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	f7ff ff9c 	bl	8000998 <I2C_PeriClkCntrl>

	//ack control bit
	tempreg = 0;
 8000a60:	2300      	movs	r3, #0
 8000a62:	613b      	str	r3, [r7, #16]
	tempreg = (pI2CHandle->I2C_Config.I2C_ACKControl << 10);
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	799b      	ldrb	r3, [r3, #6]
 8000a68:	b2db      	uxtb	r3, r3
 8000a6a:	029b      	lsls	r3, r3, #10
 8000a6c:	613b      	str	r3, [r7, #16]
	pI2CHandle->pI2Cx->CR1 |= tempreg;
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	6819      	ldr	r1, [r3, #0]
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	693a      	ldr	r2, [r7, #16]
 8000a7a:	430a      	orrs	r2, r1
 8000a7c:	601a      	str	r2, [r3, #0]

	//prog the device own address
	tempreg = 0;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	613b      	str	r3, [r7, #16]
	tempreg = pI2CHandle->I2C_Config.I2C_DeviceAddress << 1;
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	795b      	ldrb	r3, [r3, #5]
 8000a86:	b2db      	uxtb	r3, r3
 8000a88:	005b      	lsls	r3, r3, #1
 8000a8a:	613b      	str	r3, [r7, #16]
	tempreg |= (0x1 << 14);
 8000a8c:	693b      	ldr	r3, [r7, #16]
 8000a8e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a92:	613b      	str	r3, [r7, #16]
	pI2CHandle->pI2Cx->OAR1 |= tempreg;
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	6899      	ldr	r1, [r3, #8]
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	693a      	ldr	r2, [r7, #16]
 8000aa0:	430a      	orrs	r2, r1
 8000aa2:	609a      	str	r2, [r3, #8]

	//config the FREQ field of CR2
	tempreg = 0;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	613b      	str	r3, [r7, #16]
	tempreg = RCC_GetClkVal()/1000000U;
 8000aa8:	f7ff ff2a 	bl	8000900 <RCC_GetClkVal>
 8000aac:	4602      	mov	r2, r0
 8000aae:	4b30      	ldr	r3, [pc, #192]	; (8000b70 <I2C_Init+0x128>)
 8000ab0:	fba3 2302 	umull	r2, r3, r3, r2
 8000ab4:	0c9b      	lsrs	r3, r3, #18
 8000ab6:	613b      	str	r3, [r7, #16]
	pI2CHandle->pI2Cx->CR2 |= (tempreg & ( 0x3F));
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	6859      	ldr	r1, [r3, #4]
 8000abe:	693b      	ldr	r3, [r7, #16]
 8000ac0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	430a      	orrs	r2, r1
 8000aca:	605a      	str	r2, [r3, #4]
 *
 *
 */

	//CCR Calculations
	uint16_t ccr_value = 0;
 8000acc:	2300      	movs	r3, #0
 8000ace:	81fb      	strh	r3, [r7, #14]
	tempreg = 0;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	613b      	str	r3, [r7, #16]

	if(pI2CHandle->I2C_Config.I2C_SCLSpeed <= I2C_SCL_SPEED_SM)
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	791b      	ldrb	r3, [r3, #4]
	{
		ccr_value =  (RCC_GetClkVal() / (2 * pI2CHandle->I2C_Config.I2C_SCLSpeed));
 8000ad8:	f7ff ff12 	bl	8000900 <RCC_GetClkVal>
 8000adc:	4602      	mov	r2, r0
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	791b      	ldrb	r3, [r3, #4]
 8000ae2:	b2db      	uxtb	r3, r3
 8000ae4:	005b      	lsls	r3, r3, #1
 8000ae6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000aea:	81fb      	strh	r3, [r7, #14]
		tempreg = (ccr_value & (0xFFF));
 8000aec:	89fb      	ldrh	r3, [r7, #14]
 8000aee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000af2:	613b      	str	r3, [r7, #16]

		pI2CHandle->pI2Cx->CCR |= (pI2CHandle->I2C_Config.I2C_FMDutyCycle << 14 );
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	79db      	ldrb	r3, [r3, #7]
 8000af8:	b2db      	uxtb	r3, r3
 8000afa:	0399      	lsls	r1, r3, #14
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	69da      	ldr	r2, [r3, #28]
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	430a      	orrs	r2, r1
 8000b08:	61da      	str	r2, [r3, #28]
		pI2CHandle->pI2Cx->CCR &= ~(0x1 << 15);
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	69da      	ldr	r2, [r3, #28]
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000b18:	61da      	str	r2, [r3, #28]
		pI2CHandle->pI2Cx->CCR |= (tempreg);
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	69d9      	ldr	r1, [r3, #28]
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	693a      	ldr	r2, [r7, #16]
 8000b26:	430a      	orrs	r2, r1
 8000b28:	61da      	str	r2, [r3, #28]
			pI2CHandle->pI2Cx->CCR |= (tempreg);

		}
	}

	uint32_t temp = 0;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	617b      	str	r3, [r7, #20]

	//TRISE Configuration
	if(pI2CHandle->I2C_Config.I2C_SCLSpeed <= I2C_SCL_SPEED_SM)
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	791b      	ldrb	r3, [r3, #4]
	{
		temp = ((( RCC_GetClkVal()*1 )/1000000U ) + 1);
 8000b32:	f7ff fee5 	bl	8000900 <RCC_GetClkVal>
 8000b36:	4602      	mov	r2, r0
 8000b38:	4b0d      	ldr	r3, [pc, #52]	; (8000b70 <I2C_Init+0x128>)
 8000b3a:	fba3 2302 	umull	r2, r3, r3, r2
 8000b3e:	0c9b      	lsrs	r3, r3, #18
 8000b40:	3301      	adds	r3, #1
 8000b42:	617b      	str	r3, [r7, #20]
	}else
	{
		temp = ((( RCC_GetClkVal()*300 )/1000000000U ) + 1);
	}

	pI2CHandle->pI2Cx->TRISE |= ((temp) & (0x3F));
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	6a19      	ldr	r1, [r3, #32]
 8000b4a:	697b      	ldr	r3, [r7, #20]
 8000b4c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	430a      	orrs	r2, r1
 8000b56:	621a      	str	r2, [r3, #32]
	(void)temp;

	pI2CHandle->pI2Cx->CR1 |= (0x1 << I2C_CR1_PE);
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	681a      	ldr	r2, [r3, #0]
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	f042 0201 	orr.w	r2, r2, #1
 8000b66:	601a      	str	r2, [r3, #0]
}
 8000b68:	bf00      	nop
 8000b6a:	3718      	adds	r7, #24
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bd80      	pop	{r7, pc}
 8000b70:	431bde83 	.word	0x431bde83

08000b74 <I2C_MasterSendData>:
 *
 * @Note              - NULL

 */
void I2C_MasterSendData(I2C_Handle_t *pI2CHandle, uint8_t *pTXBuffer, uint32_t Len, uint8_t SlaveAddr)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b086      	sub	sp, #24
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	60f8      	str	r0, [r7, #12]
 8000b7c:	60b9      	str	r1, [r7, #8]
 8000b7e:	607a      	str	r2, [r7, #4]
 8000b80:	70fb      	strb	r3, [r7, #3]

	//1. 	Generate the start condition
	I2C_GenerateStartCondition(pI2CHandle->pI2Cx);
 8000b82:	68fb      	ldr	r3, [r7, #12]
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	4618      	mov	r0, r3
 8000b88:	f7ff fe59 	bl	800083e <I2C_GenerateStartCondition>

	//2.  Confirm that start Generation is completed by checking the SB flag in the SR1
	// Note: Until SB is cleared SCL will be stretched (pulled to LOW)
	while( !(I2C_GetFagStatus(pI2CHandle->pI2Cx, I2C_FLAG_SR1_SB)) );						//Be in while loop until SBin SR is set
 8000b8c:	bf00      	nop
 8000b8e:	68fb      	ldr	r3, [r7, #12]
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	2100      	movs	r1, #0
 8000b94:	4618      	mov	r0, r3
 8000b96:	f7ff fe9c 	bl	80008d2 <I2C_GetFagStatus>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d0f6      	beq.n	8000b8e <I2C_MasterSendData+0x1a>

	//3.   Send the address of the slave with R/nW bit set to w(0) (total 8 bits)
	I2C_ExecuteAddrPhase(pI2CHandle->pI2Cx, SlaveAddr, WRITE);
 8000ba0:	68fb      	ldr	r3, [r7, #12]
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	78f9      	ldrb	r1, [r7, #3]
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	4618      	mov	r0, r3
 8000baa:	f7ff fe58 	bl	800085e <I2C_ExecuteAddrPhase>

	//4.   Confirm that address phase is completed by checking the ADDR flag in the SR1
	while( !(pI2CHandle->pI2Cx->SR1 & (0x1 << I2C_SR1_ADDR)) );				//wait until ADDR bit of SR1 is set indicating end of address transmission
 8000bae:	bf00      	nop
 8000bb0:	68fb      	ldr	r3, [r7, #12]
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	695b      	ldr	r3, [r3, #20]
 8000bb6:	f003 0302 	and.w	r3, r3, #2
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d0f8      	beq.n	8000bb0 <I2C_MasterSendData+0x3c>

	//5.	Clear the ADDR flag according to its s/w response
	//Note:	Until the ADDR is cleared SCL will be stretched(pulled to LOW)
	uint32_t temp;

	temp = pI2CHandle->pI2Cx->SR1;
 8000bbe:	68fb      	ldr	r3, [r7, #12]
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	695b      	ldr	r3, [r3, #20]
 8000bc4:	617b      	str	r3, [r7, #20]
	temp = pI2CHandle->pI2Cx->SR2;
 8000bc6:	68fb      	ldr	r3, [r7, #12]
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	699b      	ldr	r3, [r3, #24]
 8000bcc:	617b      	str	r3, [r7, #20]

	//6.	Send the data until Len becomes 0
	while(Len > 0)
 8000bce:	e014      	b.n	8000bfa <I2C_MasterSendData+0x86>
	{
		while( !(I2C_GetFagStatus(pI2CHandle->pI2Cx, I2C_FLAG_SR1_TxE)) );
 8000bd0:	bf00      	nop
 8000bd2:	68fb      	ldr	r3, [r7, #12]
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	2107      	movs	r1, #7
 8000bd8:	4618      	mov	r0, r3
 8000bda:	f7ff fe7a 	bl	80008d2 <I2C_GetFagStatus>
 8000bde:	4603      	mov	r3, r0
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d0f6      	beq.n	8000bd2 <I2C_MasterSendData+0x5e>

		pI2CHandle->pI2Cx->DR  =  *(pTXBuffer);
 8000be4:	68bb      	ldr	r3, [r7, #8]
 8000be6:	781a      	ldrb	r2, [r3, #0]
 8000be8:	68fb      	ldr	r3, [r7, #12]
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	611a      	str	r2, [r3, #16]
		pTXBuffer++;
 8000bee:	68bb      	ldr	r3, [r7, #8]
 8000bf0:	3301      	adds	r3, #1
 8000bf2:	60bb      	str	r3, [r7, #8]
		Len--;
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	3b01      	subs	r3, #1
 8000bf8:	607b      	str	r3, [r7, #4]
	while(Len > 0)
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d1e7      	bne.n	8000bd0 <I2C_MasterSendData+0x5c>
	}

	//7.	When Len becomes zero wait for TXE = 1 && BTF = 1 before generating the STOP condition
	//Note: 	TXE=1, BTF=1 , means that both SR && DR are empty && nxt transmission should begin
	//				when BTF=1 SCL will be stretched (pulled to LOW)
	while(  !( (pI2CHandle->pI2Cx->SR1 >> I2C_SR1_TxE  &  0x1) && (pI2CHandle->pI2Cx->SR1 >> I2C_SR1_BTF & 0x1)  )  );
 8000c00:	bf00      	nop
 8000c02:	68fb      	ldr	r3, [r7, #12]
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	695b      	ldr	r3, [r3, #20]
 8000c08:	09db      	lsrs	r3, r3, #7
 8000c0a:	f003 0301 	and.w	r3, r3, #1
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d0f7      	beq.n	8000c02 <I2C_MasterSendData+0x8e>
 8000c12:	68fb      	ldr	r3, [r7, #12]
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	695b      	ldr	r3, [r3, #20]
 8000c18:	089b      	lsrs	r3, r3, #2
 8000c1a:	f003 0301 	and.w	r3, r3, #1
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d0ef      	beq.n	8000c02 <I2C_MasterSendData+0x8e>


	//8.	Generate STOP condition && master need not to wait for the completion of STOP condition.
	//Note:	generating STOP, automatically clears the BTF
	pI2CHandle->pI2Cx->CR1 |= (0x1 << I2C_CR1_STOP);
 8000c22:	68fb      	ldr	r3, [r7, #12]
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	681a      	ldr	r2, [r3, #0]
 8000c28:	68fb      	ldr	r3, [r7, #12]
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000c30:	601a      	str	r2, [r3, #0]

	(void)temp;
	I2C_AppEventCallback(pI2CHandle, I2C_EV_Tx_COMPLETE);
 8000c32:	2100      	movs	r1, #0
 8000c34:	68f8      	ldr	r0, [r7, #12]
 8000c36:	f000 f8ae 	bl	8000d96 <I2C_AppEventCallback>
}
 8000c3a:	bf00      	nop
 8000c3c:	3718      	adds	r7, #24
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bd80      	pop	{r7, pc}

08000c42 <I2C_MasterReceiveData>:
 *
 * @Note              - NULL

 */
void I2C_MasterReceiveData(I2C_Handle_t *pI2CHandle, uint8_t *pRXBuffer, uint32_t Len, uint8_t SlaveAddr)
{
 8000c42:	b580      	push	{r7, lr}
 8000c44:	b086      	sub	sp, #24
 8000c46:	af00      	add	r7, sp, #0
 8000c48:	60f8      	str	r0, [r7, #12]
 8000c4a:	60b9      	str	r1, [r7, #8]
 8000c4c:	607a      	str	r2, [r7, #4]
 8000c4e:	70fb      	strb	r3, [r7, #3]
	uint32_t tempreg;

	//1. Generate the START condition
	pI2CHandle->pI2Cx->CR1 |= (0x1 << I2C_CR1_START);
 8000c50:	68fb      	ldr	r3, [r7, #12]
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	681a      	ldr	r2, [r3, #0]
 8000c56:	68fb      	ldr	r3, [r7, #12]
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000c5e:	601a      	str	r2, [r3, #0]

	//2. COnfirm that start generation is completed by checking the SB flag in the SR1
	//Note: Unitl SB is cleared SCl will be stretched (Pulled Low)
	while( !(I2C_GetFagStatus(pI2CHandle->pI2Cx, I2C_SR1_SB)) );
 8000c60:	bf00      	nop
 8000c62:	68fb      	ldr	r3, [r7, #12]
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	2100      	movs	r1, #0
 8000c68:	4618      	mov	r0, r3
 8000c6a:	f7ff fe32 	bl	80008d2 <I2C_GetFagStatus>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d0f6      	beq.n	8000c62 <I2C_MasterReceiveData+0x20>

	//3. Send the address of the slave with R/nW  bit set to R(1) (total 8 bits)
	I2C_ExecuteAddrPhase(pI2CHandle->pI2Cx, SlaveAddr, READ);
 8000c74:	68fb      	ldr	r3, [r7, #12]
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	78f9      	ldrb	r1, [r7, #3]
 8000c7a:	2201      	movs	r2, #1
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	f7ff fdee 	bl	800085e <I2C_ExecuteAddrPhase>

	//4. Wait until addr phase is completed by checking the ADDR flag in the SR1
	while( !(I2C_GetFagStatus(pI2CHandle->pI2Cx, I2C_SR1_ADDR)) );
 8000c82:	bf00      	nop
 8000c84:	68fb      	ldr	r3, [r7, #12]
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	2101      	movs	r1, #1
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	f7ff fe21 	bl	80008d2 <I2C_GetFagStatus>
 8000c90:	4603      	mov	r3, r0
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d0f6      	beq.n	8000c84 <I2C_MasterReceiveData+0x42>

	//Procedure to read only 1 byte of data
	if(Len == 1)
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	2b01      	cmp	r3, #1
 8000c9a:	d130      	bne.n	8000cfe <I2C_MasterReceiveData+0xbc>
	{
		// Disable Acking
		pI2CHandle->pI2Cx->CR1 &= ~(0x1 << I2C_CR1_ACK);
 8000c9c:	68fb      	ldr	r3, [r7, #12]
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	681a      	ldr	r2, [r3, #0]
 8000ca2:	68fb      	ldr	r3, [r7, #12]
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000caa:	601a      	str	r2, [r3, #0]

		// Clear the ADDR flag
		tempreg = pI2CHandle->pI2Cx->SR1;
 8000cac:	68fb      	ldr	r3, [r7, #12]
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	695b      	ldr	r3, [r3, #20]
 8000cb2:	613b      	str	r3, [r7, #16]
		tempreg = pI2CHandle->pI2Cx->SR2;
 8000cb4:	68fb      	ldr	r3, [r7, #12]
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	699b      	ldr	r3, [r3, #24]
 8000cba:	613b      	str	r3, [r7, #16]

		// Wait until RXNE becomes 1
		while( !(I2C_GetFagStatus(pI2CHandle->pI2Cx, I2C_SR1_RxNE)) );
 8000cbc:	bf00      	nop
 8000cbe:	68fb      	ldr	r3, [r7, #12]
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	2106      	movs	r1, #6
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	f7ff fe04 	bl	80008d2 <I2C_GetFagStatus>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d0f6      	beq.n	8000cbe <I2C_MasterReceiveData+0x7c>

		//Generate STOP condition
		pI2CHandle->pI2Cx->CR1 |= (0x1 << I2C_CR1_STOP);
 8000cd0:	68fb      	ldr	r3, [r7, #12]
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	681a      	ldr	r2, [r3, #0]
 8000cd6:	68fb      	ldr	r3, [r7, #12]
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000cde:	601a      	str	r2, [r3, #0]

		// Read data in to buffer
		*pRXBuffer |= pI2CHandle->pI2Cx->DR;
 8000ce0:	68fb      	ldr	r3, [r7, #12]
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	6919      	ldr	r1, [r3, #16]
 8000ce6:	68bb      	ldr	r3, [r7, #8]
 8000ce8:	781a      	ldrb	r2, [r3, #0]
 8000cea:	b2cb      	uxtb	r3, r1
 8000cec:	4313      	orrs	r3, r2
 8000cee:	b2da      	uxtb	r2, r3
 8000cf0:	68bb      	ldr	r3, [r7, #8]
 8000cf2:	701a      	strb	r2, [r3, #0]

		pI2CHandle->RxSize = *pRXBuffer;
 8000cf4:	68bb      	ldr	r3, [r7, #8]
 8000cf6:	781b      	ldrb	r3, [r3, #0]
 8000cf8:	461a      	mov	r2, r3
 8000cfa:	68fb      	ldr	r3, [r7, #12]
 8000cfc:	61da      	str	r2, [r3, #28]
	}

	//procedure to READ data from Slave when Len > 1
	if(Len > 1)
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	2b01      	cmp	r3, #1
 8000d02:	d933      	bls.n	8000d6c <I2C_MasterReceiveData+0x12a>
	{
		//Clear the ADDR flag
		tempreg = pI2CHandle->pI2Cx->SR2;
 8000d04:	68fb      	ldr	r3, [r7, #12]
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	699b      	ldr	r3, [r3, #24]
 8000d0a:	613b      	str	r3, [r7, #16]

		//Read the data until Len becomes Zero
		for(uint32_t i = Len+1; i > 1; i--)
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	3301      	adds	r3, #1
 8000d10:	617b      	str	r3, [r7, #20]
 8000d12:	e028      	b.n	8000d66 <I2C_MasterReceiveData+0x124>
		{
			if(i == 2)
 8000d14:	697b      	ldr	r3, [r7, #20]
 8000d16:	2b02      	cmp	r3, #2
 8000d18:	d10f      	bne.n	8000d3a <I2C_MasterReceiveData+0xf8>
			{
				//Clear the ACK bit
				pI2CHandle->pI2Cx->CR1 &= ~(0x1 << I2C_CR1_ACK);
 8000d1a:	68fb      	ldr	r3, [r7, #12]
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	681a      	ldr	r2, [r3, #0]
 8000d20:	68fb      	ldr	r3, [r7, #12]
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000d28:	601a      	str	r2, [r3, #0]

				//Generate STOP condtion
				pI2CHandle->pI2Cx->CR1 |= (0x1 << I2C_CR1_STOP);
 8000d2a:	68fb      	ldr	r3, [r7, #12]
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	681a      	ldr	r2, [r3, #0]
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000d38:	601a      	str	r2, [r3, #0]
			}

			//Wait until RXNE becomes 1
			while( !(I2C_GetFagStatus(pI2CHandle->pI2Cx, I2C_SR1_RxNE)) );
 8000d3a:	bf00      	nop
 8000d3c:	68fb      	ldr	r3, [r7, #12]
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	2106      	movs	r1, #6
 8000d42:	4618      	mov	r0, r3
 8000d44:	f7ff fdc5 	bl	80008d2 <I2C_GetFagStatus>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d0f6      	beq.n	8000d3c <I2C_MasterReceiveData+0xfa>

			//Read the data from data reg in to buffer
			*pRXBuffer = pI2CHandle->pI2Cx->DR;
 8000d4e:	68fb      	ldr	r3, [r7, #12]
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	691b      	ldr	r3, [r3, #16]
 8000d54:	b2da      	uxtb	r2, r3
 8000d56:	68bb      	ldr	r3, [r7, #8]
 8000d58:	701a      	strb	r2, [r3, #0]

			//Increment the buffer Addr
			pRXBuffer++;
 8000d5a:	68bb      	ldr	r3, [r7, #8]
 8000d5c:	3301      	adds	r3, #1
 8000d5e:	60bb      	str	r3, [r7, #8]
		for(uint32_t i = Len+1; i > 1; i--)
 8000d60:	697b      	ldr	r3, [r7, #20]
 8000d62:	3b01      	subs	r3, #1
 8000d64:	617b      	str	r3, [r7, #20]
 8000d66:	697b      	ldr	r3, [r7, #20]
 8000d68:	2b01      	cmp	r3, #1
 8000d6a:	d8d3      	bhi.n	8000d14 <I2C_MasterReceiveData+0xd2>
		}
	}

	//Re-enable ACKing
	if(pI2CHandle->I2C_Config.I2C_ACKControl == I2C_ACK_EN)
 8000d6c:	68fb      	ldr	r3, [r7, #12]
 8000d6e:	799b      	ldrb	r3, [r3, #6]
 8000d70:	b2db      	uxtb	r3, r3
 8000d72:	2b01      	cmp	r3, #1
 8000d74:	d107      	bne.n	8000d86 <I2C_MasterReceiveData+0x144>
	{
		pI2CHandle->pI2Cx->CR1 |= (0x1 << I2C_CR1_ACK);
 8000d76:	68fb      	ldr	r3, [r7, #12]
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	681a      	ldr	r2, [r3, #0]
 8000d7c:	68fb      	ldr	r3, [r7, #12]
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000d84:	601a      	str	r2, [r3, #0]
	}

	(void)tempreg;

	I2C_AppEventCallback(pI2CHandle, I2C_EV_Rx_COMPLETE);
 8000d86:	2101      	movs	r1, #1
 8000d88:	68f8      	ldr	r0, [r7, #12]
 8000d8a:	f000 f804 	bl	8000d96 <I2C_AppEventCallback>
}
 8000d8e:	bf00      	nop
 8000d90:	3718      	adds	r7, #24
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}

08000d96 <I2C_AppEventCallback>:
 *
 * @Note              - DO NOT REMOVE THIS FROM HERE

 */
__weak void I2C_AppEventCallback(I2C_Handle_t *pI2CHandle, uint8_t I2C_Event)
{
 8000d96:	b480      	push	{r7}
 8000d98:	b083      	sub	sp, #12
 8000d9a:	af00      	add	r7, sp, #0
 8000d9c:	6078      	str	r0, [r7, #4]
 8000d9e:	460b      	mov	r3, r1
 8000da0:	70fb      	strb	r3, [r7, #3]

}
 8000da2:	bf00      	nop
 8000da4:	370c      	adds	r7, #12
 8000da6:	46bd      	mov	sp, r7
 8000da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dac:	4770      	bx	lr
	...

08000db0 <delay>:
#include"stm32f446xx_i2c.h"
#include"string.h"
#include"stdint.h"

void delay()
{
 8000db0:	b480      	push	{r7}
 8000db2:	b083      	sub	sp, #12
 8000db4:	af00      	add	r7, sp, #0
	for(uint32_t i=0; i<300000; i++);
 8000db6:	2300      	movs	r3, #0
 8000db8:	607b      	str	r3, [r7, #4]
 8000dba:	e002      	b.n	8000dc2 <delay+0x12>
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	3301      	adds	r3, #1
 8000dc0:	607b      	str	r3, [r7, #4]
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	4a04      	ldr	r2, [pc, #16]	; (8000dd8 <delay+0x28>)
 8000dc6:	4293      	cmp	r3, r2
 8000dc8:	d9f8      	bls.n	8000dbc <delay+0xc>
}
 8000dca:	bf00      	nop
 8000dcc:	370c      	adds	r7, #12
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd4:	4770      	bx	lr
 8000dd6:	bf00      	nop
 8000dd8:	000493df 	.word	0x000493df

08000ddc <GPIO_ButtonConfig>:

void GPIO_ButtonConfig()
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b086      	sub	sp, #24
 8000de0:	af00      	add	r7, sp, #0
	GPIO_handle_t led, button;

	led.pGPIOx = GPIOA;
 8000de2:	4b17      	ldr	r3, [pc, #92]	; (8000e40 <GPIO_ButtonConfig+0x64>)
 8000de4:	60fb      	str	r3, [r7, #12]
	led.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_5;
 8000de6:	2305      	movs	r3, #5
 8000de8:	743b      	strb	r3, [r7, #16]
	led.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 8000dea:	2301      	movs	r3, #1
 8000dec:	747b      	strb	r3, [r7, #17]
	led.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 8000dee:	2300      	movs	r3, #0
 8000df0:	753b      	strb	r3, [r7, #20]
	led.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 8000df2:	2300      	movs	r3, #0
 8000df4:	74fb      	strb	r3, [r7, #19]
	led.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_LOW;
 8000df6:	2300      	movs	r3, #0
 8000df8:	74bb      	strb	r3, [r7, #18]

	GPIOA_CLK_EN();
 8000dfa:	4b12      	ldr	r3, [pc, #72]	; (8000e44 <GPIO_ButtonConfig+0x68>)
 8000dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dfe:	4a11      	ldr	r2, [pc, #68]	; (8000e44 <GPIO_ButtonConfig+0x68>)
 8000e00:	f043 0301 	orr.w	r3, r3, #1
 8000e04:	6313      	str	r3, [r2, #48]	; 0x30
	GPIO_Init(&led);
 8000e06:	f107 030c 	add.w	r3, r7, #12
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	f7ff fb22 	bl	8000454 <GPIO_Init>

	button.pGPIOx = GPIOC;
 8000e10:	4b0d      	ldr	r3, [pc, #52]	; (8000e48 <GPIO_ButtonConfig+0x6c>)
 8000e12:	603b      	str	r3, [r7, #0]
	button.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_12;
 8000e14:	230c      	movs	r3, #12
 8000e16:	713b      	strb	r3, [r7, #4]
	button.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IN;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	717b      	strb	r3, [r7, #5]
	button.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PIN_PD;
 8000e1c:	2302      	movs	r3, #2
 8000e1e:	71fb      	strb	r3, [r7, #7]
	button.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_LOW;
 8000e20:	2300      	movs	r3, #0
 8000e22:	71bb      	strb	r3, [r7, #6]

	GPIOC_CLK_EN();
 8000e24:	4b07      	ldr	r3, [pc, #28]	; (8000e44 <GPIO_ButtonConfig+0x68>)
 8000e26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e28:	4a06      	ldr	r2, [pc, #24]	; (8000e44 <GPIO_ButtonConfig+0x68>)
 8000e2a:	f043 0304 	orr.w	r3, r3, #4
 8000e2e:	6313      	str	r3, [r2, #48]	; 0x30
	GPIO_Init(&button);
 8000e30:	463b      	mov	r3, r7
 8000e32:	4618      	mov	r0, r3
 8000e34:	f7ff fb0e 	bl	8000454 <GPIO_Init>
}
 8000e38:	bf00      	nop
 8000e3a:	3718      	adds	r7, #24
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	bd80      	pop	{r7, pc}
 8000e40:	40020000 	.word	0x40020000
 8000e44:	40023800 	.word	0x40023800
 8000e48:	40020800 	.word	0x40020800

08000e4c <I2C1_GPIOInits>:
//global I2C handle variable
I2C_Handle_t I2C1Handle;


void I2C1_GPIOInits()
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b084      	sub	sp, #16
 8000e50:	af00      	add	r7, sp, #0
	//Initialize the GPIO pins to be used with I2C peripheral
	GPIO_handle_t 	I2CPins;

	I2CPins.pGPIOx = GPIOB;
 8000e52:	4b0e      	ldr	r3, [pc, #56]	; (8000e8c <I2C1_GPIOInits+0x40>)
 8000e54:	607b      	str	r3, [r7, #4]
	I2CPins.GPIO_PinConfig.GPIO_PinMode = GPIO_ALT_FN;
 8000e56:	2302      	movs	r3, #2
 8000e58:	727b      	strb	r3, [r7, #9]
	I2CPins.GPIO_PinConfig.GPIO_PinAltFunMode = 4;
 8000e5a:	2304      	movs	r3, #4
 8000e5c:	737b      	strb	r3, [r7, #13]
	I2CPins.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_LOW;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	72bb      	strb	r3, [r7, #10]
	I2CPins.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_OD;
 8000e62:	2301      	movs	r3, #1
 8000e64:	733b      	strb	r3, [r7, #12]
	I2CPins.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PIN_PU;			//Always keep this pulled up
 8000e66:	2301      	movs	r3, #1
 8000e68:	72fb      	strb	r3, [r7, #11]

	//SDA
	I2CPins.GPIO_PinConfig.GPIO_PinNumber  =  SDA_PIN;
 8000e6a:	2303      	movs	r3, #3
 8000e6c:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&I2CPins);
 8000e6e:	1d3b      	adds	r3, r7, #4
 8000e70:	4618      	mov	r0, r3
 8000e72:	f7ff faef 	bl	8000454 <GPIO_Init>

	//SCL
	I2CPins.GPIO_PinConfig.GPIO_PinNumber  =  SCL_PIN;
 8000e76:	230a      	movs	r3, #10
 8000e78:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&I2CPins);
 8000e7a:	1d3b      	adds	r3, r7, #4
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	f7ff fae9 	bl	8000454 <GPIO_Init>



}
 8000e82:	bf00      	nop
 8000e84:	3710      	adds	r7, #16
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	40020400 	.word	0x40020400

08000e90 <I2C1_Inits>:

void I2C1_Inits()
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	af00      	add	r7, sp, #0

	//Initiliaze the I2C peripheral
	I2C1Handle.pI2Cx  = I2C2;
 8000e94:	4b09      	ldr	r3, [pc, #36]	; (8000ebc <I2C1_Inits+0x2c>)
 8000e96:	4a0a      	ldr	r2, [pc, #40]	; (8000ec0 <I2C1_Inits+0x30>)
 8000e98:	601a      	str	r2, [r3, #0]
	I2C1Handle.I2C_Config.I2C_ACKControl = I2C_ACK_EN;
 8000e9a:	4b08      	ldr	r3, [pc, #32]	; (8000ebc <I2C1_Inits+0x2c>)
 8000e9c:	2201      	movs	r2, #1
 8000e9e:	719a      	strb	r2, [r3, #6]
	I2C1Handle.I2C_Config.I2C_DeviceAddress  =  MASTER_ADDR;
 8000ea0:	4b06      	ldr	r3, [pc, #24]	; (8000ebc <I2C1_Inits+0x2c>)
 8000ea2:	2238      	movs	r2, #56	; 0x38
 8000ea4:	715a      	strb	r2, [r3, #5]
	I2C1Handle.I2C_Config.I2C_FMDutyCycle = I2C_FM_DUTY_2;
 8000ea6:	4b05      	ldr	r3, [pc, #20]	; (8000ebc <I2C1_Inits+0x2c>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	71da      	strb	r2, [r3, #7]
	I2C1Handle.I2C_Config.I2C_SCLSpeed = I2C_SCL_SPEED_FM4K;
 8000eac:	4b03      	ldr	r3, [pc, #12]	; (8000ebc <I2C1_Inits+0x2c>)
 8000eae:	2280      	movs	r2, #128	; 0x80
 8000eb0:	711a      	strb	r2, [r3, #4]

	I2C_Init(&I2C1Handle);
 8000eb2:	4802      	ldr	r0, [pc, #8]	; (8000ebc <I2C1_Inits+0x2c>)
 8000eb4:	f7ff fdc8 	bl	8000a48 <I2C_Init>
}
 8000eb8:	bf00      	nop
 8000eba:	bd80      	pop	{r7, pc}
 8000ebc:	200000bc 	.word	0x200000bc
 8000ec0:	40005800 	.word	0x40005800

08000ec4 <main>:

int main()
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b082      	sub	sp, #8
 8000ec8:	af00      	add	r7, sp, #0

	//GPIO Button Init
	GPIO_ButtonConfig();
 8000eca:	f7ff ff87 	bl	8000ddc <GPIO_ButtonConfig>

	//I2C pin initsI2C1Handle
	I2C1_GPIOInits();
 8000ece:	f7ff ffbd 	bl	8000e4c <I2C1_GPIOInits>

	//I2C peripheral config
	I2C1_Inits();
 8000ed2:	f7ff ffdd 	bl	8000e90 <I2C1_Inits>

	//Enable the Peripheral
	I2C_Enable( I2C2 , ENABLE);
 8000ed6:	2101      	movs	r1, #1
 8000ed8:	4855      	ldr	r0, [pc, #340]	; (8001030 <main+0x16c>)
 8000eda:	f7ff fcde 	bl	800089a <I2C_Enable>

	printf("%s", "Hellos\n\r");
 8000ede:	4955      	ldr	r1, [pc, #340]	; (8001034 <main+0x170>)
 8000ee0:	4855      	ldr	r0, [pc, #340]	; (8001038 <main+0x174>)
 8000ee2:	f000 f9db 	bl	800129c <iprintf>

	uint8_t data[3] = {0,0,0};
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	703b      	strb	r3, [r7, #0]
 8000eea:	2300      	movs	r3, #0
 8000eec:	707b      	strb	r3, [r7, #1]
 8000eee:	2300      	movs	r3, #0
 8000ef0:	70bb      	strb	r3, [r7, #2]
	uint16_t full_data = 0;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	80fb      	strh	r3, [r7, #6]

	while(1)
	{
		if( GPIO_ReadIPin(GPIOC, GPIO_PIN_12) == GPIO_PIN_SET)
 8000ef6:	210c      	movs	r1, #12
 8000ef8:	4850      	ldr	r0, [pc, #320]	; (800103c <main+0x178>)
 8000efa:	f7ff fc75 	bl	80007e8 <GPIO_ReadIPin>
 8000efe:	4603      	mov	r3, r0
 8000f00:	2b01      	cmp	r3, #1
 8000f02:	d1f8      	bne.n	8000ef6 <main+0x32>
		{//Send data
			delay();
 8000f04:	f7ff ff54 	bl	8000db0 <delay>

			data[0] = 0x75;
 8000f08:	2375      	movs	r3, #117	; 0x75
 8000f0a:	703b      	strb	r3, [r7, #0]
			I2C_MasterSendData(&I2C1Handle, &data[0], 1, MPU_ADDR);
 8000f0c:	4639      	mov	r1, r7
 8000f0e:	2368      	movs	r3, #104	; 0x68
 8000f10:	2201      	movs	r2, #1
 8000f12:	484b      	ldr	r0, [pc, #300]	; (8001040 <main+0x17c>)
 8000f14:	f7ff fe2e 	bl	8000b74 <I2C_MasterSendData>
			I2C_MasterReceiveData(&I2C1Handle, &data[0], 1, MPU_ADDR);
 8000f18:	4639      	mov	r1, r7
 8000f1a:	2368      	movs	r3, #104	; 0x68
 8000f1c:	2201      	movs	r2, #1
 8000f1e:	4848      	ldr	r0, [pc, #288]	; (8001040 <main+0x17c>)
 8000f20:	f7ff fe8f 	bl	8000c42 <I2C_MasterReceiveData>

			data[0] = 0x68;
 8000f24:	2368      	movs	r3, #104	; 0x68
 8000f26:	703b      	strb	r3, [r7, #0]
			data[1] = 0x1;
 8000f28:	2301      	movs	r3, #1
 8000f2a:	707b      	strb	r3, [r7, #1]
			I2C_MasterSendData(&I2C1Handle, data, 2, MPU_ADDR);
 8000f2c:	4639      	mov	r1, r7
 8000f2e:	2368      	movs	r3, #104	; 0x68
 8000f30:	2202      	movs	r2, #2
 8000f32:	4843      	ldr	r0, [pc, #268]	; (8001040 <main+0x17c>)
 8000f34:	f7ff fe1e 	bl	8000b74 <I2C_MasterSendData>


			data[0] = 0x6B;
 8000f38:	236b      	movs	r3, #107	; 0x6b
 8000f3a:	703b      	strb	r3, [r7, #0]
			data[1] = 0x0;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	707b      	strb	r3, [r7, #1]
			I2C_MasterSendData(&I2C1Handle, data, 2, MPU_ADDR);
 8000f40:	4639      	mov	r1, r7
 8000f42:	2368      	movs	r3, #104	; 0x68
 8000f44:	2202      	movs	r2, #2
 8000f46:	483e      	ldr	r0, [pc, #248]	; (8001040 <main+0x17c>)
 8000f48:	f7ff fe14 	bl	8000b74 <I2C_MasterSendData>

#define ENABLE_PRINT

			data[0] = 0x1C;		//Accelerometer Config set AFS
 8000f4c:	231c      	movs	r3, #28
 8000f4e:	703b      	strb	r3, [r7, #0]
			data[1] = (0x3 << 3);
 8000f50:	2318      	movs	r3, #24
 8000f52:	707b      	strb	r3, [r7, #1]
			I2C_MasterSendData( &I2C1Handle, data, 2, MPU_ADDR);
 8000f54:	4639      	mov	r1, r7
 8000f56:	2368      	movs	r3, #104	; 0x68
 8000f58:	2202      	movs	r2, #2
 8000f5a:	4839      	ldr	r0, [pc, #228]	; (8001040 <main+0x17c>)
 8000f5c:	f7ff fe0a 	bl	8000b74 <I2C_MasterSendData>

			/*
			 * Start Reading Accelerometer sensor data
			 */
			data[0] = 0x3B; //XOUT_H
 8000f60:	233b      	movs	r3, #59	; 0x3b
 8000f62:	703b      	strb	r3, [r7, #0]
			I2C_MasterSendData( &I2C1Handle, &data[0], 1, MPU_ADDR);
 8000f64:	4639      	mov	r1, r7
 8000f66:	2368      	movs	r3, #104	; 0x68
 8000f68:	2201      	movs	r2, #1
 8000f6a:	4835      	ldr	r0, [pc, #212]	; (8001040 <main+0x17c>)
 8000f6c:	f7ff fe02 	bl	8000b74 <I2C_MasterSendData>
			I2C_MasterReceiveData(&I2C1Handle, &data[0], 1, MPU_ADDR);
 8000f70:	4639      	mov	r1, r7
 8000f72:	2368      	movs	r3, #104	; 0x68
 8000f74:	2201      	movs	r2, #1
 8000f76:	4832      	ldr	r0, [pc, #200]	; (8001040 <main+0x17c>)
 8000f78:	f7ff fe63 	bl	8000c42 <I2C_MasterReceiveData>
			data[0] = 0x3C; //XOUT_L
 8000f7c:	233c      	movs	r3, #60	; 0x3c
 8000f7e:	703b      	strb	r3, [r7, #0]
			I2C_MasterSendData( &I2C1Handle, &data[0], 1, MPU_ADDR);
 8000f80:	4639      	mov	r1, r7
 8000f82:	2368      	movs	r3, #104	; 0x68
 8000f84:	2201      	movs	r2, #1
 8000f86:	482e      	ldr	r0, [pc, #184]	; (8001040 <main+0x17c>)
 8000f88:	f7ff fdf4 	bl	8000b74 <I2C_MasterSendData>
			I2C_MasterReceiveData(&I2C1Handle, &data[0], 1, MPU_ADDR);
 8000f8c:	4639      	mov	r1, r7
 8000f8e:	2368      	movs	r3, #104	; 0x68
 8000f90:	2201      	movs	r2, #1
 8000f92:	482b      	ldr	r0, [pc, #172]	; (8001040 <main+0x17c>)
 8000f94:	f7ff fe55 	bl	8000c42 <I2C_MasterReceiveData>


			data[0] = 0x3D; //YOUT_H
 8000f98:	233d      	movs	r3, #61	; 0x3d
 8000f9a:	703b      	strb	r3, [r7, #0]
			I2C_MasterSendData( &I2C1Handle, &data[0], 1, MPU_ADDR);
 8000f9c:	4639      	mov	r1, r7
 8000f9e:	2368      	movs	r3, #104	; 0x68
 8000fa0:	2201      	movs	r2, #1
 8000fa2:	4827      	ldr	r0, [pc, #156]	; (8001040 <main+0x17c>)
 8000fa4:	f7ff fde6 	bl	8000b74 <I2C_MasterSendData>
			I2C_MasterReceiveData(&I2C1Handle, &data[0], 1, MPU_ADDR);
 8000fa8:	4639      	mov	r1, r7
 8000faa:	2368      	movs	r3, #104	; 0x68
 8000fac:	2201      	movs	r2, #1
 8000fae:	4824      	ldr	r0, [pc, #144]	; (8001040 <main+0x17c>)
 8000fb0:	f7ff fe47 	bl	8000c42 <I2C_MasterReceiveData>
			data[0] = 0x3E; //YOUT_L
 8000fb4:	233e      	movs	r3, #62	; 0x3e
 8000fb6:	703b      	strb	r3, [r7, #0]
			I2C_MasterSendData( &I2C1Handle, &data[0], 1, MPU_ADDR);
 8000fb8:	4639      	mov	r1, r7
 8000fba:	2368      	movs	r3, #104	; 0x68
 8000fbc:	2201      	movs	r2, #1
 8000fbe:	4820      	ldr	r0, [pc, #128]	; (8001040 <main+0x17c>)
 8000fc0:	f7ff fdd8 	bl	8000b74 <I2C_MasterSendData>
			I2C_MasterReceiveData(&I2C1Handle, &data[0], 1, MPU_ADDR);
 8000fc4:	4639      	mov	r1, r7
 8000fc6:	2368      	movs	r3, #104	; 0x68
 8000fc8:	2201      	movs	r2, #1
 8000fca:	481d      	ldr	r0, [pc, #116]	; (8001040 <main+0x17c>)
 8000fcc:	f7ff fe39 	bl	8000c42 <I2C_MasterReceiveData>


			data[0] = 0x3F; //ZOUT_H
 8000fd0:	233f      	movs	r3, #63	; 0x3f
 8000fd2:	703b      	strb	r3, [r7, #0]
			I2C_MasterSendData( &I2C1Handle, &data[0], 1, MPU_ADDR);
 8000fd4:	4639      	mov	r1, r7
 8000fd6:	2368      	movs	r3, #104	; 0x68
 8000fd8:	2201      	movs	r2, #1
 8000fda:	4819      	ldr	r0, [pc, #100]	; (8001040 <main+0x17c>)
 8000fdc:	f7ff fdca 	bl	8000b74 <I2C_MasterSendData>
			I2C_MasterReceiveData(&I2C1Handle, &data[0], 1, MPU_ADDR);
 8000fe0:	4639      	mov	r1, r7
 8000fe2:	2368      	movs	r3, #104	; 0x68
 8000fe4:	2201      	movs	r2, #1
 8000fe6:	4816      	ldr	r0, [pc, #88]	; (8001040 <main+0x17c>)
 8000fe8:	f7ff fe2b 	bl	8000c42 <I2C_MasterReceiveData>
			data[0] = 0x40; //ZOUT_L
 8000fec:	2340      	movs	r3, #64	; 0x40
 8000fee:	703b      	strb	r3, [r7, #0]
			I2C_MasterSendData( &I2C1Handle, &data[0], 1, MPU_ADDR);
 8000ff0:	4639      	mov	r1, r7
 8000ff2:	2368      	movs	r3, #104	; 0x68
 8000ff4:	2201      	movs	r2, #1
 8000ff6:	4812      	ldr	r0, [pc, #72]	; (8001040 <main+0x17c>)
 8000ff8:	f7ff fdbc 	bl	8000b74 <I2C_MasterSendData>
			I2C_MasterReceiveData(&I2C1Handle, &data[0], 1, MPU_ADDR);
 8000ffc:	4639      	mov	r1, r7
 8000ffe:	2368      	movs	r3, #104	; 0x68
 8001000:	2201      	movs	r2, #1
 8001002:	480f      	ldr	r0, [pc, #60]	; (8001040 <main+0x17c>)
 8001004:	f7ff fe1d 	bl	8000c42 <I2C_MasterReceiveData>

#ifdef ENABLE_PRINT
			printf("%d\n\r", data);
 8001008:	463b      	mov	r3, r7
 800100a:	4619      	mov	r1, r3
 800100c:	480d      	ldr	r0, [pc, #52]	; (8001044 <main+0x180>)
 800100e:	f000 f945 	bl	800129c <iprintf>
			full_data |= ((uint16_t)data);
 8001012:	463b      	mov	r3, r7
 8001014:	b29a      	uxth	r2, r3
 8001016:	88fb      	ldrh	r3, [r7, #6]
 8001018:	4313      	orrs	r3, r2
 800101a:	80fb      	strh	r3, [r7, #6]
			printf("%d\n\r", full_data);
 800101c:	88fb      	ldrh	r3, [r7, #6]
 800101e:	4619      	mov	r1, r3
 8001020:	4808      	ldr	r0, [pc, #32]	; (8001044 <main+0x180>)
 8001022:	f000 f93b 	bl	800129c <iprintf>
#endif

			GPIO_ToggleOPin(GPIOA, GPIO_PIN_5);
 8001026:	2105      	movs	r1, #5
 8001028:	4807      	ldr	r0, [pc, #28]	; (8001048 <main+0x184>)
 800102a:	f7ff fbf3 	bl	8000814 <GPIO_ToggleOPin>
		if( GPIO_ReadIPin(GPIOC, GPIO_PIN_12) == GPIO_PIN_SET)
 800102e:	e762      	b.n	8000ef6 <main+0x32>
 8001030:	40005800 	.word	0x40005800
 8001034:	0800207c 	.word	0x0800207c
 8001038:	08002088 	.word	0x08002088
 800103c:	40020800 	.word	0x40020800
 8001040:	200000bc 	.word	0x200000bc
 8001044:	0800208c 	.word	0x0800208c
 8001048:	40020000 	.word	0x40020000

0800104c <ITM_SendChar>:
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch);

void ITM_SendChar(uint8_t ch)
{
 800104c:	b480      	push	{r7}
 800104e:	b083      	sub	sp, #12
 8001050:	af00      	add	r7, sp, #0
 8001052:	4603      	mov	r3, r0
 8001054:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 8001056:	4b0f      	ldr	r3, [pc, #60]	; (8001094 <ITM_SendChar+0x48>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	4a0e      	ldr	r2, [pc, #56]	; (8001094 <ITM_SendChar+0x48>)
 800105c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001060:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 8001062:	4b0d      	ldr	r3, [pc, #52]	; (8001098 <ITM_SendChar+0x4c>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	4a0c      	ldr	r2, [pc, #48]	; (8001098 <ITM_SendChar+0x4c>)
 8001068:	f043 0301 	orr.w	r3, r3, #1
 800106c:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 800106e:	bf00      	nop
 8001070:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	f003 0301 	and.w	r3, r3, #1
 800107a:	2b00      	cmp	r3, #0
 800107c:	d0f8      	beq.n	8001070 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 800107e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8001082:	79fb      	ldrb	r3, [r7, #7]
 8001084:	6013      	str	r3, [r2, #0]
}
 8001086:	bf00      	nop
 8001088:	370c      	adds	r7, #12
 800108a:	46bd      	mov	sp, r7
 800108c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop
 8001094:	e000edfc 	.word	0xe000edfc
 8001098:	e0000e00 	.word	0xe0000e00

0800109c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b086      	sub	sp, #24
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	60f8      	str	r0, [r7, #12]
 80010a4:	60b9      	str	r1, [r7, #8]
 80010a6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010a8:	2300      	movs	r3, #0
 80010aa:	617b      	str	r3, [r7, #20]
 80010ac:	e00a      	b.n	80010c4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80010ae:	f3af 8000 	nop.w
 80010b2:	4601      	mov	r1, r0
 80010b4:	68bb      	ldr	r3, [r7, #8]
 80010b6:	1c5a      	adds	r2, r3, #1
 80010b8:	60ba      	str	r2, [r7, #8]
 80010ba:	b2ca      	uxtb	r2, r1
 80010bc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010be:	697b      	ldr	r3, [r7, #20]
 80010c0:	3301      	adds	r3, #1
 80010c2:	617b      	str	r3, [r7, #20]
 80010c4:	697a      	ldr	r2, [r7, #20]
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	429a      	cmp	r2, r3
 80010ca:	dbf0      	blt.n	80010ae <_read+0x12>
	}

return len;
 80010cc:	687b      	ldr	r3, [r7, #4]
}
 80010ce:	4618      	mov	r0, r3
 80010d0:	3718      	adds	r7, #24
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}

080010d6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80010d6:	b580      	push	{r7, lr}
 80010d8:	b086      	sub	sp, #24
 80010da:	af00      	add	r7, sp, #0
 80010dc:	60f8      	str	r0, [r7, #12]
 80010de:	60b9      	str	r1, [r7, #8]
 80010e0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010e2:	2300      	movs	r3, #0
 80010e4:	617b      	str	r3, [r7, #20]
 80010e6:	e009      	b.n	80010fc <_write+0x26>
	{
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 80010e8:	68bb      	ldr	r3, [r7, #8]
 80010ea:	1c5a      	adds	r2, r3, #1
 80010ec:	60ba      	str	r2, [r7, #8]
 80010ee:	781b      	ldrb	r3, [r3, #0]
 80010f0:	4618      	mov	r0, r3
 80010f2:	f7ff ffab 	bl	800104c <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010f6:	697b      	ldr	r3, [r7, #20]
 80010f8:	3301      	adds	r3, #1
 80010fa:	617b      	str	r3, [r7, #20]
 80010fc:	697a      	ldr	r2, [r7, #20]
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	429a      	cmp	r2, r3
 8001102:	dbf1      	blt.n	80010e8 <_write+0x12>
	}
	return len;
 8001104:	687b      	ldr	r3, [r7, #4]
}
 8001106:	4618      	mov	r0, r3
 8001108:	3718      	adds	r7, #24
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}

0800110e <_close>:

int _close(int file)
{
 800110e:	b480      	push	{r7}
 8001110:	b083      	sub	sp, #12
 8001112:	af00      	add	r7, sp, #0
 8001114:	6078      	str	r0, [r7, #4]
	return -1;
 8001116:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800111a:	4618      	mov	r0, r3
 800111c:	370c      	adds	r7, #12
 800111e:	46bd      	mov	sp, r7
 8001120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001124:	4770      	bx	lr

08001126 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001126:	b480      	push	{r7}
 8001128:	b083      	sub	sp, #12
 800112a:	af00      	add	r7, sp, #0
 800112c:	6078      	str	r0, [r7, #4]
 800112e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001136:	605a      	str	r2, [r3, #4]
	return 0;
 8001138:	2300      	movs	r3, #0
}
 800113a:	4618      	mov	r0, r3
 800113c:	370c      	adds	r7, #12
 800113e:	46bd      	mov	sp, r7
 8001140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001144:	4770      	bx	lr

08001146 <_isatty>:

int _isatty(int file)
{
 8001146:	b480      	push	{r7}
 8001148:	b083      	sub	sp, #12
 800114a:	af00      	add	r7, sp, #0
 800114c:	6078      	str	r0, [r7, #4]
	return 1;
 800114e:	2301      	movs	r3, #1
}
 8001150:	4618      	mov	r0, r3
 8001152:	370c      	adds	r7, #12
 8001154:	46bd      	mov	sp, r7
 8001156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115a:	4770      	bx	lr

0800115c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800115c:	b480      	push	{r7}
 800115e:	b085      	sub	sp, #20
 8001160:	af00      	add	r7, sp, #0
 8001162:	60f8      	str	r0, [r7, #12]
 8001164:	60b9      	str	r1, [r7, #8]
 8001166:	607a      	str	r2, [r7, #4]
	return 0;
 8001168:	2300      	movs	r3, #0
}
 800116a:	4618      	mov	r0, r3
 800116c:	3714      	adds	r7, #20
 800116e:	46bd      	mov	sp, r7
 8001170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001174:	4770      	bx	lr
	...

08001178 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b086      	sub	sp, #24
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001180:	4a14      	ldr	r2, [pc, #80]	; (80011d4 <_sbrk+0x5c>)
 8001182:	4b15      	ldr	r3, [pc, #84]	; (80011d8 <_sbrk+0x60>)
 8001184:	1ad3      	subs	r3, r2, r3
 8001186:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001188:	697b      	ldr	r3, [r7, #20]
 800118a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800118c:	4b13      	ldr	r3, [pc, #76]	; (80011dc <_sbrk+0x64>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	2b00      	cmp	r3, #0
 8001192:	d102      	bne.n	800119a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001194:	4b11      	ldr	r3, [pc, #68]	; (80011dc <_sbrk+0x64>)
 8001196:	4a12      	ldr	r2, [pc, #72]	; (80011e0 <_sbrk+0x68>)
 8001198:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800119a:	4b10      	ldr	r3, [pc, #64]	; (80011dc <_sbrk+0x64>)
 800119c:	681a      	ldr	r2, [r3, #0]
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	4413      	add	r3, r2
 80011a2:	693a      	ldr	r2, [r7, #16]
 80011a4:	429a      	cmp	r2, r3
 80011a6:	d207      	bcs.n	80011b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80011a8:	f000 f846 	bl	8001238 <__errno>
 80011ac:	4602      	mov	r2, r0
 80011ae:	230c      	movs	r3, #12
 80011b0:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80011b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80011b6:	e009      	b.n	80011cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80011b8:	4b08      	ldr	r3, [pc, #32]	; (80011dc <_sbrk+0x64>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80011be:	4b07      	ldr	r3, [pc, #28]	; (80011dc <_sbrk+0x64>)
 80011c0:	681a      	ldr	r2, [r3, #0]
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	4413      	add	r3, r2
 80011c6:	4a05      	ldr	r2, [pc, #20]	; (80011dc <_sbrk+0x64>)
 80011c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80011ca:	68fb      	ldr	r3, [r7, #12]
}
 80011cc:	4618      	mov	r0, r3
 80011ce:	3718      	adds	r7, #24
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}
 80011d4:	20020000 	.word	0x20020000
 80011d8:	00000400 	.word	0x00000400
 80011dc:	200000b0 	.word	0x200000b0
 80011e0:	200000e8 	.word	0x200000e8

080011e4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80011e4:	480d      	ldr	r0, [pc, #52]	; (800121c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80011e6:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 80011e8:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80011ec:	480c      	ldr	r0, [pc, #48]	; (8001220 <LoopForever+0x6>)
  ldr r1, =_edata
 80011ee:	490d      	ldr	r1, [pc, #52]	; (8001224 <LoopForever+0xa>)
  ldr r2, =_sidata
 80011f0:	4a0d      	ldr	r2, [pc, #52]	; (8001228 <LoopForever+0xe>)
  movs r3, #0
 80011f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011f4:	e002      	b.n	80011fc <LoopCopyDataInit>

080011f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011fa:	3304      	adds	r3, #4

080011fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001200:	d3f9      	bcc.n	80011f6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001202:	4a0a      	ldr	r2, [pc, #40]	; (800122c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001204:	4c0a      	ldr	r4, [pc, #40]	; (8001230 <LoopForever+0x16>)
  movs r3, #0
 8001206:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001208:	e001      	b.n	800120e <LoopFillZerobss>

0800120a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800120a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800120c:	3204      	adds	r2, #4

0800120e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800120e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001210:	d3fb      	bcc.n	800120a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001212:	f000 f817 	bl	8001244 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001216:	f7ff fe55 	bl	8000ec4 <main>

0800121a <LoopForever>:

LoopForever:
    b LoopForever
 800121a:	e7fe      	b.n	800121a <LoopForever>
  ldr   r0, =_estack
 800121c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001220:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001224:	20000094 	.word	0x20000094
  ldr r2, =_sidata
 8001228:	08002134 	.word	0x08002134
  ldr r2, =_sbss
 800122c:	20000094 	.word	0x20000094
  ldr r4, =_ebss
 8001230:	200000e4 	.word	0x200000e4

08001234 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001234:	e7fe      	b.n	8001234 <ADC_IRQHandler>
	...

08001238 <__errno>:
 8001238:	4b01      	ldr	r3, [pc, #4]	; (8001240 <__errno+0x8>)
 800123a:	6818      	ldr	r0, [r3, #0]
 800123c:	4770      	bx	lr
 800123e:	bf00      	nop
 8001240:	20000030 	.word	0x20000030

08001244 <__libc_init_array>:
 8001244:	b570      	push	{r4, r5, r6, lr}
 8001246:	4e0d      	ldr	r6, [pc, #52]	; (800127c <__libc_init_array+0x38>)
 8001248:	4c0d      	ldr	r4, [pc, #52]	; (8001280 <__libc_init_array+0x3c>)
 800124a:	1ba4      	subs	r4, r4, r6
 800124c:	10a4      	asrs	r4, r4, #2
 800124e:	2500      	movs	r5, #0
 8001250:	42a5      	cmp	r5, r4
 8001252:	d109      	bne.n	8001268 <__libc_init_array+0x24>
 8001254:	4e0b      	ldr	r6, [pc, #44]	; (8001284 <__libc_init_array+0x40>)
 8001256:	4c0c      	ldr	r4, [pc, #48]	; (8001288 <__libc_init_array+0x44>)
 8001258:	f000 ff04 	bl	8002064 <_init>
 800125c:	1ba4      	subs	r4, r4, r6
 800125e:	10a4      	asrs	r4, r4, #2
 8001260:	2500      	movs	r5, #0
 8001262:	42a5      	cmp	r5, r4
 8001264:	d105      	bne.n	8001272 <__libc_init_array+0x2e>
 8001266:	bd70      	pop	{r4, r5, r6, pc}
 8001268:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800126c:	4798      	blx	r3
 800126e:	3501      	adds	r5, #1
 8001270:	e7ee      	b.n	8001250 <__libc_init_array+0xc>
 8001272:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001276:	4798      	blx	r3
 8001278:	3501      	adds	r5, #1
 800127a:	e7f2      	b.n	8001262 <__libc_init_array+0x1e>
 800127c:	0800212c 	.word	0x0800212c
 8001280:	0800212c 	.word	0x0800212c
 8001284:	0800212c 	.word	0x0800212c
 8001288:	08002130 	.word	0x08002130

0800128c <memset>:
 800128c:	4402      	add	r2, r0
 800128e:	4603      	mov	r3, r0
 8001290:	4293      	cmp	r3, r2
 8001292:	d100      	bne.n	8001296 <memset+0xa>
 8001294:	4770      	bx	lr
 8001296:	f803 1b01 	strb.w	r1, [r3], #1
 800129a:	e7f9      	b.n	8001290 <memset+0x4>

0800129c <iprintf>:
 800129c:	b40f      	push	{r0, r1, r2, r3}
 800129e:	4b0a      	ldr	r3, [pc, #40]	; (80012c8 <iprintf+0x2c>)
 80012a0:	b513      	push	{r0, r1, r4, lr}
 80012a2:	681c      	ldr	r4, [r3, #0]
 80012a4:	b124      	cbz	r4, 80012b0 <iprintf+0x14>
 80012a6:	69a3      	ldr	r3, [r4, #24]
 80012a8:	b913      	cbnz	r3, 80012b0 <iprintf+0x14>
 80012aa:	4620      	mov	r0, r4
 80012ac:	f000 f84e 	bl	800134c <__sinit>
 80012b0:	ab05      	add	r3, sp, #20
 80012b2:	9a04      	ldr	r2, [sp, #16]
 80012b4:	68a1      	ldr	r1, [r4, #8]
 80012b6:	9301      	str	r3, [sp, #4]
 80012b8:	4620      	mov	r0, r4
 80012ba:	f000 f955 	bl	8001568 <_vfiprintf_r>
 80012be:	b002      	add	sp, #8
 80012c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80012c4:	b004      	add	sp, #16
 80012c6:	4770      	bx	lr
 80012c8:	20000030 	.word	0x20000030

080012cc <std>:
 80012cc:	2300      	movs	r3, #0
 80012ce:	b510      	push	{r4, lr}
 80012d0:	4604      	mov	r4, r0
 80012d2:	e9c0 3300 	strd	r3, r3, [r0]
 80012d6:	6083      	str	r3, [r0, #8]
 80012d8:	8181      	strh	r1, [r0, #12]
 80012da:	6643      	str	r3, [r0, #100]	; 0x64
 80012dc:	81c2      	strh	r2, [r0, #14]
 80012de:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80012e2:	6183      	str	r3, [r0, #24]
 80012e4:	4619      	mov	r1, r3
 80012e6:	2208      	movs	r2, #8
 80012e8:	305c      	adds	r0, #92	; 0x5c
 80012ea:	f7ff ffcf 	bl	800128c <memset>
 80012ee:	4b05      	ldr	r3, [pc, #20]	; (8001304 <std+0x38>)
 80012f0:	6263      	str	r3, [r4, #36]	; 0x24
 80012f2:	4b05      	ldr	r3, [pc, #20]	; (8001308 <std+0x3c>)
 80012f4:	62a3      	str	r3, [r4, #40]	; 0x28
 80012f6:	4b05      	ldr	r3, [pc, #20]	; (800130c <std+0x40>)
 80012f8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80012fa:	4b05      	ldr	r3, [pc, #20]	; (8001310 <std+0x44>)
 80012fc:	6224      	str	r4, [r4, #32]
 80012fe:	6323      	str	r3, [r4, #48]	; 0x30
 8001300:	bd10      	pop	{r4, pc}
 8001302:	bf00      	nop
 8001304:	08001ac5 	.word	0x08001ac5
 8001308:	08001ae7 	.word	0x08001ae7
 800130c:	08001b1f 	.word	0x08001b1f
 8001310:	08001b43 	.word	0x08001b43

08001314 <_cleanup_r>:
 8001314:	4901      	ldr	r1, [pc, #4]	; (800131c <_cleanup_r+0x8>)
 8001316:	f000 b885 	b.w	8001424 <_fwalk_reent>
 800131a:	bf00      	nop
 800131c:	08001e1d 	.word	0x08001e1d

08001320 <__sfmoreglue>:
 8001320:	b570      	push	{r4, r5, r6, lr}
 8001322:	1e4a      	subs	r2, r1, #1
 8001324:	2568      	movs	r5, #104	; 0x68
 8001326:	4355      	muls	r5, r2
 8001328:	460e      	mov	r6, r1
 800132a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800132e:	f000 f897 	bl	8001460 <_malloc_r>
 8001332:	4604      	mov	r4, r0
 8001334:	b140      	cbz	r0, 8001348 <__sfmoreglue+0x28>
 8001336:	2100      	movs	r1, #0
 8001338:	e9c0 1600 	strd	r1, r6, [r0]
 800133c:	300c      	adds	r0, #12
 800133e:	60a0      	str	r0, [r4, #8]
 8001340:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8001344:	f7ff ffa2 	bl	800128c <memset>
 8001348:	4620      	mov	r0, r4
 800134a:	bd70      	pop	{r4, r5, r6, pc}

0800134c <__sinit>:
 800134c:	6983      	ldr	r3, [r0, #24]
 800134e:	b510      	push	{r4, lr}
 8001350:	4604      	mov	r4, r0
 8001352:	bb33      	cbnz	r3, 80013a2 <__sinit+0x56>
 8001354:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8001358:	6503      	str	r3, [r0, #80]	; 0x50
 800135a:	4b12      	ldr	r3, [pc, #72]	; (80013a4 <__sinit+0x58>)
 800135c:	4a12      	ldr	r2, [pc, #72]	; (80013a8 <__sinit+0x5c>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	6282      	str	r2, [r0, #40]	; 0x28
 8001362:	4298      	cmp	r0, r3
 8001364:	bf04      	itt	eq
 8001366:	2301      	moveq	r3, #1
 8001368:	6183      	streq	r3, [r0, #24]
 800136a:	f000 f81f 	bl	80013ac <__sfp>
 800136e:	6060      	str	r0, [r4, #4]
 8001370:	4620      	mov	r0, r4
 8001372:	f000 f81b 	bl	80013ac <__sfp>
 8001376:	60a0      	str	r0, [r4, #8]
 8001378:	4620      	mov	r0, r4
 800137a:	f000 f817 	bl	80013ac <__sfp>
 800137e:	2200      	movs	r2, #0
 8001380:	60e0      	str	r0, [r4, #12]
 8001382:	2104      	movs	r1, #4
 8001384:	6860      	ldr	r0, [r4, #4]
 8001386:	f7ff ffa1 	bl	80012cc <std>
 800138a:	2201      	movs	r2, #1
 800138c:	2109      	movs	r1, #9
 800138e:	68a0      	ldr	r0, [r4, #8]
 8001390:	f7ff ff9c 	bl	80012cc <std>
 8001394:	2202      	movs	r2, #2
 8001396:	2112      	movs	r1, #18
 8001398:	68e0      	ldr	r0, [r4, #12]
 800139a:	f7ff ff97 	bl	80012cc <std>
 800139e:	2301      	movs	r3, #1
 80013a0:	61a3      	str	r3, [r4, #24]
 80013a2:	bd10      	pop	{r4, pc}
 80013a4:	08002094 	.word	0x08002094
 80013a8:	08001315 	.word	0x08001315

080013ac <__sfp>:
 80013ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80013ae:	4b1b      	ldr	r3, [pc, #108]	; (800141c <__sfp+0x70>)
 80013b0:	681e      	ldr	r6, [r3, #0]
 80013b2:	69b3      	ldr	r3, [r6, #24]
 80013b4:	4607      	mov	r7, r0
 80013b6:	b913      	cbnz	r3, 80013be <__sfp+0x12>
 80013b8:	4630      	mov	r0, r6
 80013ba:	f7ff ffc7 	bl	800134c <__sinit>
 80013be:	3648      	adds	r6, #72	; 0x48
 80013c0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80013c4:	3b01      	subs	r3, #1
 80013c6:	d503      	bpl.n	80013d0 <__sfp+0x24>
 80013c8:	6833      	ldr	r3, [r6, #0]
 80013ca:	b133      	cbz	r3, 80013da <__sfp+0x2e>
 80013cc:	6836      	ldr	r6, [r6, #0]
 80013ce:	e7f7      	b.n	80013c0 <__sfp+0x14>
 80013d0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80013d4:	b16d      	cbz	r5, 80013f2 <__sfp+0x46>
 80013d6:	3468      	adds	r4, #104	; 0x68
 80013d8:	e7f4      	b.n	80013c4 <__sfp+0x18>
 80013da:	2104      	movs	r1, #4
 80013dc:	4638      	mov	r0, r7
 80013de:	f7ff ff9f 	bl	8001320 <__sfmoreglue>
 80013e2:	6030      	str	r0, [r6, #0]
 80013e4:	2800      	cmp	r0, #0
 80013e6:	d1f1      	bne.n	80013cc <__sfp+0x20>
 80013e8:	230c      	movs	r3, #12
 80013ea:	603b      	str	r3, [r7, #0]
 80013ec:	4604      	mov	r4, r0
 80013ee:	4620      	mov	r0, r4
 80013f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80013f2:	4b0b      	ldr	r3, [pc, #44]	; (8001420 <__sfp+0x74>)
 80013f4:	6665      	str	r5, [r4, #100]	; 0x64
 80013f6:	e9c4 5500 	strd	r5, r5, [r4]
 80013fa:	60a5      	str	r5, [r4, #8]
 80013fc:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8001400:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8001404:	2208      	movs	r2, #8
 8001406:	4629      	mov	r1, r5
 8001408:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800140c:	f7ff ff3e 	bl	800128c <memset>
 8001410:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8001414:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8001418:	e7e9      	b.n	80013ee <__sfp+0x42>
 800141a:	bf00      	nop
 800141c:	08002094 	.word	0x08002094
 8001420:	ffff0001 	.word	0xffff0001

08001424 <_fwalk_reent>:
 8001424:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001428:	4680      	mov	r8, r0
 800142a:	4689      	mov	r9, r1
 800142c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8001430:	2600      	movs	r6, #0
 8001432:	b914      	cbnz	r4, 800143a <_fwalk_reent+0x16>
 8001434:	4630      	mov	r0, r6
 8001436:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800143a:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800143e:	3f01      	subs	r7, #1
 8001440:	d501      	bpl.n	8001446 <_fwalk_reent+0x22>
 8001442:	6824      	ldr	r4, [r4, #0]
 8001444:	e7f5      	b.n	8001432 <_fwalk_reent+0xe>
 8001446:	89ab      	ldrh	r3, [r5, #12]
 8001448:	2b01      	cmp	r3, #1
 800144a:	d907      	bls.n	800145c <_fwalk_reent+0x38>
 800144c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001450:	3301      	adds	r3, #1
 8001452:	d003      	beq.n	800145c <_fwalk_reent+0x38>
 8001454:	4629      	mov	r1, r5
 8001456:	4640      	mov	r0, r8
 8001458:	47c8      	blx	r9
 800145a:	4306      	orrs	r6, r0
 800145c:	3568      	adds	r5, #104	; 0x68
 800145e:	e7ee      	b.n	800143e <_fwalk_reent+0x1a>

08001460 <_malloc_r>:
 8001460:	b570      	push	{r4, r5, r6, lr}
 8001462:	1ccd      	adds	r5, r1, #3
 8001464:	f025 0503 	bic.w	r5, r5, #3
 8001468:	3508      	adds	r5, #8
 800146a:	2d0c      	cmp	r5, #12
 800146c:	bf38      	it	cc
 800146e:	250c      	movcc	r5, #12
 8001470:	2d00      	cmp	r5, #0
 8001472:	4606      	mov	r6, r0
 8001474:	db01      	blt.n	800147a <_malloc_r+0x1a>
 8001476:	42a9      	cmp	r1, r5
 8001478:	d903      	bls.n	8001482 <_malloc_r+0x22>
 800147a:	230c      	movs	r3, #12
 800147c:	6033      	str	r3, [r6, #0]
 800147e:	2000      	movs	r0, #0
 8001480:	bd70      	pop	{r4, r5, r6, pc}
 8001482:	f000 fd6b 	bl	8001f5c <__malloc_lock>
 8001486:	4a21      	ldr	r2, [pc, #132]	; (800150c <_malloc_r+0xac>)
 8001488:	6814      	ldr	r4, [r2, #0]
 800148a:	4621      	mov	r1, r4
 800148c:	b991      	cbnz	r1, 80014b4 <_malloc_r+0x54>
 800148e:	4c20      	ldr	r4, [pc, #128]	; (8001510 <_malloc_r+0xb0>)
 8001490:	6823      	ldr	r3, [r4, #0]
 8001492:	b91b      	cbnz	r3, 800149c <_malloc_r+0x3c>
 8001494:	4630      	mov	r0, r6
 8001496:	f000 fb05 	bl	8001aa4 <_sbrk_r>
 800149a:	6020      	str	r0, [r4, #0]
 800149c:	4629      	mov	r1, r5
 800149e:	4630      	mov	r0, r6
 80014a0:	f000 fb00 	bl	8001aa4 <_sbrk_r>
 80014a4:	1c43      	adds	r3, r0, #1
 80014a6:	d124      	bne.n	80014f2 <_malloc_r+0x92>
 80014a8:	230c      	movs	r3, #12
 80014aa:	6033      	str	r3, [r6, #0]
 80014ac:	4630      	mov	r0, r6
 80014ae:	f000 fd56 	bl	8001f5e <__malloc_unlock>
 80014b2:	e7e4      	b.n	800147e <_malloc_r+0x1e>
 80014b4:	680b      	ldr	r3, [r1, #0]
 80014b6:	1b5b      	subs	r3, r3, r5
 80014b8:	d418      	bmi.n	80014ec <_malloc_r+0x8c>
 80014ba:	2b0b      	cmp	r3, #11
 80014bc:	d90f      	bls.n	80014de <_malloc_r+0x7e>
 80014be:	600b      	str	r3, [r1, #0]
 80014c0:	50cd      	str	r5, [r1, r3]
 80014c2:	18cc      	adds	r4, r1, r3
 80014c4:	4630      	mov	r0, r6
 80014c6:	f000 fd4a 	bl	8001f5e <__malloc_unlock>
 80014ca:	f104 000b 	add.w	r0, r4, #11
 80014ce:	1d23      	adds	r3, r4, #4
 80014d0:	f020 0007 	bic.w	r0, r0, #7
 80014d4:	1ac3      	subs	r3, r0, r3
 80014d6:	d0d3      	beq.n	8001480 <_malloc_r+0x20>
 80014d8:	425a      	negs	r2, r3
 80014da:	50e2      	str	r2, [r4, r3]
 80014dc:	e7d0      	b.n	8001480 <_malloc_r+0x20>
 80014de:	428c      	cmp	r4, r1
 80014e0:	684b      	ldr	r3, [r1, #4]
 80014e2:	bf16      	itet	ne
 80014e4:	6063      	strne	r3, [r4, #4]
 80014e6:	6013      	streq	r3, [r2, #0]
 80014e8:	460c      	movne	r4, r1
 80014ea:	e7eb      	b.n	80014c4 <_malloc_r+0x64>
 80014ec:	460c      	mov	r4, r1
 80014ee:	6849      	ldr	r1, [r1, #4]
 80014f0:	e7cc      	b.n	800148c <_malloc_r+0x2c>
 80014f2:	1cc4      	adds	r4, r0, #3
 80014f4:	f024 0403 	bic.w	r4, r4, #3
 80014f8:	42a0      	cmp	r0, r4
 80014fa:	d005      	beq.n	8001508 <_malloc_r+0xa8>
 80014fc:	1a21      	subs	r1, r4, r0
 80014fe:	4630      	mov	r0, r6
 8001500:	f000 fad0 	bl	8001aa4 <_sbrk_r>
 8001504:	3001      	adds	r0, #1
 8001506:	d0cf      	beq.n	80014a8 <_malloc_r+0x48>
 8001508:	6025      	str	r5, [r4, #0]
 800150a:	e7db      	b.n	80014c4 <_malloc_r+0x64>
 800150c:	200000b4 	.word	0x200000b4
 8001510:	200000b8 	.word	0x200000b8

08001514 <__sfputc_r>:
 8001514:	6893      	ldr	r3, [r2, #8]
 8001516:	3b01      	subs	r3, #1
 8001518:	2b00      	cmp	r3, #0
 800151a:	b410      	push	{r4}
 800151c:	6093      	str	r3, [r2, #8]
 800151e:	da08      	bge.n	8001532 <__sfputc_r+0x1e>
 8001520:	6994      	ldr	r4, [r2, #24]
 8001522:	42a3      	cmp	r3, r4
 8001524:	db01      	blt.n	800152a <__sfputc_r+0x16>
 8001526:	290a      	cmp	r1, #10
 8001528:	d103      	bne.n	8001532 <__sfputc_r+0x1e>
 800152a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800152e:	f000 bb0d 	b.w	8001b4c <__swbuf_r>
 8001532:	6813      	ldr	r3, [r2, #0]
 8001534:	1c58      	adds	r0, r3, #1
 8001536:	6010      	str	r0, [r2, #0]
 8001538:	7019      	strb	r1, [r3, #0]
 800153a:	4608      	mov	r0, r1
 800153c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001540:	4770      	bx	lr

08001542 <__sfputs_r>:
 8001542:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001544:	4606      	mov	r6, r0
 8001546:	460f      	mov	r7, r1
 8001548:	4614      	mov	r4, r2
 800154a:	18d5      	adds	r5, r2, r3
 800154c:	42ac      	cmp	r4, r5
 800154e:	d101      	bne.n	8001554 <__sfputs_r+0x12>
 8001550:	2000      	movs	r0, #0
 8001552:	e007      	b.n	8001564 <__sfputs_r+0x22>
 8001554:	463a      	mov	r2, r7
 8001556:	f814 1b01 	ldrb.w	r1, [r4], #1
 800155a:	4630      	mov	r0, r6
 800155c:	f7ff ffda 	bl	8001514 <__sfputc_r>
 8001560:	1c43      	adds	r3, r0, #1
 8001562:	d1f3      	bne.n	800154c <__sfputs_r+0xa>
 8001564:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08001568 <_vfiprintf_r>:
 8001568:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800156c:	460c      	mov	r4, r1
 800156e:	b09d      	sub	sp, #116	; 0x74
 8001570:	4617      	mov	r7, r2
 8001572:	461d      	mov	r5, r3
 8001574:	4606      	mov	r6, r0
 8001576:	b118      	cbz	r0, 8001580 <_vfiprintf_r+0x18>
 8001578:	6983      	ldr	r3, [r0, #24]
 800157a:	b90b      	cbnz	r3, 8001580 <_vfiprintf_r+0x18>
 800157c:	f7ff fee6 	bl	800134c <__sinit>
 8001580:	4b7c      	ldr	r3, [pc, #496]	; (8001774 <_vfiprintf_r+0x20c>)
 8001582:	429c      	cmp	r4, r3
 8001584:	d158      	bne.n	8001638 <_vfiprintf_r+0xd0>
 8001586:	6874      	ldr	r4, [r6, #4]
 8001588:	89a3      	ldrh	r3, [r4, #12]
 800158a:	0718      	lsls	r0, r3, #28
 800158c:	d55e      	bpl.n	800164c <_vfiprintf_r+0xe4>
 800158e:	6923      	ldr	r3, [r4, #16]
 8001590:	2b00      	cmp	r3, #0
 8001592:	d05b      	beq.n	800164c <_vfiprintf_r+0xe4>
 8001594:	2300      	movs	r3, #0
 8001596:	9309      	str	r3, [sp, #36]	; 0x24
 8001598:	2320      	movs	r3, #32
 800159a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800159e:	2330      	movs	r3, #48	; 0x30
 80015a0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80015a4:	9503      	str	r5, [sp, #12]
 80015a6:	f04f 0b01 	mov.w	fp, #1
 80015aa:	46b8      	mov	r8, r7
 80015ac:	4645      	mov	r5, r8
 80015ae:	f815 3b01 	ldrb.w	r3, [r5], #1
 80015b2:	b10b      	cbz	r3, 80015b8 <_vfiprintf_r+0x50>
 80015b4:	2b25      	cmp	r3, #37	; 0x25
 80015b6:	d154      	bne.n	8001662 <_vfiprintf_r+0xfa>
 80015b8:	ebb8 0a07 	subs.w	sl, r8, r7
 80015bc:	d00b      	beq.n	80015d6 <_vfiprintf_r+0x6e>
 80015be:	4653      	mov	r3, sl
 80015c0:	463a      	mov	r2, r7
 80015c2:	4621      	mov	r1, r4
 80015c4:	4630      	mov	r0, r6
 80015c6:	f7ff ffbc 	bl	8001542 <__sfputs_r>
 80015ca:	3001      	adds	r0, #1
 80015cc:	f000 80c2 	beq.w	8001754 <_vfiprintf_r+0x1ec>
 80015d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80015d2:	4453      	add	r3, sl
 80015d4:	9309      	str	r3, [sp, #36]	; 0x24
 80015d6:	f898 3000 	ldrb.w	r3, [r8]
 80015da:	2b00      	cmp	r3, #0
 80015dc:	f000 80ba 	beq.w	8001754 <_vfiprintf_r+0x1ec>
 80015e0:	2300      	movs	r3, #0
 80015e2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80015e6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80015ea:	9304      	str	r3, [sp, #16]
 80015ec:	9307      	str	r3, [sp, #28]
 80015ee:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80015f2:	931a      	str	r3, [sp, #104]	; 0x68
 80015f4:	46a8      	mov	r8, r5
 80015f6:	2205      	movs	r2, #5
 80015f8:	f818 1b01 	ldrb.w	r1, [r8], #1
 80015fc:	485e      	ldr	r0, [pc, #376]	; (8001778 <_vfiprintf_r+0x210>)
 80015fe:	f7fe fe07 	bl	8000210 <memchr>
 8001602:	9b04      	ldr	r3, [sp, #16]
 8001604:	bb78      	cbnz	r0, 8001666 <_vfiprintf_r+0xfe>
 8001606:	06d9      	lsls	r1, r3, #27
 8001608:	bf44      	itt	mi
 800160a:	2220      	movmi	r2, #32
 800160c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8001610:	071a      	lsls	r2, r3, #28
 8001612:	bf44      	itt	mi
 8001614:	222b      	movmi	r2, #43	; 0x2b
 8001616:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800161a:	782a      	ldrb	r2, [r5, #0]
 800161c:	2a2a      	cmp	r2, #42	; 0x2a
 800161e:	d02a      	beq.n	8001676 <_vfiprintf_r+0x10e>
 8001620:	9a07      	ldr	r2, [sp, #28]
 8001622:	46a8      	mov	r8, r5
 8001624:	2000      	movs	r0, #0
 8001626:	250a      	movs	r5, #10
 8001628:	4641      	mov	r1, r8
 800162a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800162e:	3b30      	subs	r3, #48	; 0x30
 8001630:	2b09      	cmp	r3, #9
 8001632:	d969      	bls.n	8001708 <_vfiprintf_r+0x1a0>
 8001634:	b360      	cbz	r0, 8001690 <_vfiprintf_r+0x128>
 8001636:	e024      	b.n	8001682 <_vfiprintf_r+0x11a>
 8001638:	4b50      	ldr	r3, [pc, #320]	; (800177c <_vfiprintf_r+0x214>)
 800163a:	429c      	cmp	r4, r3
 800163c:	d101      	bne.n	8001642 <_vfiprintf_r+0xda>
 800163e:	68b4      	ldr	r4, [r6, #8]
 8001640:	e7a2      	b.n	8001588 <_vfiprintf_r+0x20>
 8001642:	4b4f      	ldr	r3, [pc, #316]	; (8001780 <_vfiprintf_r+0x218>)
 8001644:	429c      	cmp	r4, r3
 8001646:	bf08      	it	eq
 8001648:	68f4      	ldreq	r4, [r6, #12]
 800164a:	e79d      	b.n	8001588 <_vfiprintf_r+0x20>
 800164c:	4621      	mov	r1, r4
 800164e:	4630      	mov	r0, r6
 8001650:	f000 fae0 	bl	8001c14 <__swsetup_r>
 8001654:	2800      	cmp	r0, #0
 8001656:	d09d      	beq.n	8001594 <_vfiprintf_r+0x2c>
 8001658:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800165c:	b01d      	add	sp, #116	; 0x74
 800165e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001662:	46a8      	mov	r8, r5
 8001664:	e7a2      	b.n	80015ac <_vfiprintf_r+0x44>
 8001666:	4a44      	ldr	r2, [pc, #272]	; (8001778 <_vfiprintf_r+0x210>)
 8001668:	1a80      	subs	r0, r0, r2
 800166a:	fa0b f000 	lsl.w	r0, fp, r0
 800166e:	4318      	orrs	r0, r3
 8001670:	9004      	str	r0, [sp, #16]
 8001672:	4645      	mov	r5, r8
 8001674:	e7be      	b.n	80015f4 <_vfiprintf_r+0x8c>
 8001676:	9a03      	ldr	r2, [sp, #12]
 8001678:	1d11      	adds	r1, r2, #4
 800167a:	6812      	ldr	r2, [r2, #0]
 800167c:	9103      	str	r1, [sp, #12]
 800167e:	2a00      	cmp	r2, #0
 8001680:	db01      	blt.n	8001686 <_vfiprintf_r+0x11e>
 8001682:	9207      	str	r2, [sp, #28]
 8001684:	e004      	b.n	8001690 <_vfiprintf_r+0x128>
 8001686:	4252      	negs	r2, r2
 8001688:	f043 0302 	orr.w	r3, r3, #2
 800168c:	9207      	str	r2, [sp, #28]
 800168e:	9304      	str	r3, [sp, #16]
 8001690:	f898 3000 	ldrb.w	r3, [r8]
 8001694:	2b2e      	cmp	r3, #46	; 0x2e
 8001696:	d10e      	bne.n	80016b6 <_vfiprintf_r+0x14e>
 8001698:	f898 3001 	ldrb.w	r3, [r8, #1]
 800169c:	2b2a      	cmp	r3, #42	; 0x2a
 800169e:	d138      	bne.n	8001712 <_vfiprintf_r+0x1aa>
 80016a0:	9b03      	ldr	r3, [sp, #12]
 80016a2:	1d1a      	adds	r2, r3, #4
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	9203      	str	r2, [sp, #12]
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	bfb8      	it	lt
 80016ac:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80016b0:	f108 0802 	add.w	r8, r8, #2
 80016b4:	9305      	str	r3, [sp, #20]
 80016b6:	4d33      	ldr	r5, [pc, #204]	; (8001784 <_vfiprintf_r+0x21c>)
 80016b8:	f898 1000 	ldrb.w	r1, [r8]
 80016bc:	2203      	movs	r2, #3
 80016be:	4628      	mov	r0, r5
 80016c0:	f7fe fda6 	bl	8000210 <memchr>
 80016c4:	b140      	cbz	r0, 80016d8 <_vfiprintf_r+0x170>
 80016c6:	2340      	movs	r3, #64	; 0x40
 80016c8:	1b40      	subs	r0, r0, r5
 80016ca:	fa03 f000 	lsl.w	r0, r3, r0
 80016ce:	9b04      	ldr	r3, [sp, #16]
 80016d0:	4303      	orrs	r3, r0
 80016d2:	f108 0801 	add.w	r8, r8, #1
 80016d6:	9304      	str	r3, [sp, #16]
 80016d8:	f898 1000 	ldrb.w	r1, [r8]
 80016dc:	482a      	ldr	r0, [pc, #168]	; (8001788 <_vfiprintf_r+0x220>)
 80016de:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80016e2:	2206      	movs	r2, #6
 80016e4:	f108 0701 	add.w	r7, r8, #1
 80016e8:	f7fe fd92 	bl	8000210 <memchr>
 80016ec:	2800      	cmp	r0, #0
 80016ee:	d037      	beq.n	8001760 <_vfiprintf_r+0x1f8>
 80016f0:	4b26      	ldr	r3, [pc, #152]	; (800178c <_vfiprintf_r+0x224>)
 80016f2:	bb1b      	cbnz	r3, 800173c <_vfiprintf_r+0x1d4>
 80016f4:	9b03      	ldr	r3, [sp, #12]
 80016f6:	3307      	adds	r3, #7
 80016f8:	f023 0307 	bic.w	r3, r3, #7
 80016fc:	3308      	adds	r3, #8
 80016fe:	9303      	str	r3, [sp, #12]
 8001700:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001702:	444b      	add	r3, r9
 8001704:	9309      	str	r3, [sp, #36]	; 0x24
 8001706:	e750      	b.n	80015aa <_vfiprintf_r+0x42>
 8001708:	fb05 3202 	mla	r2, r5, r2, r3
 800170c:	2001      	movs	r0, #1
 800170e:	4688      	mov	r8, r1
 8001710:	e78a      	b.n	8001628 <_vfiprintf_r+0xc0>
 8001712:	2300      	movs	r3, #0
 8001714:	f108 0801 	add.w	r8, r8, #1
 8001718:	9305      	str	r3, [sp, #20]
 800171a:	4619      	mov	r1, r3
 800171c:	250a      	movs	r5, #10
 800171e:	4640      	mov	r0, r8
 8001720:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001724:	3a30      	subs	r2, #48	; 0x30
 8001726:	2a09      	cmp	r2, #9
 8001728:	d903      	bls.n	8001732 <_vfiprintf_r+0x1ca>
 800172a:	2b00      	cmp	r3, #0
 800172c:	d0c3      	beq.n	80016b6 <_vfiprintf_r+0x14e>
 800172e:	9105      	str	r1, [sp, #20]
 8001730:	e7c1      	b.n	80016b6 <_vfiprintf_r+0x14e>
 8001732:	fb05 2101 	mla	r1, r5, r1, r2
 8001736:	2301      	movs	r3, #1
 8001738:	4680      	mov	r8, r0
 800173a:	e7f0      	b.n	800171e <_vfiprintf_r+0x1b6>
 800173c:	ab03      	add	r3, sp, #12
 800173e:	9300      	str	r3, [sp, #0]
 8001740:	4622      	mov	r2, r4
 8001742:	4b13      	ldr	r3, [pc, #76]	; (8001790 <_vfiprintf_r+0x228>)
 8001744:	a904      	add	r1, sp, #16
 8001746:	4630      	mov	r0, r6
 8001748:	f3af 8000 	nop.w
 800174c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8001750:	4681      	mov	r9, r0
 8001752:	d1d5      	bne.n	8001700 <_vfiprintf_r+0x198>
 8001754:	89a3      	ldrh	r3, [r4, #12]
 8001756:	065b      	lsls	r3, r3, #25
 8001758:	f53f af7e 	bmi.w	8001658 <_vfiprintf_r+0xf0>
 800175c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800175e:	e77d      	b.n	800165c <_vfiprintf_r+0xf4>
 8001760:	ab03      	add	r3, sp, #12
 8001762:	9300      	str	r3, [sp, #0]
 8001764:	4622      	mov	r2, r4
 8001766:	4b0a      	ldr	r3, [pc, #40]	; (8001790 <_vfiprintf_r+0x228>)
 8001768:	a904      	add	r1, sp, #16
 800176a:	4630      	mov	r0, r6
 800176c:	f000 f888 	bl	8001880 <_printf_i>
 8001770:	e7ec      	b.n	800174c <_vfiprintf_r+0x1e4>
 8001772:	bf00      	nop
 8001774:	080020b8 	.word	0x080020b8
 8001778:	080020f8 	.word	0x080020f8
 800177c:	080020d8 	.word	0x080020d8
 8001780:	08002098 	.word	0x08002098
 8001784:	080020fe 	.word	0x080020fe
 8001788:	08002102 	.word	0x08002102
 800178c:	00000000 	.word	0x00000000
 8001790:	08001543 	.word	0x08001543

08001794 <_printf_common>:
 8001794:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001798:	4691      	mov	r9, r2
 800179a:	461f      	mov	r7, r3
 800179c:	688a      	ldr	r2, [r1, #8]
 800179e:	690b      	ldr	r3, [r1, #16]
 80017a0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80017a4:	4293      	cmp	r3, r2
 80017a6:	bfb8      	it	lt
 80017a8:	4613      	movlt	r3, r2
 80017aa:	f8c9 3000 	str.w	r3, [r9]
 80017ae:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80017b2:	4606      	mov	r6, r0
 80017b4:	460c      	mov	r4, r1
 80017b6:	b112      	cbz	r2, 80017be <_printf_common+0x2a>
 80017b8:	3301      	adds	r3, #1
 80017ba:	f8c9 3000 	str.w	r3, [r9]
 80017be:	6823      	ldr	r3, [r4, #0]
 80017c0:	0699      	lsls	r1, r3, #26
 80017c2:	bf42      	ittt	mi
 80017c4:	f8d9 3000 	ldrmi.w	r3, [r9]
 80017c8:	3302      	addmi	r3, #2
 80017ca:	f8c9 3000 	strmi.w	r3, [r9]
 80017ce:	6825      	ldr	r5, [r4, #0]
 80017d0:	f015 0506 	ands.w	r5, r5, #6
 80017d4:	d107      	bne.n	80017e6 <_printf_common+0x52>
 80017d6:	f104 0a19 	add.w	sl, r4, #25
 80017da:	68e3      	ldr	r3, [r4, #12]
 80017dc:	f8d9 2000 	ldr.w	r2, [r9]
 80017e0:	1a9b      	subs	r3, r3, r2
 80017e2:	42ab      	cmp	r3, r5
 80017e4:	dc28      	bgt.n	8001838 <_printf_common+0xa4>
 80017e6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80017ea:	6822      	ldr	r2, [r4, #0]
 80017ec:	3300      	adds	r3, #0
 80017ee:	bf18      	it	ne
 80017f0:	2301      	movne	r3, #1
 80017f2:	0692      	lsls	r2, r2, #26
 80017f4:	d42d      	bmi.n	8001852 <_printf_common+0xbe>
 80017f6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80017fa:	4639      	mov	r1, r7
 80017fc:	4630      	mov	r0, r6
 80017fe:	47c0      	blx	r8
 8001800:	3001      	adds	r0, #1
 8001802:	d020      	beq.n	8001846 <_printf_common+0xb2>
 8001804:	6823      	ldr	r3, [r4, #0]
 8001806:	68e5      	ldr	r5, [r4, #12]
 8001808:	f8d9 2000 	ldr.w	r2, [r9]
 800180c:	f003 0306 	and.w	r3, r3, #6
 8001810:	2b04      	cmp	r3, #4
 8001812:	bf08      	it	eq
 8001814:	1aad      	subeq	r5, r5, r2
 8001816:	68a3      	ldr	r3, [r4, #8]
 8001818:	6922      	ldr	r2, [r4, #16]
 800181a:	bf0c      	ite	eq
 800181c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001820:	2500      	movne	r5, #0
 8001822:	4293      	cmp	r3, r2
 8001824:	bfc4      	itt	gt
 8001826:	1a9b      	subgt	r3, r3, r2
 8001828:	18ed      	addgt	r5, r5, r3
 800182a:	f04f 0900 	mov.w	r9, #0
 800182e:	341a      	adds	r4, #26
 8001830:	454d      	cmp	r5, r9
 8001832:	d11a      	bne.n	800186a <_printf_common+0xd6>
 8001834:	2000      	movs	r0, #0
 8001836:	e008      	b.n	800184a <_printf_common+0xb6>
 8001838:	2301      	movs	r3, #1
 800183a:	4652      	mov	r2, sl
 800183c:	4639      	mov	r1, r7
 800183e:	4630      	mov	r0, r6
 8001840:	47c0      	blx	r8
 8001842:	3001      	adds	r0, #1
 8001844:	d103      	bne.n	800184e <_printf_common+0xba>
 8001846:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800184a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800184e:	3501      	adds	r5, #1
 8001850:	e7c3      	b.n	80017da <_printf_common+0x46>
 8001852:	18e1      	adds	r1, r4, r3
 8001854:	1c5a      	adds	r2, r3, #1
 8001856:	2030      	movs	r0, #48	; 0x30
 8001858:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800185c:	4422      	add	r2, r4
 800185e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001862:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001866:	3302      	adds	r3, #2
 8001868:	e7c5      	b.n	80017f6 <_printf_common+0x62>
 800186a:	2301      	movs	r3, #1
 800186c:	4622      	mov	r2, r4
 800186e:	4639      	mov	r1, r7
 8001870:	4630      	mov	r0, r6
 8001872:	47c0      	blx	r8
 8001874:	3001      	adds	r0, #1
 8001876:	d0e6      	beq.n	8001846 <_printf_common+0xb2>
 8001878:	f109 0901 	add.w	r9, r9, #1
 800187c:	e7d8      	b.n	8001830 <_printf_common+0x9c>
	...

08001880 <_printf_i>:
 8001880:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001884:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8001888:	460c      	mov	r4, r1
 800188a:	7e09      	ldrb	r1, [r1, #24]
 800188c:	b085      	sub	sp, #20
 800188e:	296e      	cmp	r1, #110	; 0x6e
 8001890:	4617      	mov	r7, r2
 8001892:	4606      	mov	r6, r0
 8001894:	4698      	mov	r8, r3
 8001896:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8001898:	f000 80b3 	beq.w	8001a02 <_printf_i+0x182>
 800189c:	d822      	bhi.n	80018e4 <_printf_i+0x64>
 800189e:	2963      	cmp	r1, #99	; 0x63
 80018a0:	d036      	beq.n	8001910 <_printf_i+0x90>
 80018a2:	d80a      	bhi.n	80018ba <_printf_i+0x3a>
 80018a4:	2900      	cmp	r1, #0
 80018a6:	f000 80b9 	beq.w	8001a1c <_printf_i+0x19c>
 80018aa:	2958      	cmp	r1, #88	; 0x58
 80018ac:	f000 8083 	beq.w	80019b6 <_printf_i+0x136>
 80018b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80018b4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80018b8:	e032      	b.n	8001920 <_printf_i+0xa0>
 80018ba:	2964      	cmp	r1, #100	; 0x64
 80018bc:	d001      	beq.n	80018c2 <_printf_i+0x42>
 80018be:	2969      	cmp	r1, #105	; 0x69
 80018c0:	d1f6      	bne.n	80018b0 <_printf_i+0x30>
 80018c2:	6820      	ldr	r0, [r4, #0]
 80018c4:	6813      	ldr	r3, [r2, #0]
 80018c6:	0605      	lsls	r5, r0, #24
 80018c8:	f103 0104 	add.w	r1, r3, #4
 80018cc:	d52a      	bpl.n	8001924 <_printf_i+0xa4>
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	6011      	str	r1, [r2, #0]
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	da03      	bge.n	80018de <_printf_i+0x5e>
 80018d6:	222d      	movs	r2, #45	; 0x2d
 80018d8:	425b      	negs	r3, r3
 80018da:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80018de:	486f      	ldr	r0, [pc, #444]	; (8001a9c <_printf_i+0x21c>)
 80018e0:	220a      	movs	r2, #10
 80018e2:	e039      	b.n	8001958 <_printf_i+0xd8>
 80018e4:	2973      	cmp	r1, #115	; 0x73
 80018e6:	f000 809d 	beq.w	8001a24 <_printf_i+0x1a4>
 80018ea:	d808      	bhi.n	80018fe <_printf_i+0x7e>
 80018ec:	296f      	cmp	r1, #111	; 0x6f
 80018ee:	d020      	beq.n	8001932 <_printf_i+0xb2>
 80018f0:	2970      	cmp	r1, #112	; 0x70
 80018f2:	d1dd      	bne.n	80018b0 <_printf_i+0x30>
 80018f4:	6823      	ldr	r3, [r4, #0]
 80018f6:	f043 0320 	orr.w	r3, r3, #32
 80018fa:	6023      	str	r3, [r4, #0]
 80018fc:	e003      	b.n	8001906 <_printf_i+0x86>
 80018fe:	2975      	cmp	r1, #117	; 0x75
 8001900:	d017      	beq.n	8001932 <_printf_i+0xb2>
 8001902:	2978      	cmp	r1, #120	; 0x78
 8001904:	d1d4      	bne.n	80018b0 <_printf_i+0x30>
 8001906:	2378      	movs	r3, #120	; 0x78
 8001908:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800190c:	4864      	ldr	r0, [pc, #400]	; (8001aa0 <_printf_i+0x220>)
 800190e:	e055      	b.n	80019bc <_printf_i+0x13c>
 8001910:	6813      	ldr	r3, [r2, #0]
 8001912:	1d19      	adds	r1, r3, #4
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	6011      	str	r1, [r2, #0]
 8001918:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800191c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001920:	2301      	movs	r3, #1
 8001922:	e08c      	b.n	8001a3e <_printf_i+0x1be>
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	6011      	str	r1, [r2, #0]
 8001928:	f010 0f40 	tst.w	r0, #64	; 0x40
 800192c:	bf18      	it	ne
 800192e:	b21b      	sxthne	r3, r3
 8001930:	e7cf      	b.n	80018d2 <_printf_i+0x52>
 8001932:	6813      	ldr	r3, [r2, #0]
 8001934:	6825      	ldr	r5, [r4, #0]
 8001936:	1d18      	adds	r0, r3, #4
 8001938:	6010      	str	r0, [r2, #0]
 800193a:	0628      	lsls	r0, r5, #24
 800193c:	d501      	bpl.n	8001942 <_printf_i+0xc2>
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	e002      	b.n	8001948 <_printf_i+0xc8>
 8001942:	0668      	lsls	r0, r5, #25
 8001944:	d5fb      	bpl.n	800193e <_printf_i+0xbe>
 8001946:	881b      	ldrh	r3, [r3, #0]
 8001948:	4854      	ldr	r0, [pc, #336]	; (8001a9c <_printf_i+0x21c>)
 800194a:	296f      	cmp	r1, #111	; 0x6f
 800194c:	bf14      	ite	ne
 800194e:	220a      	movne	r2, #10
 8001950:	2208      	moveq	r2, #8
 8001952:	2100      	movs	r1, #0
 8001954:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8001958:	6865      	ldr	r5, [r4, #4]
 800195a:	60a5      	str	r5, [r4, #8]
 800195c:	2d00      	cmp	r5, #0
 800195e:	f2c0 8095 	blt.w	8001a8c <_printf_i+0x20c>
 8001962:	6821      	ldr	r1, [r4, #0]
 8001964:	f021 0104 	bic.w	r1, r1, #4
 8001968:	6021      	str	r1, [r4, #0]
 800196a:	2b00      	cmp	r3, #0
 800196c:	d13d      	bne.n	80019ea <_printf_i+0x16a>
 800196e:	2d00      	cmp	r5, #0
 8001970:	f040 808e 	bne.w	8001a90 <_printf_i+0x210>
 8001974:	4665      	mov	r5, ip
 8001976:	2a08      	cmp	r2, #8
 8001978:	d10b      	bne.n	8001992 <_printf_i+0x112>
 800197a:	6823      	ldr	r3, [r4, #0]
 800197c:	07db      	lsls	r3, r3, #31
 800197e:	d508      	bpl.n	8001992 <_printf_i+0x112>
 8001980:	6923      	ldr	r3, [r4, #16]
 8001982:	6862      	ldr	r2, [r4, #4]
 8001984:	429a      	cmp	r2, r3
 8001986:	bfde      	ittt	le
 8001988:	2330      	movle	r3, #48	; 0x30
 800198a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800198e:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8001992:	ebac 0305 	sub.w	r3, ip, r5
 8001996:	6123      	str	r3, [r4, #16]
 8001998:	f8cd 8000 	str.w	r8, [sp]
 800199c:	463b      	mov	r3, r7
 800199e:	aa03      	add	r2, sp, #12
 80019a0:	4621      	mov	r1, r4
 80019a2:	4630      	mov	r0, r6
 80019a4:	f7ff fef6 	bl	8001794 <_printf_common>
 80019a8:	3001      	adds	r0, #1
 80019aa:	d14d      	bne.n	8001a48 <_printf_i+0x1c8>
 80019ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80019b0:	b005      	add	sp, #20
 80019b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80019b6:	4839      	ldr	r0, [pc, #228]	; (8001a9c <_printf_i+0x21c>)
 80019b8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80019bc:	6813      	ldr	r3, [r2, #0]
 80019be:	6821      	ldr	r1, [r4, #0]
 80019c0:	1d1d      	adds	r5, r3, #4
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	6015      	str	r5, [r2, #0]
 80019c6:	060a      	lsls	r2, r1, #24
 80019c8:	d50b      	bpl.n	80019e2 <_printf_i+0x162>
 80019ca:	07ca      	lsls	r2, r1, #31
 80019cc:	bf44      	itt	mi
 80019ce:	f041 0120 	orrmi.w	r1, r1, #32
 80019d2:	6021      	strmi	r1, [r4, #0]
 80019d4:	b91b      	cbnz	r3, 80019de <_printf_i+0x15e>
 80019d6:	6822      	ldr	r2, [r4, #0]
 80019d8:	f022 0220 	bic.w	r2, r2, #32
 80019dc:	6022      	str	r2, [r4, #0]
 80019de:	2210      	movs	r2, #16
 80019e0:	e7b7      	b.n	8001952 <_printf_i+0xd2>
 80019e2:	064d      	lsls	r5, r1, #25
 80019e4:	bf48      	it	mi
 80019e6:	b29b      	uxthmi	r3, r3
 80019e8:	e7ef      	b.n	80019ca <_printf_i+0x14a>
 80019ea:	4665      	mov	r5, ip
 80019ec:	fbb3 f1f2 	udiv	r1, r3, r2
 80019f0:	fb02 3311 	mls	r3, r2, r1, r3
 80019f4:	5cc3      	ldrb	r3, [r0, r3]
 80019f6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80019fa:	460b      	mov	r3, r1
 80019fc:	2900      	cmp	r1, #0
 80019fe:	d1f5      	bne.n	80019ec <_printf_i+0x16c>
 8001a00:	e7b9      	b.n	8001976 <_printf_i+0xf6>
 8001a02:	6813      	ldr	r3, [r2, #0]
 8001a04:	6825      	ldr	r5, [r4, #0]
 8001a06:	6961      	ldr	r1, [r4, #20]
 8001a08:	1d18      	adds	r0, r3, #4
 8001a0a:	6010      	str	r0, [r2, #0]
 8001a0c:	0628      	lsls	r0, r5, #24
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	d501      	bpl.n	8001a16 <_printf_i+0x196>
 8001a12:	6019      	str	r1, [r3, #0]
 8001a14:	e002      	b.n	8001a1c <_printf_i+0x19c>
 8001a16:	066a      	lsls	r2, r5, #25
 8001a18:	d5fb      	bpl.n	8001a12 <_printf_i+0x192>
 8001a1a:	8019      	strh	r1, [r3, #0]
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	6123      	str	r3, [r4, #16]
 8001a20:	4665      	mov	r5, ip
 8001a22:	e7b9      	b.n	8001998 <_printf_i+0x118>
 8001a24:	6813      	ldr	r3, [r2, #0]
 8001a26:	1d19      	adds	r1, r3, #4
 8001a28:	6011      	str	r1, [r2, #0]
 8001a2a:	681d      	ldr	r5, [r3, #0]
 8001a2c:	6862      	ldr	r2, [r4, #4]
 8001a2e:	2100      	movs	r1, #0
 8001a30:	4628      	mov	r0, r5
 8001a32:	f7fe fbed 	bl	8000210 <memchr>
 8001a36:	b108      	cbz	r0, 8001a3c <_printf_i+0x1bc>
 8001a38:	1b40      	subs	r0, r0, r5
 8001a3a:	6060      	str	r0, [r4, #4]
 8001a3c:	6863      	ldr	r3, [r4, #4]
 8001a3e:	6123      	str	r3, [r4, #16]
 8001a40:	2300      	movs	r3, #0
 8001a42:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001a46:	e7a7      	b.n	8001998 <_printf_i+0x118>
 8001a48:	6923      	ldr	r3, [r4, #16]
 8001a4a:	462a      	mov	r2, r5
 8001a4c:	4639      	mov	r1, r7
 8001a4e:	4630      	mov	r0, r6
 8001a50:	47c0      	blx	r8
 8001a52:	3001      	adds	r0, #1
 8001a54:	d0aa      	beq.n	80019ac <_printf_i+0x12c>
 8001a56:	6823      	ldr	r3, [r4, #0]
 8001a58:	079b      	lsls	r3, r3, #30
 8001a5a:	d413      	bmi.n	8001a84 <_printf_i+0x204>
 8001a5c:	68e0      	ldr	r0, [r4, #12]
 8001a5e:	9b03      	ldr	r3, [sp, #12]
 8001a60:	4298      	cmp	r0, r3
 8001a62:	bfb8      	it	lt
 8001a64:	4618      	movlt	r0, r3
 8001a66:	e7a3      	b.n	80019b0 <_printf_i+0x130>
 8001a68:	2301      	movs	r3, #1
 8001a6a:	464a      	mov	r2, r9
 8001a6c:	4639      	mov	r1, r7
 8001a6e:	4630      	mov	r0, r6
 8001a70:	47c0      	blx	r8
 8001a72:	3001      	adds	r0, #1
 8001a74:	d09a      	beq.n	80019ac <_printf_i+0x12c>
 8001a76:	3501      	adds	r5, #1
 8001a78:	68e3      	ldr	r3, [r4, #12]
 8001a7a:	9a03      	ldr	r2, [sp, #12]
 8001a7c:	1a9b      	subs	r3, r3, r2
 8001a7e:	42ab      	cmp	r3, r5
 8001a80:	dcf2      	bgt.n	8001a68 <_printf_i+0x1e8>
 8001a82:	e7eb      	b.n	8001a5c <_printf_i+0x1dc>
 8001a84:	2500      	movs	r5, #0
 8001a86:	f104 0919 	add.w	r9, r4, #25
 8001a8a:	e7f5      	b.n	8001a78 <_printf_i+0x1f8>
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d1ac      	bne.n	80019ea <_printf_i+0x16a>
 8001a90:	7803      	ldrb	r3, [r0, #0]
 8001a92:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001a96:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001a9a:	e76c      	b.n	8001976 <_printf_i+0xf6>
 8001a9c:	08002109 	.word	0x08002109
 8001aa0:	0800211a 	.word	0x0800211a

08001aa4 <_sbrk_r>:
 8001aa4:	b538      	push	{r3, r4, r5, lr}
 8001aa6:	4c06      	ldr	r4, [pc, #24]	; (8001ac0 <_sbrk_r+0x1c>)
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	4605      	mov	r5, r0
 8001aac:	4608      	mov	r0, r1
 8001aae:	6023      	str	r3, [r4, #0]
 8001ab0:	f7ff fb62 	bl	8001178 <_sbrk>
 8001ab4:	1c43      	adds	r3, r0, #1
 8001ab6:	d102      	bne.n	8001abe <_sbrk_r+0x1a>
 8001ab8:	6823      	ldr	r3, [r4, #0]
 8001aba:	b103      	cbz	r3, 8001abe <_sbrk_r+0x1a>
 8001abc:	602b      	str	r3, [r5, #0]
 8001abe:	bd38      	pop	{r3, r4, r5, pc}
 8001ac0:	200000e0 	.word	0x200000e0

08001ac4 <__sread>:
 8001ac4:	b510      	push	{r4, lr}
 8001ac6:	460c      	mov	r4, r1
 8001ac8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001acc:	f000 fa96 	bl	8001ffc <_read_r>
 8001ad0:	2800      	cmp	r0, #0
 8001ad2:	bfab      	itete	ge
 8001ad4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8001ad6:	89a3      	ldrhlt	r3, [r4, #12]
 8001ad8:	181b      	addge	r3, r3, r0
 8001ada:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8001ade:	bfac      	ite	ge
 8001ae0:	6563      	strge	r3, [r4, #84]	; 0x54
 8001ae2:	81a3      	strhlt	r3, [r4, #12]
 8001ae4:	bd10      	pop	{r4, pc}

08001ae6 <__swrite>:
 8001ae6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001aea:	461f      	mov	r7, r3
 8001aec:	898b      	ldrh	r3, [r1, #12]
 8001aee:	05db      	lsls	r3, r3, #23
 8001af0:	4605      	mov	r5, r0
 8001af2:	460c      	mov	r4, r1
 8001af4:	4616      	mov	r6, r2
 8001af6:	d505      	bpl.n	8001b04 <__swrite+0x1e>
 8001af8:	2302      	movs	r3, #2
 8001afa:	2200      	movs	r2, #0
 8001afc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001b00:	f000 f9b6 	bl	8001e70 <_lseek_r>
 8001b04:	89a3      	ldrh	r3, [r4, #12]
 8001b06:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001b0a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001b0e:	81a3      	strh	r3, [r4, #12]
 8001b10:	4632      	mov	r2, r6
 8001b12:	463b      	mov	r3, r7
 8001b14:	4628      	mov	r0, r5
 8001b16:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001b1a:	f000 b869 	b.w	8001bf0 <_write_r>

08001b1e <__sseek>:
 8001b1e:	b510      	push	{r4, lr}
 8001b20:	460c      	mov	r4, r1
 8001b22:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001b26:	f000 f9a3 	bl	8001e70 <_lseek_r>
 8001b2a:	1c43      	adds	r3, r0, #1
 8001b2c:	89a3      	ldrh	r3, [r4, #12]
 8001b2e:	bf15      	itete	ne
 8001b30:	6560      	strne	r0, [r4, #84]	; 0x54
 8001b32:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8001b36:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8001b3a:	81a3      	strheq	r3, [r4, #12]
 8001b3c:	bf18      	it	ne
 8001b3e:	81a3      	strhne	r3, [r4, #12]
 8001b40:	bd10      	pop	{r4, pc}

08001b42 <__sclose>:
 8001b42:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001b46:	f000 b8d3 	b.w	8001cf0 <_close_r>
	...

08001b4c <__swbuf_r>:
 8001b4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b4e:	460e      	mov	r6, r1
 8001b50:	4614      	mov	r4, r2
 8001b52:	4605      	mov	r5, r0
 8001b54:	b118      	cbz	r0, 8001b5e <__swbuf_r+0x12>
 8001b56:	6983      	ldr	r3, [r0, #24]
 8001b58:	b90b      	cbnz	r3, 8001b5e <__swbuf_r+0x12>
 8001b5a:	f7ff fbf7 	bl	800134c <__sinit>
 8001b5e:	4b21      	ldr	r3, [pc, #132]	; (8001be4 <__swbuf_r+0x98>)
 8001b60:	429c      	cmp	r4, r3
 8001b62:	d12a      	bne.n	8001bba <__swbuf_r+0x6e>
 8001b64:	686c      	ldr	r4, [r5, #4]
 8001b66:	69a3      	ldr	r3, [r4, #24]
 8001b68:	60a3      	str	r3, [r4, #8]
 8001b6a:	89a3      	ldrh	r3, [r4, #12]
 8001b6c:	071a      	lsls	r2, r3, #28
 8001b6e:	d52e      	bpl.n	8001bce <__swbuf_r+0x82>
 8001b70:	6923      	ldr	r3, [r4, #16]
 8001b72:	b363      	cbz	r3, 8001bce <__swbuf_r+0x82>
 8001b74:	6923      	ldr	r3, [r4, #16]
 8001b76:	6820      	ldr	r0, [r4, #0]
 8001b78:	1ac0      	subs	r0, r0, r3
 8001b7a:	6963      	ldr	r3, [r4, #20]
 8001b7c:	b2f6      	uxtb	r6, r6
 8001b7e:	4283      	cmp	r3, r0
 8001b80:	4637      	mov	r7, r6
 8001b82:	dc04      	bgt.n	8001b8e <__swbuf_r+0x42>
 8001b84:	4621      	mov	r1, r4
 8001b86:	4628      	mov	r0, r5
 8001b88:	f000 f948 	bl	8001e1c <_fflush_r>
 8001b8c:	bb28      	cbnz	r0, 8001bda <__swbuf_r+0x8e>
 8001b8e:	68a3      	ldr	r3, [r4, #8]
 8001b90:	3b01      	subs	r3, #1
 8001b92:	60a3      	str	r3, [r4, #8]
 8001b94:	6823      	ldr	r3, [r4, #0]
 8001b96:	1c5a      	adds	r2, r3, #1
 8001b98:	6022      	str	r2, [r4, #0]
 8001b9a:	701e      	strb	r6, [r3, #0]
 8001b9c:	6963      	ldr	r3, [r4, #20]
 8001b9e:	3001      	adds	r0, #1
 8001ba0:	4283      	cmp	r3, r0
 8001ba2:	d004      	beq.n	8001bae <__swbuf_r+0x62>
 8001ba4:	89a3      	ldrh	r3, [r4, #12]
 8001ba6:	07db      	lsls	r3, r3, #31
 8001ba8:	d519      	bpl.n	8001bde <__swbuf_r+0x92>
 8001baa:	2e0a      	cmp	r6, #10
 8001bac:	d117      	bne.n	8001bde <__swbuf_r+0x92>
 8001bae:	4621      	mov	r1, r4
 8001bb0:	4628      	mov	r0, r5
 8001bb2:	f000 f933 	bl	8001e1c <_fflush_r>
 8001bb6:	b190      	cbz	r0, 8001bde <__swbuf_r+0x92>
 8001bb8:	e00f      	b.n	8001bda <__swbuf_r+0x8e>
 8001bba:	4b0b      	ldr	r3, [pc, #44]	; (8001be8 <__swbuf_r+0x9c>)
 8001bbc:	429c      	cmp	r4, r3
 8001bbe:	d101      	bne.n	8001bc4 <__swbuf_r+0x78>
 8001bc0:	68ac      	ldr	r4, [r5, #8]
 8001bc2:	e7d0      	b.n	8001b66 <__swbuf_r+0x1a>
 8001bc4:	4b09      	ldr	r3, [pc, #36]	; (8001bec <__swbuf_r+0xa0>)
 8001bc6:	429c      	cmp	r4, r3
 8001bc8:	bf08      	it	eq
 8001bca:	68ec      	ldreq	r4, [r5, #12]
 8001bcc:	e7cb      	b.n	8001b66 <__swbuf_r+0x1a>
 8001bce:	4621      	mov	r1, r4
 8001bd0:	4628      	mov	r0, r5
 8001bd2:	f000 f81f 	bl	8001c14 <__swsetup_r>
 8001bd6:	2800      	cmp	r0, #0
 8001bd8:	d0cc      	beq.n	8001b74 <__swbuf_r+0x28>
 8001bda:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8001bde:	4638      	mov	r0, r7
 8001be0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001be2:	bf00      	nop
 8001be4:	080020b8 	.word	0x080020b8
 8001be8:	080020d8 	.word	0x080020d8
 8001bec:	08002098 	.word	0x08002098

08001bf0 <_write_r>:
 8001bf0:	b538      	push	{r3, r4, r5, lr}
 8001bf2:	4c07      	ldr	r4, [pc, #28]	; (8001c10 <_write_r+0x20>)
 8001bf4:	4605      	mov	r5, r0
 8001bf6:	4608      	mov	r0, r1
 8001bf8:	4611      	mov	r1, r2
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	6022      	str	r2, [r4, #0]
 8001bfe:	461a      	mov	r2, r3
 8001c00:	f7ff fa69 	bl	80010d6 <_write>
 8001c04:	1c43      	adds	r3, r0, #1
 8001c06:	d102      	bne.n	8001c0e <_write_r+0x1e>
 8001c08:	6823      	ldr	r3, [r4, #0]
 8001c0a:	b103      	cbz	r3, 8001c0e <_write_r+0x1e>
 8001c0c:	602b      	str	r3, [r5, #0]
 8001c0e:	bd38      	pop	{r3, r4, r5, pc}
 8001c10:	200000e0 	.word	0x200000e0

08001c14 <__swsetup_r>:
 8001c14:	4b32      	ldr	r3, [pc, #200]	; (8001ce0 <__swsetup_r+0xcc>)
 8001c16:	b570      	push	{r4, r5, r6, lr}
 8001c18:	681d      	ldr	r5, [r3, #0]
 8001c1a:	4606      	mov	r6, r0
 8001c1c:	460c      	mov	r4, r1
 8001c1e:	b125      	cbz	r5, 8001c2a <__swsetup_r+0x16>
 8001c20:	69ab      	ldr	r3, [r5, #24]
 8001c22:	b913      	cbnz	r3, 8001c2a <__swsetup_r+0x16>
 8001c24:	4628      	mov	r0, r5
 8001c26:	f7ff fb91 	bl	800134c <__sinit>
 8001c2a:	4b2e      	ldr	r3, [pc, #184]	; (8001ce4 <__swsetup_r+0xd0>)
 8001c2c:	429c      	cmp	r4, r3
 8001c2e:	d10f      	bne.n	8001c50 <__swsetup_r+0x3c>
 8001c30:	686c      	ldr	r4, [r5, #4]
 8001c32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001c36:	b29a      	uxth	r2, r3
 8001c38:	0715      	lsls	r5, r2, #28
 8001c3a:	d42c      	bmi.n	8001c96 <__swsetup_r+0x82>
 8001c3c:	06d0      	lsls	r0, r2, #27
 8001c3e:	d411      	bmi.n	8001c64 <__swsetup_r+0x50>
 8001c40:	2209      	movs	r2, #9
 8001c42:	6032      	str	r2, [r6, #0]
 8001c44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001c48:	81a3      	strh	r3, [r4, #12]
 8001c4a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001c4e:	e03e      	b.n	8001cce <__swsetup_r+0xba>
 8001c50:	4b25      	ldr	r3, [pc, #148]	; (8001ce8 <__swsetup_r+0xd4>)
 8001c52:	429c      	cmp	r4, r3
 8001c54:	d101      	bne.n	8001c5a <__swsetup_r+0x46>
 8001c56:	68ac      	ldr	r4, [r5, #8]
 8001c58:	e7eb      	b.n	8001c32 <__swsetup_r+0x1e>
 8001c5a:	4b24      	ldr	r3, [pc, #144]	; (8001cec <__swsetup_r+0xd8>)
 8001c5c:	429c      	cmp	r4, r3
 8001c5e:	bf08      	it	eq
 8001c60:	68ec      	ldreq	r4, [r5, #12]
 8001c62:	e7e6      	b.n	8001c32 <__swsetup_r+0x1e>
 8001c64:	0751      	lsls	r1, r2, #29
 8001c66:	d512      	bpl.n	8001c8e <__swsetup_r+0x7a>
 8001c68:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001c6a:	b141      	cbz	r1, 8001c7e <__swsetup_r+0x6a>
 8001c6c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001c70:	4299      	cmp	r1, r3
 8001c72:	d002      	beq.n	8001c7a <__swsetup_r+0x66>
 8001c74:	4630      	mov	r0, r6
 8001c76:	f000 f973 	bl	8001f60 <_free_r>
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	6363      	str	r3, [r4, #52]	; 0x34
 8001c7e:	89a3      	ldrh	r3, [r4, #12]
 8001c80:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8001c84:	81a3      	strh	r3, [r4, #12]
 8001c86:	2300      	movs	r3, #0
 8001c88:	6063      	str	r3, [r4, #4]
 8001c8a:	6923      	ldr	r3, [r4, #16]
 8001c8c:	6023      	str	r3, [r4, #0]
 8001c8e:	89a3      	ldrh	r3, [r4, #12]
 8001c90:	f043 0308 	orr.w	r3, r3, #8
 8001c94:	81a3      	strh	r3, [r4, #12]
 8001c96:	6923      	ldr	r3, [r4, #16]
 8001c98:	b94b      	cbnz	r3, 8001cae <__swsetup_r+0x9a>
 8001c9a:	89a3      	ldrh	r3, [r4, #12]
 8001c9c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8001ca0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001ca4:	d003      	beq.n	8001cae <__swsetup_r+0x9a>
 8001ca6:	4621      	mov	r1, r4
 8001ca8:	4630      	mov	r0, r6
 8001caa:	f000 f917 	bl	8001edc <__smakebuf_r>
 8001cae:	89a2      	ldrh	r2, [r4, #12]
 8001cb0:	f012 0301 	ands.w	r3, r2, #1
 8001cb4:	d00c      	beq.n	8001cd0 <__swsetup_r+0xbc>
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	60a3      	str	r3, [r4, #8]
 8001cba:	6963      	ldr	r3, [r4, #20]
 8001cbc:	425b      	negs	r3, r3
 8001cbe:	61a3      	str	r3, [r4, #24]
 8001cc0:	6923      	ldr	r3, [r4, #16]
 8001cc2:	b953      	cbnz	r3, 8001cda <__swsetup_r+0xc6>
 8001cc4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001cc8:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8001ccc:	d1ba      	bne.n	8001c44 <__swsetup_r+0x30>
 8001cce:	bd70      	pop	{r4, r5, r6, pc}
 8001cd0:	0792      	lsls	r2, r2, #30
 8001cd2:	bf58      	it	pl
 8001cd4:	6963      	ldrpl	r3, [r4, #20]
 8001cd6:	60a3      	str	r3, [r4, #8]
 8001cd8:	e7f2      	b.n	8001cc0 <__swsetup_r+0xac>
 8001cda:	2000      	movs	r0, #0
 8001cdc:	e7f7      	b.n	8001cce <__swsetup_r+0xba>
 8001cde:	bf00      	nop
 8001ce0:	20000030 	.word	0x20000030
 8001ce4:	080020b8 	.word	0x080020b8
 8001ce8:	080020d8 	.word	0x080020d8
 8001cec:	08002098 	.word	0x08002098

08001cf0 <_close_r>:
 8001cf0:	b538      	push	{r3, r4, r5, lr}
 8001cf2:	4c06      	ldr	r4, [pc, #24]	; (8001d0c <_close_r+0x1c>)
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	4605      	mov	r5, r0
 8001cf8:	4608      	mov	r0, r1
 8001cfa:	6023      	str	r3, [r4, #0]
 8001cfc:	f7ff fa07 	bl	800110e <_close>
 8001d00:	1c43      	adds	r3, r0, #1
 8001d02:	d102      	bne.n	8001d0a <_close_r+0x1a>
 8001d04:	6823      	ldr	r3, [r4, #0]
 8001d06:	b103      	cbz	r3, 8001d0a <_close_r+0x1a>
 8001d08:	602b      	str	r3, [r5, #0]
 8001d0a:	bd38      	pop	{r3, r4, r5, pc}
 8001d0c:	200000e0 	.word	0x200000e0

08001d10 <__sflush_r>:
 8001d10:	898a      	ldrh	r2, [r1, #12]
 8001d12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001d16:	4605      	mov	r5, r0
 8001d18:	0710      	lsls	r0, r2, #28
 8001d1a:	460c      	mov	r4, r1
 8001d1c:	d458      	bmi.n	8001dd0 <__sflush_r+0xc0>
 8001d1e:	684b      	ldr	r3, [r1, #4]
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	dc05      	bgt.n	8001d30 <__sflush_r+0x20>
 8001d24:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	dc02      	bgt.n	8001d30 <__sflush_r+0x20>
 8001d2a:	2000      	movs	r0, #0
 8001d2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001d30:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001d32:	2e00      	cmp	r6, #0
 8001d34:	d0f9      	beq.n	8001d2a <__sflush_r+0x1a>
 8001d36:	2300      	movs	r3, #0
 8001d38:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8001d3c:	682f      	ldr	r7, [r5, #0]
 8001d3e:	6a21      	ldr	r1, [r4, #32]
 8001d40:	602b      	str	r3, [r5, #0]
 8001d42:	d032      	beq.n	8001daa <__sflush_r+0x9a>
 8001d44:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001d46:	89a3      	ldrh	r3, [r4, #12]
 8001d48:	075a      	lsls	r2, r3, #29
 8001d4a:	d505      	bpl.n	8001d58 <__sflush_r+0x48>
 8001d4c:	6863      	ldr	r3, [r4, #4]
 8001d4e:	1ac0      	subs	r0, r0, r3
 8001d50:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001d52:	b10b      	cbz	r3, 8001d58 <__sflush_r+0x48>
 8001d54:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001d56:	1ac0      	subs	r0, r0, r3
 8001d58:	2300      	movs	r3, #0
 8001d5a:	4602      	mov	r2, r0
 8001d5c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001d5e:	6a21      	ldr	r1, [r4, #32]
 8001d60:	4628      	mov	r0, r5
 8001d62:	47b0      	blx	r6
 8001d64:	1c43      	adds	r3, r0, #1
 8001d66:	89a3      	ldrh	r3, [r4, #12]
 8001d68:	d106      	bne.n	8001d78 <__sflush_r+0x68>
 8001d6a:	6829      	ldr	r1, [r5, #0]
 8001d6c:	291d      	cmp	r1, #29
 8001d6e:	d848      	bhi.n	8001e02 <__sflush_r+0xf2>
 8001d70:	4a29      	ldr	r2, [pc, #164]	; (8001e18 <__sflush_r+0x108>)
 8001d72:	40ca      	lsrs	r2, r1
 8001d74:	07d6      	lsls	r6, r2, #31
 8001d76:	d544      	bpl.n	8001e02 <__sflush_r+0xf2>
 8001d78:	2200      	movs	r2, #0
 8001d7a:	6062      	str	r2, [r4, #4]
 8001d7c:	04d9      	lsls	r1, r3, #19
 8001d7e:	6922      	ldr	r2, [r4, #16]
 8001d80:	6022      	str	r2, [r4, #0]
 8001d82:	d504      	bpl.n	8001d8e <__sflush_r+0x7e>
 8001d84:	1c42      	adds	r2, r0, #1
 8001d86:	d101      	bne.n	8001d8c <__sflush_r+0x7c>
 8001d88:	682b      	ldr	r3, [r5, #0]
 8001d8a:	b903      	cbnz	r3, 8001d8e <__sflush_r+0x7e>
 8001d8c:	6560      	str	r0, [r4, #84]	; 0x54
 8001d8e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001d90:	602f      	str	r7, [r5, #0]
 8001d92:	2900      	cmp	r1, #0
 8001d94:	d0c9      	beq.n	8001d2a <__sflush_r+0x1a>
 8001d96:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001d9a:	4299      	cmp	r1, r3
 8001d9c:	d002      	beq.n	8001da4 <__sflush_r+0x94>
 8001d9e:	4628      	mov	r0, r5
 8001da0:	f000 f8de 	bl	8001f60 <_free_r>
 8001da4:	2000      	movs	r0, #0
 8001da6:	6360      	str	r0, [r4, #52]	; 0x34
 8001da8:	e7c0      	b.n	8001d2c <__sflush_r+0x1c>
 8001daa:	2301      	movs	r3, #1
 8001dac:	4628      	mov	r0, r5
 8001dae:	47b0      	blx	r6
 8001db0:	1c41      	adds	r1, r0, #1
 8001db2:	d1c8      	bne.n	8001d46 <__sflush_r+0x36>
 8001db4:	682b      	ldr	r3, [r5, #0]
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d0c5      	beq.n	8001d46 <__sflush_r+0x36>
 8001dba:	2b1d      	cmp	r3, #29
 8001dbc:	d001      	beq.n	8001dc2 <__sflush_r+0xb2>
 8001dbe:	2b16      	cmp	r3, #22
 8001dc0:	d101      	bne.n	8001dc6 <__sflush_r+0xb6>
 8001dc2:	602f      	str	r7, [r5, #0]
 8001dc4:	e7b1      	b.n	8001d2a <__sflush_r+0x1a>
 8001dc6:	89a3      	ldrh	r3, [r4, #12]
 8001dc8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001dcc:	81a3      	strh	r3, [r4, #12]
 8001dce:	e7ad      	b.n	8001d2c <__sflush_r+0x1c>
 8001dd0:	690f      	ldr	r7, [r1, #16]
 8001dd2:	2f00      	cmp	r7, #0
 8001dd4:	d0a9      	beq.n	8001d2a <__sflush_r+0x1a>
 8001dd6:	0793      	lsls	r3, r2, #30
 8001dd8:	680e      	ldr	r6, [r1, #0]
 8001dda:	bf08      	it	eq
 8001ddc:	694b      	ldreq	r3, [r1, #20]
 8001dde:	600f      	str	r7, [r1, #0]
 8001de0:	bf18      	it	ne
 8001de2:	2300      	movne	r3, #0
 8001de4:	eba6 0807 	sub.w	r8, r6, r7
 8001de8:	608b      	str	r3, [r1, #8]
 8001dea:	f1b8 0f00 	cmp.w	r8, #0
 8001dee:	dd9c      	ble.n	8001d2a <__sflush_r+0x1a>
 8001df0:	4643      	mov	r3, r8
 8001df2:	463a      	mov	r2, r7
 8001df4:	6a21      	ldr	r1, [r4, #32]
 8001df6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8001df8:	4628      	mov	r0, r5
 8001dfa:	47b0      	blx	r6
 8001dfc:	2800      	cmp	r0, #0
 8001dfe:	dc06      	bgt.n	8001e0e <__sflush_r+0xfe>
 8001e00:	89a3      	ldrh	r3, [r4, #12]
 8001e02:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001e06:	81a3      	strh	r3, [r4, #12]
 8001e08:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001e0c:	e78e      	b.n	8001d2c <__sflush_r+0x1c>
 8001e0e:	4407      	add	r7, r0
 8001e10:	eba8 0800 	sub.w	r8, r8, r0
 8001e14:	e7e9      	b.n	8001dea <__sflush_r+0xda>
 8001e16:	bf00      	nop
 8001e18:	20400001 	.word	0x20400001

08001e1c <_fflush_r>:
 8001e1c:	b538      	push	{r3, r4, r5, lr}
 8001e1e:	690b      	ldr	r3, [r1, #16]
 8001e20:	4605      	mov	r5, r0
 8001e22:	460c      	mov	r4, r1
 8001e24:	b1db      	cbz	r3, 8001e5e <_fflush_r+0x42>
 8001e26:	b118      	cbz	r0, 8001e30 <_fflush_r+0x14>
 8001e28:	6983      	ldr	r3, [r0, #24]
 8001e2a:	b90b      	cbnz	r3, 8001e30 <_fflush_r+0x14>
 8001e2c:	f7ff fa8e 	bl	800134c <__sinit>
 8001e30:	4b0c      	ldr	r3, [pc, #48]	; (8001e64 <_fflush_r+0x48>)
 8001e32:	429c      	cmp	r4, r3
 8001e34:	d109      	bne.n	8001e4a <_fflush_r+0x2e>
 8001e36:	686c      	ldr	r4, [r5, #4]
 8001e38:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001e3c:	b17b      	cbz	r3, 8001e5e <_fflush_r+0x42>
 8001e3e:	4621      	mov	r1, r4
 8001e40:	4628      	mov	r0, r5
 8001e42:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001e46:	f7ff bf63 	b.w	8001d10 <__sflush_r>
 8001e4a:	4b07      	ldr	r3, [pc, #28]	; (8001e68 <_fflush_r+0x4c>)
 8001e4c:	429c      	cmp	r4, r3
 8001e4e:	d101      	bne.n	8001e54 <_fflush_r+0x38>
 8001e50:	68ac      	ldr	r4, [r5, #8]
 8001e52:	e7f1      	b.n	8001e38 <_fflush_r+0x1c>
 8001e54:	4b05      	ldr	r3, [pc, #20]	; (8001e6c <_fflush_r+0x50>)
 8001e56:	429c      	cmp	r4, r3
 8001e58:	bf08      	it	eq
 8001e5a:	68ec      	ldreq	r4, [r5, #12]
 8001e5c:	e7ec      	b.n	8001e38 <_fflush_r+0x1c>
 8001e5e:	2000      	movs	r0, #0
 8001e60:	bd38      	pop	{r3, r4, r5, pc}
 8001e62:	bf00      	nop
 8001e64:	080020b8 	.word	0x080020b8
 8001e68:	080020d8 	.word	0x080020d8
 8001e6c:	08002098 	.word	0x08002098

08001e70 <_lseek_r>:
 8001e70:	b538      	push	{r3, r4, r5, lr}
 8001e72:	4c07      	ldr	r4, [pc, #28]	; (8001e90 <_lseek_r+0x20>)
 8001e74:	4605      	mov	r5, r0
 8001e76:	4608      	mov	r0, r1
 8001e78:	4611      	mov	r1, r2
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	6022      	str	r2, [r4, #0]
 8001e7e:	461a      	mov	r2, r3
 8001e80:	f7ff f96c 	bl	800115c <_lseek>
 8001e84:	1c43      	adds	r3, r0, #1
 8001e86:	d102      	bne.n	8001e8e <_lseek_r+0x1e>
 8001e88:	6823      	ldr	r3, [r4, #0]
 8001e8a:	b103      	cbz	r3, 8001e8e <_lseek_r+0x1e>
 8001e8c:	602b      	str	r3, [r5, #0]
 8001e8e:	bd38      	pop	{r3, r4, r5, pc}
 8001e90:	200000e0 	.word	0x200000e0

08001e94 <__swhatbuf_r>:
 8001e94:	b570      	push	{r4, r5, r6, lr}
 8001e96:	460e      	mov	r6, r1
 8001e98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001e9c:	2900      	cmp	r1, #0
 8001e9e:	b096      	sub	sp, #88	; 0x58
 8001ea0:	4614      	mov	r4, r2
 8001ea2:	461d      	mov	r5, r3
 8001ea4:	da07      	bge.n	8001eb6 <__swhatbuf_r+0x22>
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	602b      	str	r3, [r5, #0]
 8001eaa:	89b3      	ldrh	r3, [r6, #12]
 8001eac:	061a      	lsls	r2, r3, #24
 8001eae:	d410      	bmi.n	8001ed2 <__swhatbuf_r+0x3e>
 8001eb0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001eb4:	e00e      	b.n	8001ed4 <__swhatbuf_r+0x40>
 8001eb6:	466a      	mov	r2, sp
 8001eb8:	f000 f8b2 	bl	8002020 <_fstat_r>
 8001ebc:	2800      	cmp	r0, #0
 8001ebe:	dbf2      	blt.n	8001ea6 <__swhatbuf_r+0x12>
 8001ec0:	9a01      	ldr	r2, [sp, #4]
 8001ec2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8001ec6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8001eca:	425a      	negs	r2, r3
 8001ecc:	415a      	adcs	r2, r3
 8001ece:	602a      	str	r2, [r5, #0]
 8001ed0:	e7ee      	b.n	8001eb0 <__swhatbuf_r+0x1c>
 8001ed2:	2340      	movs	r3, #64	; 0x40
 8001ed4:	2000      	movs	r0, #0
 8001ed6:	6023      	str	r3, [r4, #0]
 8001ed8:	b016      	add	sp, #88	; 0x58
 8001eda:	bd70      	pop	{r4, r5, r6, pc}

08001edc <__smakebuf_r>:
 8001edc:	898b      	ldrh	r3, [r1, #12]
 8001ede:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001ee0:	079d      	lsls	r5, r3, #30
 8001ee2:	4606      	mov	r6, r0
 8001ee4:	460c      	mov	r4, r1
 8001ee6:	d507      	bpl.n	8001ef8 <__smakebuf_r+0x1c>
 8001ee8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8001eec:	6023      	str	r3, [r4, #0]
 8001eee:	6123      	str	r3, [r4, #16]
 8001ef0:	2301      	movs	r3, #1
 8001ef2:	6163      	str	r3, [r4, #20]
 8001ef4:	b002      	add	sp, #8
 8001ef6:	bd70      	pop	{r4, r5, r6, pc}
 8001ef8:	ab01      	add	r3, sp, #4
 8001efa:	466a      	mov	r2, sp
 8001efc:	f7ff ffca 	bl	8001e94 <__swhatbuf_r>
 8001f00:	9900      	ldr	r1, [sp, #0]
 8001f02:	4605      	mov	r5, r0
 8001f04:	4630      	mov	r0, r6
 8001f06:	f7ff faab 	bl	8001460 <_malloc_r>
 8001f0a:	b948      	cbnz	r0, 8001f20 <__smakebuf_r+0x44>
 8001f0c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001f10:	059a      	lsls	r2, r3, #22
 8001f12:	d4ef      	bmi.n	8001ef4 <__smakebuf_r+0x18>
 8001f14:	f023 0303 	bic.w	r3, r3, #3
 8001f18:	f043 0302 	orr.w	r3, r3, #2
 8001f1c:	81a3      	strh	r3, [r4, #12]
 8001f1e:	e7e3      	b.n	8001ee8 <__smakebuf_r+0xc>
 8001f20:	4b0d      	ldr	r3, [pc, #52]	; (8001f58 <__smakebuf_r+0x7c>)
 8001f22:	62b3      	str	r3, [r6, #40]	; 0x28
 8001f24:	89a3      	ldrh	r3, [r4, #12]
 8001f26:	6020      	str	r0, [r4, #0]
 8001f28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f2c:	81a3      	strh	r3, [r4, #12]
 8001f2e:	9b00      	ldr	r3, [sp, #0]
 8001f30:	6163      	str	r3, [r4, #20]
 8001f32:	9b01      	ldr	r3, [sp, #4]
 8001f34:	6120      	str	r0, [r4, #16]
 8001f36:	b15b      	cbz	r3, 8001f50 <__smakebuf_r+0x74>
 8001f38:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001f3c:	4630      	mov	r0, r6
 8001f3e:	f000 f881 	bl	8002044 <_isatty_r>
 8001f42:	b128      	cbz	r0, 8001f50 <__smakebuf_r+0x74>
 8001f44:	89a3      	ldrh	r3, [r4, #12]
 8001f46:	f023 0303 	bic.w	r3, r3, #3
 8001f4a:	f043 0301 	orr.w	r3, r3, #1
 8001f4e:	81a3      	strh	r3, [r4, #12]
 8001f50:	89a3      	ldrh	r3, [r4, #12]
 8001f52:	431d      	orrs	r5, r3
 8001f54:	81a5      	strh	r5, [r4, #12]
 8001f56:	e7cd      	b.n	8001ef4 <__smakebuf_r+0x18>
 8001f58:	08001315 	.word	0x08001315

08001f5c <__malloc_lock>:
 8001f5c:	4770      	bx	lr

08001f5e <__malloc_unlock>:
 8001f5e:	4770      	bx	lr

08001f60 <_free_r>:
 8001f60:	b538      	push	{r3, r4, r5, lr}
 8001f62:	4605      	mov	r5, r0
 8001f64:	2900      	cmp	r1, #0
 8001f66:	d045      	beq.n	8001ff4 <_free_r+0x94>
 8001f68:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001f6c:	1f0c      	subs	r4, r1, #4
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	bfb8      	it	lt
 8001f72:	18e4      	addlt	r4, r4, r3
 8001f74:	f7ff fff2 	bl	8001f5c <__malloc_lock>
 8001f78:	4a1f      	ldr	r2, [pc, #124]	; (8001ff8 <_free_r+0x98>)
 8001f7a:	6813      	ldr	r3, [r2, #0]
 8001f7c:	4610      	mov	r0, r2
 8001f7e:	b933      	cbnz	r3, 8001f8e <_free_r+0x2e>
 8001f80:	6063      	str	r3, [r4, #4]
 8001f82:	6014      	str	r4, [r2, #0]
 8001f84:	4628      	mov	r0, r5
 8001f86:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001f8a:	f7ff bfe8 	b.w	8001f5e <__malloc_unlock>
 8001f8e:	42a3      	cmp	r3, r4
 8001f90:	d90c      	bls.n	8001fac <_free_r+0x4c>
 8001f92:	6821      	ldr	r1, [r4, #0]
 8001f94:	1862      	adds	r2, r4, r1
 8001f96:	4293      	cmp	r3, r2
 8001f98:	bf04      	itt	eq
 8001f9a:	681a      	ldreq	r2, [r3, #0]
 8001f9c:	685b      	ldreq	r3, [r3, #4]
 8001f9e:	6063      	str	r3, [r4, #4]
 8001fa0:	bf04      	itt	eq
 8001fa2:	1852      	addeq	r2, r2, r1
 8001fa4:	6022      	streq	r2, [r4, #0]
 8001fa6:	6004      	str	r4, [r0, #0]
 8001fa8:	e7ec      	b.n	8001f84 <_free_r+0x24>
 8001faa:	4613      	mov	r3, r2
 8001fac:	685a      	ldr	r2, [r3, #4]
 8001fae:	b10a      	cbz	r2, 8001fb4 <_free_r+0x54>
 8001fb0:	42a2      	cmp	r2, r4
 8001fb2:	d9fa      	bls.n	8001faa <_free_r+0x4a>
 8001fb4:	6819      	ldr	r1, [r3, #0]
 8001fb6:	1858      	adds	r0, r3, r1
 8001fb8:	42a0      	cmp	r0, r4
 8001fba:	d10b      	bne.n	8001fd4 <_free_r+0x74>
 8001fbc:	6820      	ldr	r0, [r4, #0]
 8001fbe:	4401      	add	r1, r0
 8001fc0:	1858      	adds	r0, r3, r1
 8001fc2:	4282      	cmp	r2, r0
 8001fc4:	6019      	str	r1, [r3, #0]
 8001fc6:	d1dd      	bne.n	8001f84 <_free_r+0x24>
 8001fc8:	6810      	ldr	r0, [r2, #0]
 8001fca:	6852      	ldr	r2, [r2, #4]
 8001fcc:	605a      	str	r2, [r3, #4]
 8001fce:	4401      	add	r1, r0
 8001fd0:	6019      	str	r1, [r3, #0]
 8001fd2:	e7d7      	b.n	8001f84 <_free_r+0x24>
 8001fd4:	d902      	bls.n	8001fdc <_free_r+0x7c>
 8001fd6:	230c      	movs	r3, #12
 8001fd8:	602b      	str	r3, [r5, #0]
 8001fda:	e7d3      	b.n	8001f84 <_free_r+0x24>
 8001fdc:	6820      	ldr	r0, [r4, #0]
 8001fde:	1821      	adds	r1, r4, r0
 8001fe0:	428a      	cmp	r2, r1
 8001fe2:	bf04      	itt	eq
 8001fe4:	6811      	ldreq	r1, [r2, #0]
 8001fe6:	6852      	ldreq	r2, [r2, #4]
 8001fe8:	6062      	str	r2, [r4, #4]
 8001fea:	bf04      	itt	eq
 8001fec:	1809      	addeq	r1, r1, r0
 8001fee:	6021      	streq	r1, [r4, #0]
 8001ff0:	605c      	str	r4, [r3, #4]
 8001ff2:	e7c7      	b.n	8001f84 <_free_r+0x24>
 8001ff4:	bd38      	pop	{r3, r4, r5, pc}
 8001ff6:	bf00      	nop
 8001ff8:	200000b4 	.word	0x200000b4

08001ffc <_read_r>:
 8001ffc:	b538      	push	{r3, r4, r5, lr}
 8001ffe:	4c07      	ldr	r4, [pc, #28]	; (800201c <_read_r+0x20>)
 8002000:	4605      	mov	r5, r0
 8002002:	4608      	mov	r0, r1
 8002004:	4611      	mov	r1, r2
 8002006:	2200      	movs	r2, #0
 8002008:	6022      	str	r2, [r4, #0]
 800200a:	461a      	mov	r2, r3
 800200c:	f7ff f846 	bl	800109c <_read>
 8002010:	1c43      	adds	r3, r0, #1
 8002012:	d102      	bne.n	800201a <_read_r+0x1e>
 8002014:	6823      	ldr	r3, [r4, #0]
 8002016:	b103      	cbz	r3, 800201a <_read_r+0x1e>
 8002018:	602b      	str	r3, [r5, #0]
 800201a:	bd38      	pop	{r3, r4, r5, pc}
 800201c:	200000e0 	.word	0x200000e0

08002020 <_fstat_r>:
 8002020:	b538      	push	{r3, r4, r5, lr}
 8002022:	4c07      	ldr	r4, [pc, #28]	; (8002040 <_fstat_r+0x20>)
 8002024:	2300      	movs	r3, #0
 8002026:	4605      	mov	r5, r0
 8002028:	4608      	mov	r0, r1
 800202a:	4611      	mov	r1, r2
 800202c:	6023      	str	r3, [r4, #0]
 800202e:	f7ff f87a 	bl	8001126 <_fstat>
 8002032:	1c43      	adds	r3, r0, #1
 8002034:	d102      	bne.n	800203c <_fstat_r+0x1c>
 8002036:	6823      	ldr	r3, [r4, #0]
 8002038:	b103      	cbz	r3, 800203c <_fstat_r+0x1c>
 800203a:	602b      	str	r3, [r5, #0]
 800203c:	bd38      	pop	{r3, r4, r5, pc}
 800203e:	bf00      	nop
 8002040:	200000e0 	.word	0x200000e0

08002044 <_isatty_r>:
 8002044:	b538      	push	{r3, r4, r5, lr}
 8002046:	4c06      	ldr	r4, [pc, #24]	; (8002060 <_isatty_r+0x1c>)
 8002048:	2300      	movs	r3, #0
 800204a:	4605      	mov	r5, r0
 800204c:	4608      	mov	r0, r1
 800204e:	6023      	str	r3, [r4, #0]
 8002050:	f7ff f879 	bl	8001146 <_isatty>
 8002054:	1c43      	adds	r3, r0, #1
 8002056:	d102      	bne.n	800205e <_isatty_r+0x1a>
 8002058:	6823      	ldr	r3, [r4, #0]
 800205a:	b103      	cbz	r3, 800205e <_isatty_r+0x1a>
 800205c:	602b      	str	r3, [r5, #0]
 800205e:	bd38      	pop	{r3, r4, r5, pc}
 8002060:	200000e0 	.word	0x200000e0

08002064 <_init>:
 8002064:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002066:	bf00      	nop
 8002068:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800206a:	bc08      	pop	{r3}
 800206c:	469e      	mov	lr, r3
 800206e:	4770      	bx	lr

08002070 <_fini>:
 8002070:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002072:	bf00      	nop
 8002074:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002076:	bc08      	pop	{r3}
 8002078:	469e      	mov	lr, r3
 800207a:	4770      	bx	lr
