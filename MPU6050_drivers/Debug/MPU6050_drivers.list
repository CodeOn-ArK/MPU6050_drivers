
MPU6050_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000c04  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000dc8  08000dc8  00020030  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000dc8  08000dc8  00020030  2**0
                  CONTENTS
  4 .ARM          00000000  08000dc8  08000dc8  00020030  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000dc8  08000dc8  00020030  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000dc8  08000dc8  00010dc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000dcc  08000dcc  00010dcc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000030  20000000  08000dd0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000040  20000030  08000e00  00020030  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000070  08000e00  00020070  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020030  2**0
                  CONTENTS, READONLY
 12 .debug_info   00002760  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000005d1  00000000  00000000  000227c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000001a8  00000000  00000000  00022d98  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000170  00000000  00000000  00022f40  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00002738  00000000  00000000  000230b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000015c9  00000000  00000000  000257e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0000ab6b  00000000  00000000  00026db1  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0003191c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000644  00000000  00000000  00031998  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000030 	.word	0x20000030
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08000db0 	.word	0x08000db0

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000034 	.word	0x20000034
 8000200:	08000db0 	.word	0x08000db0

08000204 <GPIO_PeriClkCntrl>:
 * @return  : void
 *
 * @Note	: none
 */
void GPIO_PeriClkCntrl(GPIO_regdef_t *pGPIOx, uint8_t En_Di)
{
 8000204:	b480      	push	{r7}
 8000206:	b083      	sub	sp, #12
 8000208:	af00      	add	r7, sp, #0
 800020a:	6078      	str	r0, [r7, #4]
 800020c:	460b      	mov	r3, r1
 800020e:	70fb      	strb	r3, [r7, #3]
	if(En_Di == ENABLE)
 8000210:	78fb      	ldrb	r3, [r7, #3]
 8000212:	2b01      	cmp	r3, #1
 8000214:	d156      	bne.n	80002c4 <GPIO_PeriClkCntrl+0xc0>
	{
		if(pGPIOx == GPIOA)
 8000216:	687b      	ldr	r3, [r7, #4]
 8000218:	4a5a      	ldr	r2, [pc, #360]	; (8000384 <GPIO_PeriClkCntrl+0x180>)
 800021a:	4293      	cmp	r3, r2
 800021c:	d106      	bne.n	800022c <GPIO_PeriClkCntrl+0x28>
		{
			GPIOA_CLK_EN();
 800021e:	4b5a      	ldr	r3, [pc, #360]	; (8000388 <GPIO_PeriClkCntrl+0x184>)
 8000220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000222:	4a59      	ldr	r2, [pc, #356]	; (8000388 <GPIO_PeriClkCntrl+0x184>)
 8000224:	f043 0301 	orr.w	r3, r3, #1
 8000228:	6313      	str	r3, [r2, #48]	; 0x30
 800022a:	e04b      	b.n	80002c4 <GPIO_PeriClkCntrl+0xc0>
		}
		else if(pGPIOx == GPIOB)
 800022c:	687b      	ldr	r3, [r7, #4]
 800022e:	4a57      	ldr	r2, [pc, #348]	; (800038c <GPIO_PeriClkCntrl+0x188>)
 8000230:	4293      	cmp	r3, r2
 8000232:	d106      	bne.n	8000242 <GPIO_PeriClkCntrl+0x3e>
		{
			GPIOB_CLK_EN();
 8000234:	4b54      	ldr	r3, [pc, #336]	; (8000388 <GPIO_PeriClkCntrl+0x184>)
 8000236:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000238:	4a53      	ldr	r2, [pc, #332]	; (8000388 <GPIO_PeriClkCntrl+0x184>)
 800023a:	f043 0302 	orr.w	r3, r3, #2
 800023e:	6313      	str	r3, [r2, #48]	; 0x30
 8000240:	e040      	b.n	80002c4 <GPIO_PeriClkCntrl+0xc0>
		}
		else if(pGPIOx == GPIOC)
 8000242:	687b      	ldr	r3, [r7, #4]
 8000244:	4a52      	ldr	r2, [pc, #328]	; (8000390 <GPIO_PeriClkCntrl+0x18c>)
 8000246:	4293      	cmp	r3, r2
 8000248:	d106      	bne.n	8000258 <GPIO_PeriClkCntrl+0x54>
		{
			GPIOC_CLK_EN();
 800024a:	4b4f      	ldr	r3, [pc, #316]	; (8000388 <GPIO_PeriClkCntrl+0x184>)
 800024c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800024e:	4a4e      	ldr	r2, [pc, #312]	; (8000388 <GPIO_PeriClkCntrl+0x184>)
 8000250:	f043 0304 	orr.w	r3, r3, #4
 8000254:	6313      	str	r3, [r2, #48]	; 0x30
 8000256:	e035      	b.n	80002c4 <GPIO_PeriClkCntrl+0xc0>
		}
		else if(pGPIOx == GPIOD)
 8000258:	687b      	ldr	r3, [r7, #4]
 800025a:	4a4e      	ldr	r2, [pc, #312]	; (8000394 <GPIO_PeriClkCntrl+0x190>)
 800025c:	4293      	cmp	r3, r2
 800025e:	d106      	bne.n	800026e <GPIO_PeriClkCntrl+0x6a>
		{
			GPIOD_CLK_EN();
 8000260:	4b49      	ldr	r3, [pc, #292]	; (8000388 <GPIO_PeriClkCntrl+0x184>)
 8000262:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000264:	4a48      	ldr	r2, [pc, #288]	; (8000388 <GPIO_PeriClkCntrl+0x184>)
 8000266:	f043 0308 	orr.w	r3, r3, #8
 800026a:	6313      	str	r3, [r2, #48]	; 0x30
 800026c:	e02a      	b.n	80002c4 <GPIO_PeriClkCntrl+0xc0>
		}
		else if(pGPIOx == GPIOE)
 800026e:	687b      	ldr	r3, [r7, #4]
 8000270:	4a49      	ldr	r2, [pc, #292]	; (8000398 <GPIO_PeriClkCntrl+0x194>)
 8000272:	4293      	cmp	r3, r2
 8000274:	d106      	bne.n	8000284 <GPIO_PeriClkCntrl+0x80>
		{
			GPIOE_CLK_EN();
 8000276:	4b44      	ldr	r3, [pc, #272]	; (8000388 <GPIO_PeriClkCntrl+0x184>)
 8000278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800027a:	4a43      	ldr	r2, [pc, #268]	; (8000388 <GPIO_PeriClkCntrl+0x184>)
 800027c:	f043 0310 	orr.w	r3, r3, #16
 8000280:	6313      	str	r3, [r2, #48]	; 0x30
 8000282:	e01f      	b.n	80002c4 <GPIO_PeriClkCntrl+0xc0>
		}
		else if(pGPIOx == GPIOF)
 8000284:	687b      	ldr	r3, [r7, #4]
 8000286:	4a45      	ldr	r2, [pc, #276]	; (800039c <GPIO_PeriClkCntrl+0x198>)
 8000288:	4293      	cmp	r3, r2
 800028a:	d106      	bne.n	800029a <GPIO_PeriClkCntrl+0x96>
		{
			GPIOF_CLK_EN();
 800028c:	4b3e      	ldr	r3, [pc, #248]	; (8000388 <GPIO_PeriClkCntrl+0x184>)
 800028e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000290:	4a3d      	ldr	r2, [pc, #244]	; (8000388 <GPIO_PeriClkCntrl+0x184>)
 8000292:	f043 0320 	orr.w	r3, r3, #32
 8000296:	6313      	str	r3, [r2, #48]	; 0x30
 8000298:	e014      	b.n	80002c4 <GPIO_PeriClkCntrl+0xc0>
		}
		else if(pGPIOx == GPIOG)
 800029a:	687b      	ldr	r3, [r7, #4]
 800029c:	4a40      	ldr	r2, [pc, #256]	; (80003a0 <GPIO_PeriClkCntrl+0x19c>)
 800029e:	4293      	cmp	r3, r2
 80002a0:	d106      	bne.n	80002b0 <GPIO_PeriClkCntrl+0xac>
		{
			GPIOG_CLK_EN();
 80002a2:	4b39      	ldr	r3, [pc, #228]	; (8000388 <GPIO_PeriClkCntrl+0x184>)
 80002a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002a6:	4a38      	ldr	r2, [pc, #224]	; (8000388 <GPIO_PeriClkCntrl+0x184>)
 80002a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80002ac:	6313      	str	r3, [r2, #48]	; 0x30
 80002ae:	e009      	b.n	80002c4 <GPIO_PeriClkCntrl+0xc0>
		}
		else if(pGPIOx == GPIOH)
 80002b0:	687b      	ldr	r3, [r7, #4]
 80002b2:	4a3c      	ldr	r2, [pc, #240]	; (80003a4 <GPIO_PeriClkCntrl+0x1a0>)
 80002b4:	4293      	cmp	r3, r2
 80002b6:	d105      	bne.n	80002c4 <GPIO_PeriClkCntrl+0xc0>
		{
			GPIOH_CLK_EN();
 80002b8:	4b33      	ldr	r3, [pc, #204]	; (8000388 <GPIO_PeriClkCntrl+0x184>)
 80002ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002bc:	4a32      	ldr	r2, [pc, #200]	; (8000388 <GPIO_PeriClkCntrl+0x184>)
 80002be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80002c2:	6313      	str	r3, [r2, #48]	; 0x30
		}
	}

	if(En_Di == DISABLE)
 80002c4:	78fb      	ldrb	r3, [r7, #3]
 80002c6:	2b00      	cmp	r3, #0
 80002c8:	d156      	bne.n	8000378 <GPIO_PeriClkCntrl+0x174>
	{
		if(pGPIOx == GPIOA)
 80002ca:	687b      	ldr	r3, [r7, #4]
 80002cc:	4a2d      	ldr	r2, [pc, #180]	; (8000384 <GPIO_PeriClkCntrl+0x180>)
 80002ce:	4293      	cmp	r3, r2
 80002d0:	d106      	bne.n	80002e0 <GPIO_PeriClkCntrl+0xdc>
		{
			GPIOA_CLK_DI();
 80002d2:	4b2d      	ldr	r3, [pc, #180]	; (8000388 <GPIO_PeriClkCntrl+0x184>)
 80002d4:	691b      	ldr	r3, [r3, #16]
 80002d6:	4a2c      	ldr	r2, [pc, #176]	; (8000388 <GPIO_PeriClkCntrl+0x184>)
 80002d8:	f043 0301 	orr.w	r3, r3, #1
 80002dc:	6113      	str	r3, [r2, #16]
		{
			GPIOH_CLK_DI();
		}
	}

}
 80002de:	e04b      	b.n	8000378 <GPIO_PeriClkCntrl+0x174>
		else if(pGPIOx == GPIOB)
 80002e0:	687b      	ldr	r3, [r7, #4]
 80002e2:	4a2a      	ldr	r2, [pc, #168]	; (800038c <GPIO_PeriClkCntrl+0x188>)
 80002e4:	4293      	cmp	r3, r2
 80002e6:	d106      	bne.n	80002f6 <GPIO_PeriClkCntrl+0xf2>
			GPIOB_CLK_DI();
 80002e8:	4b27      	ldr	r3, [pc, #156]	; (8000388 <GPIO_PeriClkCntrl+0x184>)
 80002ea:	691b      	ldr	r3, [r3, #16]
 80002ec:	4a26      	ldr	r2, [pc, #152]	; (8000388 <GPIO_PeriClkCntrl+0x184>)
 80002ee:	f043 0302 	orr.w	r3, r3, #2
 80002f2:	6113      	str	r3, [r2, #16]
}
 80002f4:	e040      	b.n	8000378 <GPIO_PeriClkCntrl+0x174>
		else if(pGPIOx == GPIOC)
 80002f6:	687b      	ldr	r3, [r7, #4]
 80002f8:	4a25      	ldr	r2, [pc, #148]	; (8000390 <GPIO_PeriClkCntrl+0x18c>)
 80002fa:	4293      	cmp	r3, r2
 80002fc:	d106      	bne.n	800030c <GPIO_PeriClkCntrl+0x108>
			GPIOC_CLK_DI();
 80002fe:	4b22      	ldr	r3, [pc, #136]	; (8000388 <GPIO_PeriClkCntrl+0x184>)
 8000300:	691b      	ldr	r3, [r3, #16]
 8000302:	4a21      	ldr	r2, [pc, #132]	; (8000388 <GPIO_PeriClkCntrl+0x184>)
 8000304:	f043 0304 	orr.w	r3, r3, #4
 8000308:	6113      	str	r3, [r2, #16]
}
 800030a:	e035      	b.n	8000378 <GPIO_PeriClkCntrl+0x174>
		else if(pGPIOx == GPIOD)
 800030c:	687b      	ldr	r3, [r7, #4]
 800030e:	4a21      	ldr	r2, [pc, #132]	; (8000394 <GPIO_PeriClkCntrl+0x190>)
 8000310:	4293      	cmp	r3, r2
 8000312:	d106      	bne.n	8000322 <GPIO_PeriClkCntrl+0x11e>
			GPIOD_CLK_DI();
 8000314:	4b1c      	ldr	r3, [pc, #112]	; (8000388 <GPIO_PeriClkCntrl+0x184>)
 8000316:	691b      	ldr	r3, [r3, #16]
 8000318:	4a1b      	ldr	r2, [pc, #108]	; (8000388 <GPIO_PeriClkCntrl+0x184>)
 800031a:	f043 0308 	orr.w	r3, r3, #8
 800031e:	6113      	str	r3, [r2, #16]
}
 8000320:	e02a      	b.n	8000378 <GPIO_PeriClkCntrl+0x174>
		else if(pGPIOx == GPIOE)
 8000322:	687b      	ldr	r3, [r7, #4]
 8000324:	4a1c      	ldr	r2, [pc, #112]	; (8000398 <GPIO_PeriClkCntrl+0x194>)
 8000326:	4293      	cmp	r3, r2
 8000328:	d106      	bne.n	8000338 <GPIO_PeriClkCntrl+0x134>
			GPIOE_CLK_DI();
 800032a:	4b17      	ldr	r3, [pc, #92]	; (8000388 <GPIO_PeriClkCntrl+0x184>)
 800032c:	691b      	ldr	r3, [r3, #16]
 800032e:	4a16      	ldr	r2, [pc, #88]	; (8000388 <GPIO_PeriClkCntrl+0x184>)
 8000330:	f043 0310 	orr.w	r3, r3, #16
 8000334:	6113      	str	r3, [r2, #16]
}
 8000336:	e01f      	b.n	8000378 <GPIO_PeriClkCntrl+0x174>
		else if(pGPIOx == GPIOF)
 8000338:	687b      	ldr	r3, [r7, #4]
 800033a:	4a18      	ldr	r2, [pc, #96]	; (800039c <GPIO_PeriClkCntrl+0x198>)
 800033c:	4293      	cmp	r3, r2
 800033e:	d106      	bne.n	800034e <GPIO_PeriClkCntrl+0x14a>
			GPIOF_CLK_DI();
 8000340:	4b11      	ldr	r3, [pc, #68]	; (8000388 <GPIO_PeriClkCntrl+0x184>)
 8000342:	691b      	ldr	r3, [r3, #16]
 8000344:	4a10      	ldr	r2, [pc, #64]	; (8000388 <GPIO_PeriClkCntrl+0x184>)
 8000346:	f043 0320 	orr.w	r3, r3, #32
 800034a:	6113      	str	r3, [r2, #16]
}
 800034c:	e014      	b.n	8000378 <GPIO_PeriClkCntrl+0x174>
		else if(pGPIOx == GPIOG)
 800034e:	687b      	ldr	r3, [r7, #4]
 8000350:	4a13      	ldr	r2, [pc, #76]	; (80003a0 <GPIO_PeriClkCntrl+0x19c>)
 8000352:	4293      	cmp	r3, r2
 8000354:	d106      	bne.n	8000364 <GPIO_PeriClkCntrl+0x160>
			GPIOG_CLK_DI();
 8000356:	4b0c      	ldr	r3, [pc, #48]	; (8000388 <GPIO_PeriClkCntrl+0x184>)
 8000358:	691b      	ldr	r3, [r3, #16]
 800035a:	4a0b      	ldr	r2, [pc, #44]	; (8000388 <GPIO_PeriClkCntrl+0x184>)
 800035c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000360:	6113      	str	r3, [r2, #16]
}
 8000362:	e009      	b.n	8000378 <GPIO_PeriClkCntrl+0x174>
		else if(pGPIOx == GPIOH)
 8000364:	687b      	ldr	r3, [r7, #4]
 8000366:	4a0f      	ldr	r2, [pc, #60]	; (80003a4 <GPIO_PeriClkCntrl+0x1a0>)
 8000368:	4293      	cmp	r3, r2
 800036a:	d105      	bne.n	8000378 <GPIO_PeriClkCntrl+0x174>
			GPIOH_CLK_DI();
 800036c:	4b06      	ldr	r3, [pc, #24]	; (8000388 <GPIO_PeriClkCntrl+0x184>)
 800036e:	691b      	ldr	r3, [r3, #16]
 8000370:	4a05      	ldr	r2, [pc, #20]	; (8000388 <GPIO_PeriClkCntrl+0x184>)
 8000372:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000376:	6113      	str	r3, [r2, #16]
}
 8000378:	bf00      	nop
 800037a:	370c      	adds	r7, #12
 800037c:	46bd      	mov	sp, r7
 800037e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000382:	4770      	bx	lr
 8000384:	40020000 	.word	0x40020000
 8000388:	40023800 	.word	0x40023800
 800038c:	40020400 	.word	0x40020400
 8000390:	40020800 	.word	0x40020800
 8000394:	40020c00 	.word	0x40020c00
 8000398:	40021000 	.word	0x40021000
 800039c:	40021400 	.word	0x40021400
 80003a0:	40021800 	.word	0x40021800
 80003a4:	40021c00 	.word	0x40021c00

080003a8 <GPIO_Init>:
 * @return  : void
 *
 * @Note	: NULL
 */
void GPIO_Init(GPIO_handle_t *pGPIOHandle)
{
 80003a8:	b580      	push	{r7, lr}
 80003aa:	b084      	sub	sp, #16
 80003ac:	af00      	add	r7, sp, #0
 80003ae:	6078      	str	r0, [r7, #4]
	uint32_t temp = 0;
 80003b0:	2300      	movs	r3, #0
 80003b2:	60fb      	str	r3, [r7, #12]

	//CONFIG RCC FOR THE GPIO PORT
	GPIO_PeriClkCntrl(pGPIOHandle->pGPIOx, ENABLE);
 80003b4:	687b      	ldr	r3, [r7, #4]
 80003b6:	681b      	ldr	r3, [r3, #0]
 80003b8:	2101      	movs	r1, #1
 80003ba:	4618      	mov	r0, r3
 80003bc:	f7ff ff22 	bl	8000204 <GPIO_PeriClkCntrl>

	// CONFIGURE THE MODE OF GPIO PIN
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= 3)
 80003c0:	687b      	ldr	r3, [r7, #4]
 80003c2:	795b      	ldrb	r3, [r3, #5]
 80003c4:	b2db      	uxtb	r3, r3
 80003c6:	2b03      	cmp	r3, #3
 80003c8:	d813      	bhi.n	80003f2 <GPIO_Init+0x4a>
	{

		temp = ( pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80003ca:	687b      	ldr	r3, [r7, #4]
 80003cc:	795b      	ldrb	r3, [r3, #5]
 80003ce:	b2db      	uxtb	r3, r3
 80003d0:	461a      	mov	r2, r3
 80003d2:	687b      	ldr	r3, [r7, #4]
 80003d4:	791b      	ldrb	r3, [r3, #4]
 80003d6:	b2db      	uxtb	r3, r3
 80003d8:	005b      	lsls	r3, r3, #1
 80003da:	fa02 f303 	lsl.w	r3, r2, r3
 80003de:	60fb      	str	r3, [r7, #12]
		pGPIOHandle->pGPIOx->MODER |= temp;
 80003e0:	687b      	ldr	r3, [r7, #4]
 80003e2:	681b      	ldr	r3, [r3, #0]
 80003e4:	6819      	ldr	r1, [r3, #0]
 80003e6:	687b      	ldr	r3, [r7, #4]
 80003e8:	681b      	ldr	r3, [r3, #0]
 80003ea:	68fa      	ldr	r2, [r7, #12]
 80003ec:	430a      	orrs	r2, r1
 80003ee:	601a      	str	r2, [r3, #0]
 80003f0:	e0c7      	b.n	8000582 <GPIO_Init+0x1da>

	}
	else
	{
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT)
 80003f2:	687b      	ldr	r3, [r7, #4]
 80003f4:	795b      	ldrb	r3, [r3, #5]
 80003f6:	b2db      	uxtb	r3, r3
 80003f8:	2b04      	cmp	r3, #4
 80003fa:	d11a      	bne.n	8000432 <GPIO_Init+0x8a>
		{
			//CONFIGURE THE FTSR (FALLING TRIGGER SELECTION REGISTER)
			EXTI->FTSR |= (0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80003fc:	687b      	ldr	r3, [r7, #4]
 80003fe:	791b      	ldrb	r3, [r3, #4]
 8000400:	b2db      	uxtb	r3, r3
 8000402:	461a      	mov	r2, r3
 8000404:	2301      	movs	r3, #1
 8000406:	fa03 f202 	lsl.w	r2, r3, r2
 800040a:	4b9e      	ldr	r3, [pc, #632]	; (8000684 <GPIO_Init+0x2dc>)
 800040c:	68db      	ldr	r3, [r3, #12]
 800040e:	4611      	mov	r1, r2
 8000410:	4a9c      	ldr	r2, [pc, #624]	; (8000684 <GPIO_Init+0x2dc>)
 8000412:	430b      	orrs	r3, r1
 8000414:	60d3      	str	r3, [r2, #12]
			//CLEAR RTSR
			EXTI->RTSR &= ~(0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000416:	687b      	ldr	r3, [r7, #4]
 8000418:	791b      	ldrb	r3, [r3, #4]
 800041a:	b2db      	uxtb	r3, r3
 800041c:	461a      	mov	r2, r3
 800041e:	2301      	movs	r3, #1
 8000420:	4093      	lsls	r3, r2
 8000422:	43da      	mvns	r2, r3
 8000424:	4b97      	ldr	r3, [pc, #604]	; (8000684 <GPIO_Init+0x2dc>)
 8000426:	689b      	ldr	r3, [r3, #8]
 8000428:	4611      	mov	r1, r2
 800042a:	4a96      	ldr	r2, [pc, #600]	; (8000684 <GPIO_Init+0x2dc>)
 800042c:	400b      	ands	r3, r1
 800042e:	6093      	str	r3, [r2, #8]
 8000430:	e03e      	b.n	80004b0 <GPIO_Init+0x108>
		}
		else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT)
 8000432:	687b      	ldr	r3, [r7, #4]
 8000434:	795b      	ldrb	r3, [r3, #5]
 8000436:	b2db      	uxtb	r3, r3
 8000438:	2b05      	cmp	r3, #5
 800043a:	d11a      	bne.n	8000472 <GPIO_Init+0xca>
		{
			//CONFIGURE THE RTSR (RISING TRIGGER SELECTION REGISTER
			EXTI->RTSR |= (0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800043c:	687b      	ldr	r3, [r7, #4]
 800043e:	791b      	ldrb	r3, [r3, #4]
 8000440:	b2db      	uxtb	r3, r3
 8000442:	461a      	mov	r2, r3
 8000444:	2301      	movs	r3, #1
 8000446:	fa03 f202 	lsl.w	r2, r3, r2
 800044a:	4b8e      	ldr	r3, [pc, #568]	; (8000684 <GPIO_Init+0x2dc>)
 800044c:	689b      	ldr	r3, [r3, #8]
 800044e:	4611      	mov	r1, r2
 8000450:	4a8c      	ldr	r2, [pc, #560]	; (8000684 <GPIO_Init+0x2dc>)
 8000452:	430b      	orrs	r3, r1
 8000454:	6093      	str	r3, [r2, #8]
			//CLEAR FTSR
			EXTI->FTSR &= ~(0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000456:	687b      	ldr	r3, [r7, #4]
 8000458:	791b      	ldrb	r3, [r3, #4]
 800045a:	b2db      	uxtb	r3, r3
 800045c:	461a      	mov	r2, r3
 800045e:	2301      	movs	r3, #1
 8000460:	4093      	lsls	r3, r2
 8000462:	43da      	mvns	r2, r3
 8000464:	4b87      	ldr	r3, [pc, #540]	; (8000684 <GPIO_Init+0x2dc>)
 8000466:	68db      	ldr	r3, [r3, #12]
 8000468:	4611      	mov	r1, r2
 800046a:	4a86      	ldr	r2, [pc, #536]	; (8000684 <GPIO_Init+0x2dc>)
 800046c:	400b      	ands	r3, r1
 800046e:	60d3      	str	r3, [r2, #12]
 8000470:	e01e      	b.n	80004b0 <GPIO_Init+0x108>
		}
		else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT)
 8000472:	687b      	ldr	r3, [r7, #4]
 8000474:	795b      	ldrb	r3, [r3, #5]
 8000476:	b2db      	uxtb	r3, r3
 8000478:	2b06      	cmp	r3, #6
 800047a:	d119      	bne.n	80004b0 <GPIO_Init+0x108>
		{
			//CONFIGURE BOTH RTSR AND FTSRpGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
			EXTI->FTSR |= (0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800047c:	687b      	ldr	r3, [r7, #4]
 800047e:	791b      	ldrb	r3, [r3, #4]
 8000480:	b2db      	uxtb	r3, r3
 8000482:	461a      	mov	r2, r3
 8000484:	2301      	movs	r3, #1
 8000486:	fa03 f202 	lsl.w	r2, r3, r2
 800048a:	4b7e      	ldr	r3, [pc, #504]	; (8000684 <GPIO_Init+0x2dc>)
 800048c:	68db      	ldr	r3, [r3, #12]
 800048e:	4611      	mov	r1, r2
 8000490:	4a7c      	ldr	r2, [pc, #496]	; (8000684 <GPIO_Init+0x2dc>)
 8000492:	430b      	orrs	r3, r1
 8000494:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR |= (0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000496:	687b      	ldr	r3, [r7, #4]
 8000498:	791b      	ldrb	r3, [r3, #4]
 800049a:	b2db      	uxtb	r3, r3
 800049c:	461a      	mov	r2, r3
 800049e:	2301      	movs	r3, #1
 80004a0:	fa03 f202 	lsl.w	r2, r3, r2
 80004a4:	4b77      	ldr	r3, [pc, #476]	; (8000684 <GPIO_Init+0x2dc>)
 80004a6:	689b      	ldr	r3, [r3, #8]
 80004a8:	4611      	mov	r1, r2
 80004aa:	4a76      	ldr	r2, [pc, #472]	; (8000684 <GPIO_Init+0x2dc>)
 80004ac:	430b      	orrs	r3, r1
 80004ae:	6093      	str	r3, [r2, #8]
		}

		//CONFIGURE THE GPIO PORT SELECTION IN SYSCFG_EXTICR
		uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber/2;
 80004b0:	687b      	ldr	r3, [r7, #4]
 80004b2:	791b      	ldrb	r3, [r3, #4]
 80004b4:	b2db      	uxtb	r3, r3
 80004b6:	085b      	lsrs	r3, r3, #1
 80004b8:	72fb      	strb	r3, [r7, #11]
		uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber%2;
 80004ba:	687b      	ldr	r3, [r7, #4]
 80004bc:	791b      	ldrb	r3, [r3, #4]
 80004be:	b2db      	uxtb	r3, r3
 80004c0:	f003 0301 	and.w	r3, r3, #1
 80004c4:	72bb      	strb	r3, [r7, #10]

		uint8_t portcode = GPIO_BA_CODE(pGPIOHandle->pGPIOx);
 80004c6:	687b      	ldr	r3, [r7, #4]
 80004c8:	681b      	ldr	r3, [r3, #0]
 80004ca:	4a6f      	ldr	r2, [pc, #444]	; (8000688 <GPIO_Init+0x2e0>)
 80004cc:	4293      	cmp	r3, r2
 80004ce:	d032      	beq.n	8000536 <GPIO_Init+0x18e>
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	681b      	ldr	r3, [r3, #0]
 80004d4:	4a6d      	ldr	r2, [pc, #436]	; (800068c <GPIO_Init+0x2e4>)
 80004d6:	4293      	cmp	r3, r2
 80004d8:	d02b      	beq.n	8000532 <GPIO_Init+0x18a>
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	681b      	ldr	r3, [r3, #0]
 80004de:	4a6c      	ldr	r2, [pc, #432]	; (8000690 <GPIO_Init+0x2e8>)
 80004e0:	4293      	cmp	r3, r2
 80004e2:	d024      	beq.n	800052e <GPIO_Init+0x186>
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	4a6a      	ldr	r2, [pc, #424]	; (8000694 <GPIO_Init+0x2ec>)
 80004ea:	4293      	cmp	r3, r2
 80004ec:	d01d      	beq.n	800052a <GPIO_Init+0x182>
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	681b      	ldr	r3, [r3, #0]
 80004f2:	4a69      	ldr	r2, [pc, #420]	; (8000698 <GPIO_Init+0x2f0>)
 80004f4:	4293      	cmp	r3, r2
 80004f6:	d016      	beq.n	8000526 <GPIO_Init+0x17e>
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	681b      	ldr	r3, [r3, #0]
 80004fc:	4a67      	ldr	r2, [pc, #412]	; (800069c <GPIO_Init+0x2f4>)
 80004fe:	4293      	cmp	r3, r2
 8000500:	d00f      	beq.n	8000522 <GPIO_Init+0x17a>
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	681b      	ldr	r3, [r3, #0]
 8000506:	4a66      	ldr	r2, [pc, #408]	; (80006a0 <GPIO_Init+0x2f8>)
 8000508:	4293      	cmp	r3, r2
 800050a:	d008      	beq.n	800051e <GPIO_Init+0x176>
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	681b      	ldr	r3, [r3, #0]
 8000510:	4a64      	ldr	r2, [pc, #400]	; (80006a4 <GPIO_Init+0x2fc>)
 8000512:	4293      	cmp	r3, r2
 8000514:	d101      	bne.n	800051a <GPIO_Init+0x172>
 8000516:	2307      	movs	r3, #7
 8000518:	e00e      	b.n	8000538 <GPIO_Init+0x190>
 800051a:	23ff      	movs	r3, #255	; 0xff
 800051c:	e00c      	b.n	8000538 <GPIO_Init+0x190>
 800051e:	2306      	movs	r3, #6
 8000520:	e00a      	b.n	8000538 <GPIO_Init+0x190>
 8000522:	2305      	movs	r3, #5
 8000524:	e008      	b.n	8000538 <GPIO_Init+0x190>
 8000526:	2304      	movs	r3, #4
 8000528:	e006      	b.n	8000538 <GPIO_Init+0x190>
 800052a:	2303      	movs	r3, #3
 800052c:	e004      	b.n	8000538 <GPIO_Init+0x190>
 800052e:	2302      	movs	r3, #2
 8000530:	e002      	b.n	8000538 <GPIO_Init+0x190>
 8000532:	2301      	movs	r3, #1
 8000534:	e000      	b.n	8000538 <GPIO_Init+0x190>
 8000536:	2300      	movs	r3, #0
 8000538:	727b      	strb	r3, [r7, #9]

		SYSCFG_CLK_EN();
 800053a:	4b5b      	ldr	r3, [pc, #364]	; (80006a8 <GPIO_Init+0x300>)
 800053c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800053e:	4a5a      	ldr	r2, [pc, #360]	; (80006a8 <GPIO_Init+0x300>)
 8000540:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000544:	6453      	str	r3, [r2, #68]	; 0x44
		SYSCFG->EXTICR[temp1] |= ( portcode << 4*temp2 );
 8000546:	4a59      	ldr	r2, [pc, #356]	; (80006ac <GPIO_Init+0x304>)
 8000548:	7afb      	ldrb	r3, [r7, #11]
 800054a:	3302      	adds	r3, #2
 800054c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000550:	7a79      	ldrb	r1, [r7, #9]
 8000552:	7abb      	ldrb	r3, [r7, #10]
 8000554:	009b      	lsls	r3, r3, #2
 8000556:	fa01 f303 	lsl.w	r3, r1, r3
 800055a:	4618      	mov	r0, r3
 800055c:	4953      	ldr	r1, [pc, #332]	; (80006ac <GPIO_Init+0x304>)
 800055e:	7afb      	ldrb	r3, [r7, #11]
 8000560:	4302      	orrs	r2, r0
 8000562:	3302      	adds	r3, #2
 8000564:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


		//ENABLE THE EXTI INTERRUPT DELIVERY USING IMR
		EXTI->IMR |= (0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	791b      	ldrb	r3, [r3, #4]
 800056c:	b2db      	uxtb	r3, r3
 800056e:	461a      	mov	r2, r3
 8000570:	2301      	movs	r3, #1
 8000572:	fa03 f202 	lsl.w	r2, r3, r2
 8000576:	4b43      	ldr	r3, [pc, #268]	; (8000684 <GPIO_Init+0x2dc>)
 8000578:	681b      	ldr	r3, [r3, #0]
 800057a:	4611      	mov	r1, r2
 800057c:	4a41      	ldr	r2, [pc, #260]	; (8000684 <GPIO_Init+0x2dc>)
 800057e:	430b      	orrs	r3, r1
 8000580:	6013      	str	r3, [r2, #0]

	}

	temp = 0;
 8000582:	2300      	movs	r3, #0
 8000584:	60fb      	str	r3, [r7, #12]
	// CONFIGURE THE SPEED
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	799b      	ldrb	r3, [r3, #6]
 800058a:	b2db      	uxtb	r3, r3
 800058c:	461a      	mov	r2, r3
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	791b      	ldrb	r3, [r3, #4]
 8000592:	b2db      	uxtb	r3, r3
 8000594:	005b      	lsls	r3, r3, #1
 8000596:	fa02 f303 	lsl.w	r3, r2, r3
 800059a:	60fb      	str	r3, [r7, #12]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	6899      	ldr	r1, [r3, #8]
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	68fa      	ldr	r2, [r7, #12]
 80005a8:	430a      	orrs	r2, r1
 80005aa:	609a      	str	r2, [r3, #8]

	temp = 0;
 80005ac:	2300      	movs	r3, #0
 80005ae:	60fb      	str	r3, [r7, #12]
	// CONFIGURE THE PUPD SETTINGS
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	79db      	ldrb	r3, [r3, #7]
 80005b4:	b2db      	uxtb	r3, r3
 80005b6:	461a      	mov	r2, r3
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	791b      	ldrb	r3, [r3, #4]
 80005bc:	b2db      	uxtb	r3, r3
 80005be:	005b      	lsls	r3, r3, #1
 80005c0:	fa02 f303 	lsl.w	r3, r2, r3
 80005c4:	60fb      	str	r3, [r7, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	681b      	ldr	r3, [r3, #0]
 80005ca:	68d9      	ldr	r1, [r3, #12]
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	68fa      	ldr	r2, [r7, #12]
 80005d2:	430a      	orrs	r2, r1
 80005d4:	60da      	str	r2, [r3, #12]

	temp = 0;
 80005d6:	2300      	movs	r3, #0
 80005d8:	60fb      	str	r3, [r7, #12]
	// CONFIGURE THE OPTYPE
	pGPIOHandle->pGPIOx->OTYPER |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	7a1b      	ldrb	r3, [r3, #8]
 80005de:	b2db      	uxtb	r3, r3
 80005e0:	461a      	mov	r2, r3
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	791b      	ldrb	r3, [r3, #4]
 80005e6:	b2db      	uxtb	r3, r3
 80005e8:	fa02 f103 	lsl.w	r1, r2, r3
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	685a      	ldr	r2, [r3, #4]
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	681b      	ldr	r3, [r3, #0]
 80005f6:	430a      	orrs	r2, r1
 80005f8:	605a      	str	r2, [r3, #4]

	temp = 0;
 80005fa:	2300      	movs	r3, #0
 80005fc:	60fb      	str	r3, [r7, #12]
	// CONFIGURE THE ALTERNATE FUNCTIONALITY OF THE PIN
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_ALT_FN)
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	795b      	ldrb	r3, [r3, #5]
 8000602:	b2db      	uxtb	r3, r3
 8000604:	2b02      	cmp	r3, #2
 8000606:	f040 8094 	bne.w	8000732 <GPIO_Init+0x38a>
	{
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber <= 3)
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	791b      	ldrb	r3, [r3, #4]
 800060e:	b2db      	uxtb	r3, r3
 8000610:	2b03      	cmp	r3, #3
 8000612:	d815      	bhi.n	8000640 <GPIO_Init+0x298>
		{
			temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4 * (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4)));
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	7a5b      	ldrb	r3, [r3, #9]
 8000618:	b2db      	uxtb	r3, r3
 800061a:	461a      	mov	r2, r3
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	791b      	ldrb	r3, [r3, #4]
 8000620:	b2db      	uxtb	r3, r3
 8000622:	f003 0303 	and.w	r3, r3, #3
 8000626:	009b      	lsls	r3, r3, #2
 8000628:	fa02 f303 	lsl.w	r3, r2, r3
 800062c:	60fb      	str	r3, [r7, #12]
			pGPIOHandle->pGPIOx->AFR[0] |= temp;
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	6a19      	ldr	r1, [r3, #32]
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	68fa      	ldr	r2, [r7, #12]
 800063a:	430a      	orrs	r2, r1
 800063c:	621a      	str	r2, [r3, #32]
		{
			temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (16 + 4 * (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4)));
			pGPIOHandle->pGPIOx->AFR[1] |= temp;
		}
	}
}
 800063e:	e078      	b.n	8000732 <GPIO_Init+0x38a>
		else if((pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber <= 7) && (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber > 3))
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	791b      	ldrb	r3, [r3, #4]
 8000644:	b2db      	uxtb	r3, r3
 8000646:	2b07      	cmp	r3, #7
 8000648:	d832      	bhi.n	80006b0 <GPIO_Init+0x308>
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	791b      	ldrb	r3, [r3, #4]
 800064e:	b2db      	uxtb	r3, r3
 8000650:	2b03      	cmp	r3, #3
 8000652:	d92d      	bls.n	80006b0 <GPIO_Init+0x308>
			temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (16 + 4 * (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4)));
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	7a5b      	ldrb	r3, [r3, #9]
 8000658:	b2db      	uxtb	r3, r3
 800065a:	461a      	mov	r2, r3
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	791b      	ldrb	r3, [r3, #4]
 8000660:	b2db      	uxtb	r3, r3
 8000662:	f003 0303 	and.w	r3, r3, #3
 8000666:	3304      	adds	r3, #4
 8000668:	009b      	lsls	r3, r3, #2
 800066a:	fa02 f303 	lsl.w	r3, r2, r3
 800066e:	60fb      	str	r3, [r7, #12]
			pGPIOHandle->pGPIOx->AFR[0] |= temp;
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	6a19      	ldr	r1, [r3, #32]
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	68fa      	ldr	r2, [r7, #12]
 800067c:	430a      	orrs	r2, r1
 800067e:	621a      	str	r2, [r3, #32]
 8000680:	e057      	b.n	8000732 <GPIO_Init+0x38a>
 8000682:	bf00      	nop
 8000684:	40013c00 	.word	0x40013c00
 8000688:	40020000 	.word	0x40020000
 800068c:	40020400 	.word	0x40020400
 8000690:	40020800 	.word	0x40020800
 8000694:	40020c00 	.word	0x40020c00
 8000698:	40021000 	.word	0x40021000
 800069c:	40021400 	.word	0x40021400
 80006a0:	40021800 	.word	0x40021800
 80006a4:	40021c00 	.word	0x40021c00
 80006a8:	40023800 	.word	0x40023800
 80006ac:	40013800 	.word	0x40013800
		else if((pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber <= 11) && (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber > 7))
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	791b      	ldrb	r3, [r3, #4]
 80006b4:	b2db      	uxtb	r3, r3
 80006b6:	2b0b      	cmp	r3, #11
 80006b8:	d81a      	bhi.n	80006f0 <GPIO_Init+0x348>
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	791b      	ldrb	r3, [r3, #4]
 80006be:	b2db      	uxtb	r3, r3
 80006c0:	2b07      	cmp	r3, #7
 80006c2:	d915      	bls.n	80006f0 <GPIO_Init+0x348>
			temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << ( 4 * (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4)));
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	7a5b      	ldrb	r3, [r3, #9]
 80006c8:	b2db      	uxtb	r3, r3
 80006ca:	461a      	mov	r2, r3
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	791b      	ldrb	r3, [r3, #4]
 80006d0:	b2db      	uxtb	r3, r3
 80006d2:	f003 0303 	and.w	r3, r3, #3
 80006d6:	009b      	lsls	r3, r3, #2
 80006d8:	fa02 f303 	lsl.w	r3, r2, r3
 80006dc:	60fb      	str	r3, [r7, #12]
			pGPIOHandle->pGPIOx->AFR[1] |= temp;
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	68fa      	ldr	r2, [r7, #12]
 80006ea:	430a      	orrs	r2, r1
 80006ec:	625a      	str	r2, [r3, #36]	; 0x24
 80006ee:	e020      	b.n	8000732 <GPIO_Init+0x38a>
		else if((pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber <= 15) && (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber > 11))
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	791b      	ldrb	r3, [r3, #4]
 80006f4:	b2db      	uxtb	r3, r3
 80006f6:	2b0f      	cmp	r3, #15
 80006f8:	d81b      	bhi.n	8000732 <GPIO_Init+0x38a>
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	791b      	ldrb	r3, [r3, #4]
 80006fe:	b2db      	uxtb	r3, r3
 8000700:	2b0b      	cmp	r3, #11
 8000702:	d916      	bls.n	8000732 <GPIO_Init+0x38a>
			temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (16 + 4 * (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4)));
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	7a5b      	ldrb	r3, [r3, #9]
 8000708:	b2db      	uxtb	r3, r3
 800070a:	461a      	mov	r2, r3
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	791b      	ldrb	r3, [r3, #4]
 8000710:	b2db      	uxtb	r3, r3
 8000712:	f003 0303 	and.w	r3, r3, #3
 8000716:	3304      	adds	r3, #4
 8000718:	009b      	lsls	r3, r3, #2
 800071a:	fa02 f303 	lsl.w	r3, r2, r3
 800071e:	60fb      	str	r3, [r7, #12]
			pGPIOHandle->pGPIOx->AFR[1] |= temp;
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	68fa      	ldr	r2, [r7, #12]
 800072c:	430a      	orrs	r2, r1
 800072e:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000730:	e7ff      	b.n	8000732 <GPIO_Init+0x38a>
 8000732:	bf00      	nop
 8000734:	3710      	adds	r7, #16
 8000736:	46bd      	mov	sp, r7
 8000738:	bd80      	pop	{r7, pc}
 800073a:	bf00      	nop

0800073c <GPIO_ReadIPin>:
 * @return  : void
 *
 * @Note	: Returns SET(1) or RESET(0)
 */
uint8_t GPIO_ReadIPin(GPIO_regdef_t *pGPIOx, uint8_t Pin_No)
{
 800073c:	b480      	push	{r7}
 800073e:	b085      	sub	sp, #20
 8000740:	af00      	add	r7, sp, #0
 8000742:	6078      	str	r0, [r7, #4]
 8000744:	460b      	mov	r3, r1
 8000746:	70fb      	strb	r3, [r7, #3]

	uint8_t temp;

	temp = (uint8_t)( (pGPIOx->IDR >> Pin_No) & 0x00000001);
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	691a      	ldr	r2, [r3, #16]
 800074c:	78fb      	ldrb	r3, [r7, #3]
 800074e:	fa22 f303 	lsr.w	r3, r2, r3
 8000752:	b2db      	uxtb	r3, r3
 8000754:	f003 0301 	and.w	r3, r3, #1
 8000758:	73fb      	strb	r3, [r7, #15]

	return(temp);
 800075a:	7bfb      	ldrb	r3, [r7, #15]
}
 800075c:	4618      	mov	r0, r3
 800075e:	3714      	adds	r7, #20
 8000760:	46bd      	mov	sp, r7
 8000762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000766:	4770      	bx	lr

08000768 <GPIO_ToggleOPin>:
 * @return  : void
 *
 * @Note	: NULL
 */
void GPIO_ToggleOPin(GPIO_regdef_t *pGPIOx, uint8_t Pin_No)
{
 8000768:	b480      	push	{r7}
 800076a:	b083      	sub	sp, #12
 800076c:	af00      	add	r7, sp, #0
 800076e:	6078      	str	r0, [r7, #4]
 8000770:	460b      	mov	r3, r1
 8000772:	70fb      	strb	r3, [r7, #3]

	pGPIOx->ODR ^= (0x1 << Pin_No);
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	695b      	ldr	r3, [r3, #20]
 8000778:	78fa      	ldrb	r2, [r7, #3]
 800077a:	2101      	movs	r1, #1
 800077c:	fa01 f202 	lsl.w	r2, r1, r2
 8000780:	405a      	eors	r2, r3
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	615a      	str	r2, [r3, #20]
}
 8000786:	bf00      	nop
 8000788:	370c      	adds	r7, #12
 800078a:	46bd      	mov	sp, r7
 800078c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000790:	4770      	bx	lr

08000792 <I2C_GenerateStartCondition>:
 *
 * @Note              - private function

 */
static void I2C_GenerateStartCondition(I2C_RegDef_t *pI2Cx)
{
 8000792:	b480      	push	{r7}
 8000794:	b083      	sub	sp, #12
 8000796:	af00      	add	r7, sp, #0
 8000798:	6078      	str	r0, [r7, #4]
	pI2Cx->CR1 |= (0x1 << I2C_CR1_START);
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	601a      	str	r2, [r3, #0]
}
 80007a6:	bf00      	nop
 80007a8:	370c      	adds	r7, #12
 80007aa:	46bd      	mov	sp, r7
 80007ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b0:	4770      	bx	lr

080007b2 <I2C_ExecuteAddrPhase>:
 *
 * @Note              - private function

 */
static void I2C_ExecuteAddrPhase(I2C_RegDef_t *pI2Cx, uint8_t SlaveAddr, uint8_t mode)
{
 80007b2:	b480      	push	{r7}
 80007b4:	b083      	sub	sp, #12
 80007b6:	af00      	add	r7, sp, #0
 80007b8:	6078      	str	r0, [r7, #4]
 80007ba:	460b      	mov	r3, r1
 80007bc:	70fb      	strb	r3, [r7, #3]
 80007be:	4613      	mov	r3, r2
 80007c0:	70bb      	strb	r3, [r7, #2]
	if(mode == WRITE)
 80007c2:	78bb      	ldrb	r3, [r7, #2]
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d105      	bne.n	80007d4 <I2C_ExecuteAddrPhase+0x22>
	{
		pI2Cx->DR  =  ( (SlaveAddr << 1) | 0x0 );								//Shifting the slave address left by in byte bringing in a 0 from right which is the new LSB
 80007c8:	78fb      	ldrb	r3, [r7, #3]
 80007ca:	005b      	lsls	r3, r3, #1
 80007cc:	461a      	mov	r2, r3
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	611a      	str	r2, [r3, #16]
	}
	else
	{
		pI2Cx->DR = ( (SlaveAddr << 1) |  0x1 );
	}
}
 80007d2:	e006      	b.n	80007e2 <I2C_ExecuteAddrPhase+0x30>
		pI2Cx->DR = ( (SlaveAddr << 1) |  0x1 );
 80007d4:	78fb      	ldrb	r3, [r7, #3]
 80007d6:	005b      	lsls	r3, r3, #1
 80007d8:	f043 0301 	orr.w	r3, r3, #1
 80007dc:	461a      	mov	r2, r3
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	611a      	str	r2, [r3, #16]
}
 80007e2:	bf00      	nop
 80007e4:	370c      	adds	r7, #12
 80007e6:	46bd      	mov	sp, r7
 80007e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ec:	4770      	bx	lr

080007ee <I2C_Enable>:
 *
 * @Note              - NULL

 */
void I2C_Enable(I2C_RegDef_t *pI2Cx , uint8_t EN_DI)
{
 80007ee:	b480      	push	{r7}
 80007f0:	b083      	sub	sp, #12
 80007f2:	af00      	add	r7, sp, #0
 80007f4:	6078      	str	r0, [r7, #4]
 80007f6:	460b      	mov	r3, r1
 80007f8:	70fb      	strb	r3, [r7, #3]
	if(EN_DI == ENABLE)
 80007fa:	78fb      	ldrb	r3, [r7, #3]
 80007fc:	2b01      	cmp	r3, #1
 80007fe:	d106      	bne.n	800080e <I2C_Enable+0x20>
		pI2Cx->CR1 |= ( 0x1 << I2C_CR1_PE );
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	f043 0201 	orr.w	r2, r3, #1
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	601a      	str	r2, [r3, #0]

	else pI2Cx->CR1 &= ~(0x1 << I2C_CR1_PE);

}
 800080c:	e005      	b.n	800081a <I2C_Enable+0x2c>
	else pI2Cx->CR1 &= ~(0x1 << I2C_CR1_PE);
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	681b      	ldr	r3, [r3, #0]
 8000812:	f023 0201 	bic.w	r2, r3, #1
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	601a      	str	r2, [r3, #0]
}
 800081a:	bf00      	nop
 800081c:	370c      	adds	r7, #12
 800081e:	46bd      	mov	sp, r7
 8000820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000824:	4770      	bx	lr

08000826 <I2C_GetFagStatus>:
 *
 * @Note              - NULL

 */
uint8_t I2C_GetFagStatus(I2C_RegDef_t *pI2Cx, uint32_t FlagName)
{
 8000826:	b480      	push	{r7}
 8000828:	b083      	sub	sp, #12
 800082a:	af00      	add	r7, sp, #0
 800082c:	6078      	str	r0, [r7, #4]
 800082e:	6039      	str	r1, [r7, #0]
	if( pI2Cx->SR1 & (0x1 << FlagName) )
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	695b      	ldr	r3, [r3, #20]
 8000834:	2101      	movs	r1, #1
 8000836:	683a      	ldr	r2, [r7, #0]
 8000838:	fa01 f202 	lsl.w	r2, r1, r2
 800083c:	4013      	ands	r3, r2
 800083e:	2b00      	cmp	r3, #0
 8000840:	d001      	beq.n	8000846 <I2C_GetFagStatus+0x20>
		return FLAG_SET;
 8000842:	2301      	movs	r3, #1
 8000844:	e000      	b.n	8000848 <I2C_GetFagStatus+0x22>

	return FLAG_RESET;
 8000846:	2300      	movs	r3, #0
}
 8000848:	4618      	mov	r0, r3
 800084a:	370c      	adds	r7, #12
 800084c:	46bd      	mov	sp, r7
 800084e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000852:	4770      	bx	lr

08000854 <RCC_GetClkVal>:
 *
 * @Note              - NULL

 */
uint32_t RCC_GetClkVal(void)
{
 8000854:	b480      	push	{r7}
 8000856:	b085      	sub	sp, #20
 8000858:	af00      	add	r7, sp, #0
	uint32_t PCLK1, Clk_SCL, temp;
	uint8_t System_clk_status, AHB1_Prescalar, APB1_Prescalar;

	System_clk_status = ((RCC->CFGR >> 2 ) & (0x3));
 800085a:	4b20      	ldr	r3, [pc, #128]	; (80008dc <RCC_GetClkVal+0x88>)
 800085c:	689b      	ldr	r3, [r3, #8]
 800085e:	089b      	lsrs	r3, r3, #2
 8000860:	b2db      	uxtb	r3, r3
 8000862:	f003 0303 	and.w	r3, r3, #3
 8000866:	727b      	strb	r3, [r7, #9]

	if(System_clk_status == 0)
 8000868:	7a7b      	ldrb	r3, [r7, #9]
 800086a:	2b00      	cmp	r3, #0
 800086c:	d101      	bne.n	8000872 <RCC_GetClkVal+0x1e>
	{
		//HSI
		Clk_SCL = 16000000;
 800086e:	4b1c      	ldr	r3, [pc, #112]	; (80008e0 <RCC_GetClkVal+0x8c>)
 8000870:	60fb      	str	r3, [r7, #12]
	}else if(System_clk_status == 3)
	{
		//PLL_R
	}

	temp = ((RCC->CFGR >> 4) & (0x4));
 8000872:	4b1a      	ldr	r3, [pc, #104]	; (80008dc <RCC_GetClkVal+0x88>)
 8000874:	689b      	ldr	r3, [r3, #8]
 8000876:	091b      	lsrs	r3, r3, #4
 8000878:	f003 0304 	and.w	r3, r3, #4
 800087c:	607b      	str	r3, [r7, #4]

	if(temp < 8)
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	2b07      	cmp	r3, #7
 8000882:	d802      	bhi.n	800088a <RCC_GetClkVal+0x36>
	{
		AHB1_Prescalar = 1;
 8000884:	2301      	movs	r3, #1
 8000886:	72fb      	strb	r3, [r7, #11]
 8000888:	e006      	b.n	8000898 <RCC_GetClkVal+0x44>
	}else
	{
		AHB1_Prescalar = (AHB1P[temp] - 8);
 800088a:	4a16      	ldr	r2, [pc, #88]	; (80008e4 <RCC_GetClkVal+0x90>)
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000892:	b2db      	uxtb	r3, r3
 8000894:	3b08      	subs	r3, #8
 8000896:	72fb      	strb	r3, [r7, #11]
	}

	temp = ((RCC->CFGR >> 10 ) & (0x3));
 8000898:	4b10      	ldr	r3, [pc, #64]	; (80008dc <RCC_GetClkVal+0x88>)
 800089a:	689b      	ldr	r3, [r3, #8]
 800089c:	0a9b      	lsrs	r3, r3, #10
 800089e:	f003 0303 	and.w	r3, r3, #3
 80008a2:	607b      	str	r3, [r7, #4]

	if(temp < 4)
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	2b03      	cmp	r3, #3
 80008a8:	d802      	bhi.n	80008b0 <RCC_GetClkVal+0x5c>
	{
		APB1_Prescalar = 1;
 80008aa:	2301      	movs	r3, #1
 80008ac:	72bb      	strb	r3, [r7, #10]
 80008ae:	e006      	b.n	80008be <RCC_GetClkVal+0x6a>

	}else
	{
		APB1_Prescalar = (APB1p[temp] - 4);
 80008b0:	4a0d      	ldr	r2, [pc, #52]	; (80008e8 <RCC_GetClkVal+0x94>)
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80008b8:	b2db      	uxtb	r3, r3
 80008ba:	3b04      	subs	r3, #4
 80008bc:	72bb      	strb	r3, [r7, #10]
	}

	PCLK1 = (Clk_SCL/ AHB1_Prescalar)/APB1_Prescalar;
 80008be:	7afb      	ldrb	r3, [r7, #11]
 80008c0:	68fa      	ldr	r2, [r7, #12]
 80008c2:	fbb2 f2f3 	udiv	r2, r2, r3
 80008c6:	7abb      	ldrb	r3, [r7, #10]
 80008c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80008cc:	603b      	str	r3, [r7, #0]

	return PCLK1;
 80008ce:	683b      	ldr	r3, [r7, #0]
}
 80008d0:	4618      	mov	r0, r3
 80008d2:	3714      	adds	r7, #20
 80008d4:	46bd      	mov	sp, r7
 80008d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008da:	4770      	bx	lr
 80008dc:	40023800 	.word	0x40023800
 80008e0:	00f42400 	.word	0x00f42400
 80008e4:	20000000 	.word	0x20000000
 80008e8:	20000020 	.word	0x20000020

080008ec <I2C_PeriClkCntrl>:
 *
 * @Note              - NULL

 */
void I2C_PeriClkCntrl(I2C_RegDef_t *pI2Cx, uint8_t En_Di)
{
 80008ec:	b480      	push	{r7}
 80008ee:	b083      	sub	sp, #12
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
 80008f4:	460b      	mov	r3, r1
 80008f6:	70fb      	strb	r3, [r7, #3]
	if(En_Di  ==	 ENABLE)
 80008f8:	78fb      	ldrb	r3, [r7, #3]
 80008fa:	2b01      	cmp	r3, #1
 80008fc:	d120      	bne.n	8000940 <I2C_PeriClkCntrl+0x54>
	{
		if(pI2Cx == I2C1)
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	4a22      	ldr	r2, [pc, #136]	; (800098c <I2C_PeriClkCntrl+0xa0>)
 8000902:	4293      	cmp	r3, r2
 8000904:	d106      	bne.n	8000914 <I2C_PeriClkCntrl+0x28>
			I2C1_CLK_EN();
 8000906:	4b22      	ldr	r3, [pc, #136]	; (8000990 <I2C_PeriClkCntrl+0xa4>)
 8000908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800090a:	4a21      	ldr	r2, [pc, #132]	; (8000990 <I2C_PeriClkCntrl+0xa4>)
 800090c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000910:	6413      	str	r3, [r2, #64]	; 0x40
		else if(pI2Cx == I2C3)
			I2C3_CLK_DI();

	}

}
 8000912:	e035      	b.n	8000980 <I2C_PeriClkCntrl+0x94>
		else if(pI2Cx == I2C2)
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	4a1f      	ldr	r2, [pc, #124]	; (8000994 <I2C_PeriClkCntrl+0xa8>)
 8000918:	4293      	cmp	r3, r2
 800091a:	d106      	bne.n	800092a <I2C_PeriClkCntrl+0x3e>
			I2C2_CLK_EN();
 800091c:	4b1c      	ldr	r3, [pc, #112]	; (8000990 <I2C_PeriClkCntrl+0xa4>)
 800091e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000920:	4a1b      	ldr	r2, [pc, #108]	; (8000990 <I2C_PeriClkCntrl+0xa4>)
 8000922:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000926:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000928:	e02a      	b.n	8000980 <I2C_PeriClkCntrl+0x94>
		else if(pI2Cx == I2C3)
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	4a1a      	ldr	r2, [pc, #104]	; (8000998 <I2C_PeriClkCntrl+0xac>)
 800092e:	4293      	cmp	r3, r2
 8000930:	d126      	bne.n	8000980 <I2C_PeriClkCntrl+0x94>
			I2C2_CLK_EN();
 8000932:	4b17      	ldr	r3, [pc, #92]	; (8000990 <I2C_PeriClkCntrl+0xa4>)
 8000934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000936:	4a16      	ldr	r2, [pc, #88]	; (8000990 <I2C_PeriClkCntrl+0xa4>)
 8000938:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800093c:	6413      	str	r3, [r2, #64]	; 0x40
}
 800093e:	e01f      	b.n	8000980 <I2C_PeriClkCntrl+0x94>
		if(pI2Cx == I2C1)
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	4a12      	ldr	r2, [pc, #72]	; (800098c <I2C_PeriClkCntrl+0xa0>)
 8000944:	4293      	cmp	r3, r2
 8000946:	d106      	bne.n	8000956 <I2C_PeriClkCntrl+0x6a>
			I2C1_CLK_DI();
 8000948:	4b11      	ldr	r3, [pc, #68]	; (8000990 <I2C_PeriClkCntrl+0xa4>)
 800094a:	6a1b      	ldr	r3, [r3, #32]
 800094c:	4a10      	ldr	r2, [pc, #64]	; (8000990 <I2C_PeriClkCntrl+0xa4>)
 800094e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000952:	6213      	str	r3, [r2, #32]
}
 8000954:	e014      	b.n	8000980 <I2C_PeriClkCntrl+0x94>
		else if(pI2Cx == I2C2)
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	4a0e      	ldr	r2, [pc, #56]	; (8000994 <I2C_PeriClkCntrl+0xa8>)
 800095a:	4293      	cmp	r3, r2
 800095c:	d106      	bne.n	800096c <I2C_PeriClkCntrl+0x80>
			I2C2_CLK_DI();
 800095e:	4b0c      	ldr	r3, [pc, #48]	; (8000990 <I2C_PeriClkCntrl+0xa4>)
 8000960:	6a1b      	ldr	r3, [r3, #32]
 8000962:	4a0b      	ldr	r2, [pc, #44]	; (8000990 <I2C_PeriClkCntrl+0xa4>)
 8000964:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000968:	6213      	str	r3, [r2, #32]
}
 800096a:	e009      	b.n	8000980 <I2C_PeriClkCntrl+0x94>
		else if(pI2Cx == I2C3)
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	4a0a      	ldr	r2, [pc, #40]	; (8000998 <I2C_PeriClkCntrl+0xac>)
 8000970:	4293      	cmp	r3, r2
 8000972:	d105      	bne.n	8000980 <I2C_PeriClkCntrl+0x94>
			I2C3_CLK_DI();
 8000974:	4b06      	ldr	r3, [pc, #24]	; (8000990 <I2C_PeriClkCntrl+0xa4>)
 8000976:	6a1b      	ldr	r3, [r3, #32]
 8000978:	4a05      	ldr	r2, [pc, #20]	; (8000990 <I2C_PeriClkCntrl+0xa4>)
 800097a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800097e:	6213      	str	r3, [r2, #32]
}
 8000980:	bf00      	nop
 8000982:	370c      	adds	r7, #12
 8000984:	46bd      	mov	sp, r7
 8000986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098a:	4770      	bx	lr
 800098c:	40005400 	.word	0x40005400
 8000990:	40023800 	.word	0x40023800
 8000994:	40005800 	.word	0x40005800
 8000998:	40005c00 	.word	0x40005c00

0800099c <I2C_Init>:
 *
 * @Note              - NULL

 */
void I2C_Init(I2C_Handle_t *pI2CHandle)				//INITIALIZES I2C PORT
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b086      	sub	sp, #24
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
	uint32_t tempreg = 0;
 80009a4:	2300      	movs	r3, #0
 80009a6:	613b      	str	r3, [r7, #16]

	//Enable the I2Cx peripheral clock
	I2C_PeriClkCntrl(pI2CHandle->pI2Cx , ENABLE);
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	2101      	movs	r1, #1
 80009ae:	4618      	mov	r0, r3
 80009b0:	f7ff ff9c 	bl	80008ec <I2C_PeriClkCntrl>

	//ack control bit
	tempreg = 0;
 80009b4:	2300      	movs	r3, #0
 80009b6:	613b      	str	r3, [r7, #16]
	tempreg = (pI2CHandle->I2C_Config.I2C_ACKControl << 10);
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	799b      	ldrb	r3, [r3, #6]
 80009bc:	b2db      	uxtb	r3, r3
 80009be:	029b      	lsls	r3, r3, #10
 80009c0:	613b      	str	r3, [r7, #16]
	pI2CHandle->pI2Cx->CR1 |= tempreg;
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	6819      	ldr	r1, [r3, #0]
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	693a      	ldr	r2, [r7, #16]
 80009ce:	430a      	orrs	r2, r1
 80009d0:	601a      	str	r2, [r3, #0]

	//prog the device own address
	tempreg = 0;
 80009d2:	2300      	movs	r3, #0
 80009d4:	613b      	str	r3, [r7, #16]
	tempreg = pI2CHandle->I2C_Config.I2C_DeviceAddress << 1;
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	795b      	ldrb	r3, [r3, #5]
 80009da:	b2db      	uxtb	r3, r3
 80009dc:	005b      	lsls	r3, r3, #1
 80009de:	613b      	str	r3, [r7, #16]
	tempreg |= (0x1 << 14);
 80009e0:	693b      	ldr	r3, [r7, #16]
 80009e2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009e6:	613b      	str	r3, [r7, #16]
	pI2CHandle->pI2Cx->OAR1 |= tempreg;
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	6899      	ldr	r1, [r3, #8]
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	693a      	ldr	r2, [r7, #16]
 80009f4:	430a      	orrs	r2, r1
 80009f6:	609a      	str	r2, [r3, #8]

	//config the FREQ field of CR2
	tempreg = 0;
 80009f8:	2300      	movs	r3, #0
 80009fa:	613b      	str	r3, [r7, #16]
	tempreg = RCC_GetClkVal()/1000000U;
 80009fc:	f7ff ff2a 	bl	8000854 <RCC_GetClkVal>
 8000a00:	4602      	mov	r2, r0
 8000a02:	4b30      	ldr	r3, [pc, #192]	; (8000ac4 <I2C_Init+0x128>)
 8000a04:	fba3 2302 	umull	r2, r3, r3, r2
 8000a08:	0c9b      	lsrs	r3, r3, #18
 8000a0a:	613b      	str	r3, [r7, #16]
	pI2CHandle->pI2Cx->CR2 |= (tempreg & ( 0x3F));
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	6859      	ldr	r1, [r3, #4]
 8000a12:	693b      	ldr	r3, [r7, #16]
 8000a14:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	430a      	orrs	r2, r1
 8000a1e:	605a      	str	r2, [r3, #4]
 *
 *
 */

	//CCR Calculations
	uint16_t ccr_value = 0;
 8000a20:	2300      	movs	r3, #0
 8000a22:	81fb      	strh	r3, [r7, #14]
	tempreg = 0;
 8000a24:	2300      	movs	r3, #0
 8000a26:	613b      	str	r3, [r7, #16]

	if(pI2CHandle->I2C_Config.I2C_SCLSpeed <= I2C_SCL_SPEED_SM)
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	791b      	ldrb	r3, [r3, #4]
	{
		ccr_value =  (RCC_GetClkVal() / (2 * pI2CHandle->I2C_Config.I2C_SCLSpeed));
 8000a2c:	f7ff ff12 	bl	8000854 <RCC_GetClkVal>
 8000a30:	4602      	mov	r2, r0
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	791b      	ldrb	r3, [r3, #4]
 8000a36:	b2db      	uxtb	r3, r3
 8000a38:	005b      	lsls	r3, r3, #1
 8000a3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a3e:	81fb      	strh	r3, [r7, #14]
		tempreg = (ccr_value & (0xFFF));
 8000a40:	89fb      	ldrh	r3, [r7, #14]
 8000a42:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000a46:	613b      	str	r3, [r7, #16]

		pI2CHandle->pI2Cx->CCR |= (pI2CHandle->I2C_Config.I2C_FMDutyCycle << 14 );
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	79db      	ldrb	r3, [r3, #7]
 8000a4c:	b2db      	uxtb	r3, r3
 8000a4e:	0399      	lsls	r1, r3, #14
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	69da      	ldr	r2, [r3, #28]
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	430a      	orrs	r2, r1
 8000a5c:	61da      	str	r2, [r3, #28]
		pI2CHandle->pI2Cx->CCR &= ~(0x1 << 15);
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	69da      	ldr	r2, [r3, #28]
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000a6c:	61da      	str	r2, [r3, #28]
		pI2CHandle->pI2Cx->CCR |= (tempreg);
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	69d9      	ldr	r1, [r3, #28]
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	693a      	ldr	r2, [r7, #16]
 8000a7a:	430a      	orrs	r2, r1
 8000a7c:	61da      	str	r2, [r3, #28]
			pI2CHandle->pI2Cx->CCR |= (tempreg);

		}
	}

	uint32_t temp = 0;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	617b      	str	r3, [r7, #20]

	//TRISE Configuration
	if(pI2CHandle->I2C_Config.I2C_SCLSpeed <= I2C_SCL_SPEED_SM)
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	791b      	ldrb	r3, [r3, #4]
	{
		temp = ((( RCC_GetClkVal()*1 )/1000000U ) + 1);
 8000a86:	f7ff fee5 	bl	8000854 <RCC_GetClkVal>
 8000a8a:	4602      	mov	r2, r0
 8000a8c:	4b0d      	ldr	r3, [pc, #52]	; (8000ac4 <I2C_Init+0x128>)
 8000a8e:	fba3 2302 	umull	r2, r3, r3, r2
 8000a92:	0c9b      	lsrs	r3, r3, #18
 8000a94:	3301      	adds	r3, #1
 8000a96:	617b      	str	r3, [r7, #20]
	}else
	{
		temp = ((( RCC_GetClkVal()*300 )/1000000000U ) + 1);
	}

	pI2CHandle->pI2Cx->TRISE |= ((temp) & (0x3F));
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	6a19      	ldr	r1, [r3, #32]
 8000a9e:	697b      	ldr	r3, [r7, #20]
 8000aa0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	430a      	orrs	r2, r1
 8000aaa:	621a      	str	r2, [r3, #32]
	(void)temp;

	pI2CHandle->pI2Cx->CR1 |= (0x1 << I2C_CR1_PE);
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	681a      	ldr	r2, [r3, #0]
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	f042 0201 	orr.w	r2, r2, #1
 8000aba:	601a      	str	r2, [r3, #0]
}
 8000abc:	bf00      	nop
 8000abe:	3718      	adds	r7, #24
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bd80      	pop	{r7, pc}
 8000ac4:	431bde83 	.word	0x431bde83

08000ac8 <I2C_MasterSendData>:
 *
 * @Note              - NULL

 */
void I2C_MasterSendData(I2C_Handle_t *pI2CHandle, uint8_t *pTXBuffer, uint32_t Len, uint8_t SlaveAddr)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b086      	sub	sp, #24
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	60f8      	str	r0, [r7, #12]
 8000ad0:	60b9      	str	r1, [r7, #8]
 8000ad2:	607a      	str	r2, [r7, #4]
 8000ad4:	70fb      	strb	r3, [r7, #3]

	//1. 	Generate the start condition
	I2C_GenerateStartCondition(pI2CHandle->pI2Cx);
 8000ad6:	68fb      	ldr	r3, [r7, #12]
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	4618      	mov	r0, r3
 8000adc:	f7ff fe59 	bl	8000792 <I2C_GenerateStartCondition>

	//2.  Confirm that start Generation is completed by checking the SB flag in the SR1
	// Note: Until SB is cleared SCL will be stretched (pulled to LOW)
	while( !(I2C_GetFagStatus(pI2CHandle->pI2Cx, I2C_FLAG_SR1_SB)) );						//Be in while loop until SBin SR is set
 8000ae0:	bf00      	nop
 8000ae2:	68fb      	ldr	r3, [r7, #12]
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	2100      	movs	r1, #0
 8000ae8:	4618      	mov	r0, r3
 8000aea:	f7ff fe9c 	bl	8000826 <I2C_GetFagStatus>
 8000aee:	4603      	mov	r3, r0
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d0f6      	beq.n	8000ae2 <I2C_MasterSendData+0x1a>

	//3.   Send the address of the slave with R/nW bit set to w(0) (total 8 bits)
	I2C_ExecuteAddrPhase(pI2CHandle->pI2Cx, SlaveAddr, WRITE);
 8000af4:	68fb      	ldr	r3, [r7, #12]
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	78f9      	ldrb	r1, [r7, #3]
 8000afa:	2200      	movs	r2, #0
 8000afc:	4618      	mov	r0, r3
 8000afe:	f7ff fe58 	bl	80007b2 <I2C_ExecuteAddrPhase>

	//4.   Confirm that address phase is completed by checking the ADDR flag in the SR1
	while( !(pI2CHandle->pI2Cx->SR1 & (0x1 << I2C_SR1_ADDR)) );				//wait until ADDR bit of SR1 is set indicating end of address transmission
 8000b02:	bf00      	nop
 8000b04:	68fb      	ldr	r3, [r7, #12]
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	695b      	ldr	r3, [r3, #20]
 8000b0a:	f003 0302 	and.w	r3, r3, #2
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d0f8      	beq.n	8000b04 <I2C_MasterSendData+0x3c>

	//5.	Clear the ADDR flag according to its s/w response
	//Note:	Until the ADDR is cleared SCL will be stretched(pulled to LOW)
	uint32_t temp;

	temp = pI2CHandle->pI2Cx->SR1;
 8000b12:	68fb      	ldr	r3, [r7, #12]
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	695b      	ldr	r3, [r3, #20]
 8000b18:	617b      	str	r3, [r7, #20]
	temp = pI2CHandle->pI2Cx->SR2;
 8000b1a:	68fb      	ldr	r3, [r7, #12]
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	699b      	ldr	r3, [r3, #24]
 8000b20:	617b      	str	r3, [r7, #20]

	//6.	Send the data until Len becomes 0
	while(Len > 0)
 8000b22:	e014      	b.n	8000b4e <I2C_MasterSendData+0x86>
	{
		while( !(I2C_GetFagStatus(pI2CHandle->pI2Cx, I2C_FLAG_SR1_TxE)) );
 8000b24:	bf00      	nop
 8000b26:	68fb      	ldr	r3, [r7, #12]
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	2107      	movs	r1, #7
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	f7ff fe7a 	bl	8000826 <I2C_GetFagStatus>
 8000b32:	4603      	mov	r3, r0
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d0f6      	beq.n	8000b26 <I2C_MasterSendData+0x5e>

		pI2CHandle->pI2Cx->DR  =  *(pTXBuffer);
 8000b38:	68bb      	ldr	r3, [r7, #8]
 8000b3a:	781a      	ldrb	r2, [r3, #0]
 8000b3c:	68fb      	ldr	r3, [r7, #12]
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	611a      	str	r2, [r3, #16]
		pTXBuffer++;
 8000b42:	68bb      	ldr	r3, [r7, #8]
 8000b44:	3301      	adds	r3, #1
 8000b46:	60bb      	str	r3, [r7, #8]
		Len--;
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	3b01      	subs	r3, #1
 8000b4c:	607b      	str	r3, [r7, #4]
	while(Len > 0)
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d1e7      	bne.n	8000b24 <I2C_MasterSendData+0x5c>
	}

	//7.	When Len becomes zero wait for TXE = 1 && BTF = 1 before generating the STOP condition
	//Note: 	TXE=1, BTF=1 , means that both SR && DR are empty && nxt transmission should begin
	//				when BTF=1 SCL will be stretched (pulled to LOW)
	while(  !( (pI2CHandle->pI2Cx->SR1 >> I2C_SR1_TxE  &  0x1) && (pI2CHandle->pI2Cx->SR1 >> I2C_SR1_BTF & 0x1)  )  );
 8000b54:	bf00      	nop
 8000b56:	68fb      	ldr	r3, [r7, #12]
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	695b      	ldr	r3, [r3, #20]
 8000b5c:	09db      	lsrs	r3, r3, #7
 8000b5e:	f003 0301 	and.w	r3, r3, #1
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d0f7      	beq.n	8000b56 <I2C_MasterSendData+0x8e>
 8000b66:	68fb      	ldr	r3, [r7, #12]
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	695b      	ldr	r3, [r3, #20]
 8000b6c:	089b      	lsrs	r3, r3, #2
 8000b6e:	f003 0301 	and.w	r3, r3, #1
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d0ef      	beq.n	8000b56 <I2C_MasterSendData+0x8e>


	//8.	Generate STOP condition && master need not to wait for the completion of STOP condition.
	//Note:	generating STOP, automatically clears the BTF
	pI2CHandle->pI2Cx->CR1 |= (0x1 << I2C_CR1_STOP);
 8000b76:	68fb      	ldr	r3, [r7, #12]
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	681a      	ldr	r2, [r3, #0]
 8000b7c:	68fb      	ldr	r3, [r7, #12]
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000b84:	601a      	str	r2, [r3, #0]

	(void)temp;
	I2C_AppEventCallback(pI2CHandle, I2C_EV_Tx_COMPLETE);
 8000b86:	2100      	movs	r1, #0
 8000b88:	68f8      	ldr	r0, [r7, #12]
 8000b8a:	f000 f804 	bl	8000b96 <I2C_AppEventCallback>
}
 8000b8e:	bf00      	nop
 8000b90:	3718      	adds	r7, #24
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}

08000b96 <I2C_AppEventCallback>:
 *
 * @Note              - DO NOT REMOVE THIS FROM HERE

 */
__weak void I2C_AppEventCallback(I2C_Handle_t *pI2CHandle, uint8_t I2C_Event)
{
 8000b96:	b480      	push	{r7}
 8000b98:	b083      	sub	sp, #12
 8000b9a:	af00      	add	r7, sp, #0
 8000b9c:	6078      	str	r0, [r7, #4]
 8000b9e:	460b      	mov	r3, r1
 8000ba0:	70fb      	strb	r3, [r7, #3]

}
 8000ba2:	bf00      	nop
 8000ba4:	370c      	adds	r7, #12
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bac:	4770      	bx	lr
	...

08000bb0 <delay>:
#include"stm32f446xx_i2c.h"
#include"string.h"
#include"stdint.h"

void delay()
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	b083      	sub	sp, #12
 8000bb4:	af00      	add	r7, sp, #0
	for(uint32_t i=0; i<300000; i++);
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	607b      	str	r3, [r7, #4]
 8000bba:	e002      	b.n	8000bc2 <delay+0x12>
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	3301      	adds	r3, #1
 8000bc0:	607b      	str	r3, [r7, #4]
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	4a04      	ldr	r2, [pc, #16]	; (8000bd8 <delay+0x28>)
 8000bc6:	4293      	cmp	r3, r2
 8000bc8:	d9f8      	bls.n	8000bbc <delay+0xc>
}
 8000bca:	bf00      	nop
 8000bcc:	370c      	adds	r7, #12
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop
 8000bd8:	000493df 	.word	0x000493df

08000bdc <GPIO_ButtonConfig>:

void GPIO_ButtonConfig()
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b086      	sub	sp, #24
 8000be0:	af00      	add	r7, sp, #0
	GPIO_handle_t led, button;

	led.pGPIOx = GPIOA;
 8000be2:	4b17      	ldr	r3, [pc, #92]	; (8000c40 <GPIO_ButtonConfig+0x64>)
 8000be4:	60fb      	str	r3, [r7, #12]
	led.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_5;
 8000be6:	2305      	movs	r3, #5
 8000be8:	743b      	strb	r3, [r7, #16]
	led.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 8000bea:	2301      	movs	r3, #1
 8000bec:	747b      	strb	r3, [r7, #17]
	led.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	753b      	strb	r3, [r7, #20]
	led.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	74fb      	strb	r3, [r7, #19]
	led.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_LOW;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	74bb      	strb	r3, [r7, #18]

	GPIOA_CLK_EN();
 8000bfa:	4b12      	ldr	r3, [pc, #72]	; (8000c44 <GPIO_ButtonConfig+0x68>)
 8000bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bfe:	4a11      	ldr	r2, [pc, #68]	; (8000c44 <GPIO_ButtonConfig+0x68>)
 8000c00:	f043 0301 	orr.w	r3, r3, #1
 8000c04:	6313      	str	r3, [r2, #48]	; 0x30
	GPIO_Init(&led);
 8000c06:	f107 030c 	add.w	r3, r7, #12
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	f7ff fbcc 	bl	80003a8 <GPIO_Init>

	button.pGPIOx = GPIOC;
 8000c10:	4b0d      	ldr	r3, [pc, #52]	; (8000c48 <GPIO_ButtonConfig+0x6c>)
 8000c12:	603b      	str	r3, [r7, #0]
	button.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_12;
 8000c14:	230c      	movs	r3, #12
 8000c16:	713b      	strb	r3, [r7, #4]
	button.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IN;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	717b      	strb	r3, [r7, #5]
	button.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PIN_PD;
 8000c1c:	2302      	movs	r3, #2
 8000c1e:	71fb      	strb	r3, [r7, #7]
	button.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_LOW;
 8000c20:	2300      	movs	r3, #0
 8000c22:	71bb      	strb	r3, [r7, #6]

	GPIOC_CLK_EN();
 8000c24:	4b07      	ldr	r3, [pc, #28]	; (8000c44 <GPIO_ButtonConfig+0x68>)
 8000c26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c28:	4a06      	ldr	r2, [pc, #24]	; (8000c44 <GPIO_ButtonConfig+0x68>)
 8000c2a:	f043 0304 	orr.w	r3, r3, #4
 8000c2e:	6313      	str	r3, [r2, #48]	; 0x30
	GPIO_Init(&button);
 8000c30:	463b      	mov	r3, r7
 8000c32:	4618      	mov	r0, r3
 8000c34:	f7ff fbb8 	bl	80003a8 <GPIO_Init>
}
 8000c38:	bf00      	nop
 8000c3a:	3718      	adds	r7, #24
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bd80      	pop	{r7, pc}
 8000c40:	40020000 	.word	0x40020000
 8000c44:	40023800 	.word	0x40023800
 8000c48:	40020800 	.word	0x40020800

08000c4c <I2C1_GPIOInits>:
//global I2C handle variable
I2C_Handle_t I2C1Handle;


void I2C1_GPIOInits()
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b084      	sub	sp, #16
 8000c50:	af00      	add	r7, sp, #0
	//Initialize the GPIO pins to be used with I2C peripheral
	GPIO_handle_t 	I2CPins;

	I2CPins.pGPIOx = GPIOB;
 8000c52:	4b0e      	ldr	r3, [pc, #56]	; (8000c8c <I2C1_GPIOInits+0x40>)
 8000c54:	607b      	str	r3, [r7, #4]
	I2CPins.GPIO_PinConfig.GPIO_PinMode = GPIO_ALT_FN;
 8000c56:	2302      	movs	r3, #2
 8000c58:	727b      	strb	r3, [r7, #9]
	I2CPins.GPIO_PinConfig.GPIO_PinAltFunMode = 4;
 8000c5a:	2304      	movs	r3, #4
 8000c5c:	737b      	strb	r3, [r7, #13]
	I2CPins.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_LOW;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	72bb      	strb	r3, [r7, #10]
	I2CPins.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_OD;
 8000c62:	2301      	movs	r3, #1
 8000c64:	733b      	strb	r3, [r7, #12]
	I2CPins.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PIN_PU;			//Always keep this pulled up
 8000c66:	2301      	movs	r3, #1
 8000c68:	72fb      	strb	r3, [r7, #11]

	//SDA
	I2CPins.GPIO_PinConfig.GPIO_PinNumber  =  GPIO_PIN_9;
 8000c6a:	2309      	movs	r3, #9
 8000c6c:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&I2CPins);
 8000c6e:	1d3b      	adds	r3, r7, #4
 8000c70:	4618      	mov	r0, r3
 8000c72:	f7ff fb99 	bl	80003a8 <GPIO_Init>

	//SCL
	I2CPins.GPIO_PinConfig.GPIO_PinNumber  =  GPIO_PIN_6;
 8000c76:	2306      	movs	r3, #6
 8000c78:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&I2CPins);
 8000c7a:	1d3b      	adds	r3, r7, #4
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	f7ff fb93 	bl	80003a8 <GPIO_Init>



}
 8000c82:	bf00      	nop
 8000c84:	3710      	adds	r7, #16
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	bf00      	nop
 8000c8c:	40020400 	.word	0x40020400

08000c90 <I2C1_Inits>:

void I2C1_Inits()
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	af00      	add	r7, sp, #0

	//Initiliaze the I2C peripheral
	I2C1Handle.pI2Cx  = I2C1;
 8000c94:	4b09      	ldr	r3, [pc, #36]	; (8000cbc <I2C1_Inits+0x2c>)
 8000c96:	4a0a      	ldr	r2, [pc, #40]	; (8000cc0 <I2C1_Inits+0x30>)
 8000c98:	601a      	str	r2, [r3, #0]
	I2C1Handle.I2C_Config.I2C_ACKControl = I2C_ACK_EN;
 8000c9a:	4b08      	ldr	r3, [pc, #32]	; (8000cbc <I2C1_Inits+0x2c>)
 8000c9c:	2201      	movs	r2, #1
 8000c9e:	719a      	strb	r2, [r3, #6]
	I2C1Handle.I2C_Config.I2C_DeviceAddress  =  MASTER_ADDR;
 8000ca0:	4b06      	ldr	r3, [pc, #24]	; (8000cbc <I2C1_Inits+0x2c>)
 8000ca2:	2238      	movs	r2, #56	; 0x38
 8000ca4:	715a      	strb	r2, [r3, #5]
	I2C1Handle.I2C_Config.I2C_FMDutyCycle = I2C_FM_DUTY_2;
 8000ca6:	4b05      	ldr	r3, [pc, #20]	; (8000cbc <I2C1_Inits+0x2c>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	71da      	strb	r2, [r3, #7]
	I2C1Handle.I2C_Config.I2C_SCLSpeed = I2C_SCL_SPEED_SM;
 8000cac:	4b03      	ldr	r3, [pc, #12]	; (8000cbc <I2C1_Inits+0x2c>)
 8000cae:	22a0      	movs	r2, #160	; 0xa0
 8000cb0:	711a      	strb	r2, [r3, #4]

	I2C_Init(&I2C1Handle);
 8000cb2:	4802      	ldr	r0, [pc, #8]	; (8000cbc <I2C1_Inits+0x2c>)
 8000cb4:	f7ff fe72 	bl	800099c <I2C_Init>
}
 8000cb8:	bf00      	nop
 8000cba:	bd80      	pop	{r7, pc}
 8000cbc:	2000004c 	.word	0x2000004c
 8000cc0:	40005400 	.word	0x40005400

08000cc4 <main>:

int main()
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	af00      	add	r7, sp, #0

	//GPIO Button Init
	GPIO_ButtonConfig();
 8000cc8:	f7ff ff88 	bl	8000bdc <GPIO_ButtonConfig>

	//I2C pin initsI2C1Handle
	I2C1_GPIOInits();
 8000ccc:	f7ff ffbe 	bl	8000c4c <I2C1_GPIOInits>

	//I2C peripheral config
	I2C1_Inits();
 8000cd0:	f7ff ffde 	bl	8000c90 <I2C1_Inits>

	//Enable the Peripheral
	I2C_Enable( I2C1 , ENABLE);
 8000cd4:	2101      	movs	r1, #1
 8000cd6:	480b      	ldr	r0, [pc, #44]	; (8000d04 <main+0x40>)
 8000cd8:	f7ff fd89 	bl	80007ee <I2C_Enable>

	while(1)
	{
		if( GPIO_ReadIPin(GPIOC, GPIO_PIN_12) == GPIO_PIN_SET)
 8000cdc:	210c      	movs	r1, #12
 8000cde:	480a      	ldr	r0, [pc, #40]	; (8000d08 <main+0x44>)
 8000ce0:	f7ff fd2c 	bl	800073c <GPIO_ReadIPin>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	2b01      	cmp	r3, #1
 8000ce8:	d1f8      	bne.n	8000cdc <main+0x18>
		{//Send data
			delay();
 8000cea:	f7ff ff61 	bl	8000bb0 <delay>

			I2C_MasterSendData( &I2C1Handle, 0x1, 0x1, MPU_ADDR);
 8000cee:	2368      	movs	r3, #104	; 0x68
 8000cf0:	2201      	movs	r2, #1
 8000cf2:	2101      	movs	r1, #1
 8000cf4:	4805      	ldr	r0, [pc, #20]	; (8000d0c <main+0x48>)
 8000cf6:	f7ff fee7 	bl	8000ac8 <I2C_MasterSendData>

			GPIO_ToggleOPin(GPIOA, GPIO_PIN_5);
 8000cfa:	2105      	movs	r1, #5
 8000cfc:	4804      	ldr	r0, [pc, #16]	; (8000d10 <main+0x4c>)
 8000cfe:	f7ff fd33 	bl	8000768 <GPIO_ToggleOPin>
		if( GPIO_ReadIPin(GPIOC, GPIO_PIN_12) == GPIO_PIN_SET)
 8000d02:	e7eb      	b.n	8000cdc <main+0x18>
 8000d04:	40005400 	.word	0x40005400
 8000d08:	40020800 	.word	0x40020800
 8000d0c:	2000004c 	.word	0x2000004c
 8000d10:	40020000 	.word	0x40020000

08000d14 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000d14:	480d      	ldr	r0, [pc, #52]	; (8000d4c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000d16:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000d18:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d1c:	480c      	ldr	r0, [pc, #48]	; (8000d50 <LoopForever+0x6>)
  ldr r1, =_edata
 8000d1e:	490d      	ldr	r1, [pc, #52]	; (8000d54 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d20:	4a0d      	ldr	r2, [pc, #52]	; (8000d58 <LoopForever+0xe>)
  movs r3, #0
 8000d22:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d24:	e002      	b.n	8000d2c <LoopCopyDataInit>

08000d26 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d26:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d28:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d2a:	3304      	adds	r3, #4

08000d2c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d2c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d2e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d30:	d3f9      	bcc.n	8000d26 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d32:	4a0a      	ldr	r2, [pc, #40]	; (8000d5c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d34:	4c0a      	ldr	r4, [pc, #40]	; (8000d60 <LoopForever+0x16>)
  movs r3, #0
 8000d36:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d38:	e001      	b.n	8000d3e <LoopFillZerobss>

08000d3a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d3a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d3c:	3204      	adds	r2, #4

08000d3e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d3e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d40:	d3fb      	bcc.n	8000d3a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000d42:	f000 f811 	bl	8000d68 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000d46:	f7ff ffbd 	bl	8000cc4 <main>

08000d4a <LoopForever>:

LoopForever:
    b LoopForever
 8000d4a:	e7fe      	b.n	8000d4a <LoopForever>
  ldr   r0, =_estack
 8000d4c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d50:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d54:	20000030 	.word	0x20000030
  ldr r2, =_sidata
 8000d58:	08000dd0 	.word	0x08000dd0
  ldr r2, =_sbss
 8000d5c:	20000030 	.word	0x20000030
  ldr r4, =_ebss
 8000d60:	20000070 	.word	0x20000070

08000d64 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000d64:	e7fe      	b.n	8000d64 <ADC_IRQHandler>
	...

08000d68 <__libc_init_array>:
 8000d68:	b570      	push	{r4, r5, r6, lr}
 8000d6a:	4e0d      	ldr	r6, [pc, #52]	; (8000da0 <__libc_init_array+0x38>)
 8000d6c:	4c0d      	ldr	r4, [pc, #52]	; (8000da4 <__libc_init_array+0x3c>)
 8000d6e:	1ba4      	subs	r4, r4, r6
 8000d70:	10a4      	asrs	r4, r4, #2
 8000d72:	2500      	movs	r5, #0
 8000d74:	42a5      	cmp	r5, r4
 8000d76:	d109      	bne.n	8000d8c <__libc_init_array+0x24>
 8000d78:	4e0b      	ldr	r6, [pc, #44]	; (8000da8 <__libc_init_array+0x40>)
 8000d7a:	4c0c      	ldr	r4, [pc, #48]	; (8000dac <__libc_init_array+0x44>)
 8000d7c:	f000 f818 	bl	8000db0 <_init>
 8000d80:	1ba4      	subs	r4, r4, r6
 8000d82:	10a4      	asrs	r4, r4, #2
 8000d84:	2500      	movs	r5, #0
 8000d86:	42a5      	cmp	r5, r4
 8000d88:	d105      	bne.n	8000d96 <__libc_init_array+0x2e>
 8000d8a:	bd70      	pop	{r4, r5, r6, pc}
 8000d8c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000d90:	4798      	blx	r3
 8000d92:	3501      	adds	r5, #1
 8000d94:	e7ee      	b.n	8000d74 <__libc_init_array+0xc>
 8000d96:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000d9a:	4798      	blx	r3
 8000d9c:	3501      	adds	r5, #1
 8000d9e:	e7f2      	b.n	8000d86 <__libc_init_array+0x1e>
 8000da0:	08000dc8 	.word	0x08000dc8
 8000da4:	08000dc8 	.word	0x08000dc8
 8000da8:	08000dc8 	.word	0x08000dc8
 8000dac:	08000dcc 	.word	0x08000dcc

08000db0 <_init>:
 8000db0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000db2:	bf00      	nop
 8000db4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000db6:	bc08      	pop	{r3}
 8000db8:	469e      	mov	lr, r3
 8000dba:	4770      	bx	lr

08000dbc <_fini>:
 8000dbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000dbe:	bf00      	nop
 8000dc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000dc2:	bc08      	pop	{r3}
 8000dc4:	469e      	mov	lr, r3
 8000dc6:	4770      	bx	lr
