
MPU6050_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000022e4  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000cc  080024b4  080024b4  000124b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002580  08002580  0002009c  2**0
                  CONTENTS
  4 .ARM          00000000  08002580  08002580  0002009c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002580  08002580  0002009c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002580  08002580  00012580  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002584  08002584  00012584  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000009c  20000000  08002588  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000fc  2000009c  08002624  0002009c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000198  08002624  00020198  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003142  00000000  00000000  000200cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000788  00000000  00000000  0002320e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000001c8  00000000  00000000  00023998  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000180  00000000  00000000  00023b60  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00002baf  00000000  00000000  00023ce0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00001a90  00000000  00000000  0002688f  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0000b08f  00000000  00000000  0002831f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000333ae  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001130  00000000  00000000  0003342c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000009c 	.word	0x2000009c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800249c 	.word	0x0800249c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200000a0 	.word	0x200000a0
 800020c:	0800249c 	.word	0x0800249c

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <GPIO_PeriClkCntrl>:
 * @return  : void
 *
 * @Note	: none
 */
void GPIO_PeriClkCntrl(GPIO_regdef_t *pGPIOx, uint8_t En_Di)
{
 80002c0:	b480      	push	{r7}
 80002c2:	b083      	sub	sp, #12
 80002c4:	af00      	add	r7, sp, #0
 80002c6:	6078      	str	r0, [r7, #4]
 80002c8:	460b      	mov	r3, r1
 80002ca:	70fb      	strb	r3, [r7, #3]
	if(En_Di == ENABLE)
 80002cc:	78fb      	ldrb	r3, [r7, #3]
 80002ce:	2b01      	cmp	r3, #1
 80002d0:	d156      	bne.n	8000380 <GPIO_PeriClkCntrl+0xc0>
	{
		if(pGPIOx == GPIOA)
 80002d2:	687b      	ldr	r3, [r7, #4]
 80002d4:	4a5a      	ldr	r2, [pc, #360]	; (8000440 <GPIO_PeriClkCntrl+0x180>)
 80002d6:	4293      	cmp	r3, r2
 80002d8:	d106      	bne.n	80002e8 <GPIO_PeriClkCntrl+0x28>
		{
			GPIOA_CLK_EN();
 80002da:	4b5a      	ldr	r3, [pc, #360]	; (8000444 <GPIO_PeriClkCntrl+0x184>)
 80002dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002de:	4a59      	ldr	r2, [pc, #356]	; (8000444 <GPIO_PeriClkCntrl+0x184>)
 80002e0:	f043 0301 	orr.w	r3, r3, #1
 80002e4:	6313      	str	r3, [r2, #48]	; 0x30
 80002e6:	e04b      	b.n	8000380 <GPIO_PeriClkCntrl+0xc0>
		}
		else if(pGPIOx == GPIOB)
 80002e8:	687b      	ldr	r3, [r7, #4]
 80002ea:	4a57      	ldr	r2, [pc, #348]	; (8000448 <GPIO_PeriClkCntrl+0x188>)
 80002ec:	4293      	cmp	r3, r2
 80002ee:	d106      	bne.n	80002fe <GPIO_PeriClkCntrl+0x3e>
		{
			GPIOB_CLK_EN();
 80002f0:	4b54      	ldr	r3, [pc, #336]	; (8000444 <GPIO_PeriClkCntrl+0x184>)
 80002f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002f4:	4a53      	ldr	r2, [pc, #332]	; (8000444 <GPIO_PeriClkCntrl+0x184>)
 80002f6:	f043 0302 	orr.w	r3, r3, #2
 80002fa:	6313      	str	r3, [r2, #48]	; 0x30
 80002fc:	e040      	b.n	8000380 <GPIO_PeriClkCntrl+0xc0>
		}
		else if(pGPIOx == GPIOC)
 80002fe:	687b      	ldr	r3, [r7, #4]
 8000300:	4a52      	ldr	r2, [pc, #328]	; (800044c <GPIO_PeriClkCntrl+0x18c>)
 8000302:	4293      	cmp	r3, r2
 8000304:	d106      	bne.n	8000314 <GPIO_PeriClkCntrl+0x54>
		{
			GPIOC_CLK_EN();
 8000306:	4b4f      	ldr	r3, [pc, #316]	; (8000444 <GPIO_PeriClkCntrl+0x184>)
 8000308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800030a:	4a4e      	ldr	r2, [pc, #312]	; (8000444 <GPIO_PeriClkCntrl+0x184>)
 800030c:	f043 0304 	orr.w	r3, r3, #4
 8000310:	6313      	str	r3, [r2, #48]	; 0x30
 8000312:	e035      	b.n	8000380 <GPIO_PeriClkCntrl+0xc0>
		}
		else if(pGPIOx == GPIOD)
 8000314:	687b      	ldr	r3, [r7, #4]
 8000316:	4a4e      	ldr	r2, [pc, #312]	; (8000450 <GPIO_PeriClkCntrl+0x190>)
 8000318:	4293      	cmp	r3, r2
 800031a:	d106      	bne.n	800032a <GPIO_PeriClkCntrl+0x6a>
		{
			GPIOD_CLK_EN();
 800031c:	4b49      	ldr	r3, [pc, #292]	; (8000444 <GPIO_PeriClkCntrl+0x184>)
 800031e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000320:	4a48      	ldr	r2, [pc, #288]	; (8000444 <GPIO_PeriClkCntrl+0x184>)
 8000322:	f043 0308 	orr.w	r3, r3, #8
 8000326:	6313      	str	r3, [r2, #48]	; 0x30
 8000328:	e02a      	b.n	8000380 <GPIO_PeriClkCntrl+0xc0>
		}
		else if(pGPIOx == GPIOE)
 800032a:	687b      	ldr	r3, [r7, #4]
 800032c:	4a49      	ldr	r2, [pc, #292]	; (8000454 <GPIO_PeriClkCntrl+0x194>)
 800032e:	4293      	cmp	r3, r2
 8000330:	d106      	bne.n	8000340 <GPIO_PeriClkCntrl+0x80>
		{
			GPIOE_CLK_EN();
 8000332:	4b44      	ldr	r3, [pc, #272]	; (8000444 <GPIO_PeriClkCntrl+0x184>)
 8000334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000336:	4a43      	ldr	r2, [pc, #268]	; (8000444 <GPIO_PeriClkCntrl+0x184>)
 8000338:	f043 0310 	orr.w	r3, r3, #16
 800033c:	6313      	str	r3, [r2, #48]	; 0x30
 800033e:	e01f      	b.n	8000380 <GPIO_PeriClkCntrl+0xc0>
		}
		else if(pGPIOx == GPIOF)
 8000340:	687b      	ldr	r3, [r7, #4]
 8000342:	4a45      	ldr	r2, [pc, #276]	; (8000458 <GPIO_PeriClkCntrl+0x198>)
 8000344:	4293      	cmp	r3, r2
 8000346:	d106      	bne.n	8000356 <GPIO_PeriClkCntrl+0x96>
		{
			GPIOF_CLK_EN();
 8000348:	4b3e      	ldr	r3, [pc, #248]	; (8000444 <GPIO_PeriClkCntrl+0x184>)
 800034a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800034c:	4a3d      	ldr	r2, [pc, #244]	; (8000444 <GPIO_PeriClkCntrl+0x184>)
 800034e:	f043 0320 	orr.w	r3, r3, #32
 8000352:	6313      	str	r3, [r2, #48]	; 0x30
 8000354:	e014      	b.n	8000380 <GPIO_PeriClkCntrl+0xc0>
		}
		else if(pGPIOx == GPIOG)
 8000356:	687b      	ldr	r3, [r7, #4]
 8000358:	4a40      	ldr	r2, [pc, #256]	; (800045c <GPIO_PeriClkCntrl+0x19c>)
 800035a:	4293      	cmp	r3, r2
 800035c:	d106      	bne.n	800036c <GPIO_PeriClkCntrl+0xac>
		{
			GPIOG_CLK_EN();
 800035e:	4b39      	ldr	r3, [pc, #228]	; (8000444 <GPIO_PeriClkCntrl+0x184>)
 8000360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000362:	4a38      	ldr	r2, [pc, #224]	; (8000444 <GPIO_PeriClkCntrl+0x184>)
 8000364:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000368:	6313      	str	r3, [r2, #48]	; 0x30
 800036a:	e009      	b.n	8000380 <GPIO_PeriClkCntrl+0xc0>
		}
		else if(pGPIOx == GPIOH)
 800036c:	687b      	ldr	r3, [r7, #4]
 800036e:	4a3c      	ldr	r2, [pc, #240]	; (8000460 <GPIO_PeriClkCntrl+0x1a0>)
 8000370:	4293      	cmp	r3, r2
 8000372:	d105      	bne.n	8000380 <GPIO_PeriClkCntrl+0xc0>
		{
			GPIOH_CLK_EN();
 8000374:	4b33      	ldr	r3, [pc, #204]	; (8000444 <GPIO_PeriClkCntrl+0x184>)
 8000376:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000378:	4a32      	ldr	r2, [pc, #200]	; (8000444 <GPIO_PeriClkCntrl+0x184>)
 800037a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800037e:	6313      	str	r3, [r2, #48]	; 0x30
		}
	}

	if(En_Di == DISABLE)
 8000380:	78fb      	ldrb	r3, [r7, #3]
 8000382:	2b00      	cmp	r3, #0
 8000384:	d156      	bne.n	8000434 <GPIO_PeriClkCntrl+0x174>
	{
		if(pGPIOx == GPIOA)
 8000386:	687b      	ldr	r3, [r7, #4]
 8000388:	4a2d      	ldr	r2, [pc, #180]	; (8000440 <GPIO_PeriClkCntrl+0x180>)
 800038a:	4293      	cmp	r3, r2
 800038c:	d106      	bne.n	800039c <GPIO_PeriClkCntrl+0xdc>
		{
			GPIOA_CLK_DI();
 800038e:	4b2d      	ldr	r3, [pc, #180]	; (8000444 <GPIO_PeriClkCntrl+0x184>)
 8000390:	691b      	ldr	r3, [r3, #16]
 8000392:	4a2c      	ldr	r2, [pc, #176]	; (8000444 <GPIO_PeriClkCntrl+0x184>)
 8000394:	f043 0301 	orr.w	r3, r3, #1
 8000398:	6113      	str	r3, [r2, #16]
		{
			GPIOH_CLK_DI();
		}
	}

}
 800039a:	e04b      	b.n	8000434 <GPIO_PeriClkCntrl+0x174>
		else if(pGPIOx == GPIOB)
 800039c:	687b      	ldr	r3, [r7, #4]
 800039e:	4a2a      	ldr	r2, [pc, #168]	; (8000448 <GPIO_PeriClkCntrl+0x188>)
 80003a0:	4293      	cmp	r3, r2
 80003a2:	d106      	bne.n	80003b2 <GPIO_PeriClkCntrl+0xf2>
			GPIOB_CLK_DI();
 80003a4:	4b27      	ldr	r3, [pc, #156]	; (8000444 <GPIO_PeriClkCntrl+0x184>)
 80003a6:	691b      	ldr	r3, [r3, #16]
 80003a8:	4a26      	ldr	r2, [pc, #152]	; (8000444 <GPIO_PeriClkCntrl+0x184>)
 80003aa:	f043 0302 	orr.w	r3, r3, #2
 80003ae:	6113      	str	r3, [r2, #16]
}
 80003b0:	e040      	b.n	8000434 <GPIO_PeriClkCntrl+0x174>
		else if(pGPIOx == GPIOC)
 80003b2:	687b      	ldr	r3, [r7, #4]
 80003b4:	4a25      	ldr	r2, [pc, #148]	; (800044c <GPIO_PeriClkCntrl+0x18c>)
 80003b6:	4293      	cmp	r3, r2
 80003b8:	d106      	bne.n	80003c8 <GPIO_PeriClkCntrl+0x108>
			GPIOC_CLK_DI();
 80003ba:	4b22      	ldr	r3, [pc, #136]	; (8000444 <GPIO_PeriClkCntrl+0x184>)
 80003bc:	691b      	ldr	r3, [r3, #16]
 80003be:	4a21      	ldr	r2, [pc, #132]	; (8000444 <GPIO_PeriClkCntrl+0x184>)
 80003c0:	f043 0304 	orr.w	r3, r3, #4
 80003c4:	6113      	str	r3, [r2, #16]
}
 80003c6:	e035      	b.n	8000434 <GPIO_PeriClkCntrl+0x174>
		else if(pGPIOx == GPIOD)
 80003c8:	687b      	ldr	r3, [r7, #4]
 80003ca:	4a21      	ldr	r2, [pc, #132]	; (8000450 <GPIO_PeriClkCntrl+0x190>)
 80003cc:	4293      	cmp	r3, r2
 80003ce:	d106      	bne.n	80003de <GPIO_PeriClkCntrl+0x11e>
			GPIOD_CLK_DI();
 80003d0:	4b1c      	ldr	r3, [pc, #112]	; (8000444 <GPIO_PeriClkCntrl+0x184>)
 80003d2:	691b      	ldr	r3, [r3, #16]
 80003d4:	4a1b      	ldr	r2, [pc, #108]	; (8000444 <GPIO_PeriClkCntrl+0x184>)
 80003d6:	f043 0308 	orr.w	r3, r3, #8
 80003da:	6113      	str	r3, [r2, #16]
}
 80003dc:	e02a      	b.n	8000434 <GPIO_PeriClkCntrl+0x174>
		else if(pGPIOx == GPIOE)
 80003de:	687b      	ldr	r3, [r7, #4]
 80003e0:	4a1c      	ldr	r2, [pc, #112]	; (8000454 <GPIO_PeriClkCntrl+0x194>)
 80003e2:	4293      	cmp	r3, r2
 80003e4:	d106      	bne.n	80003f4 <GPIO_PeriClkCntrl+0x134>
			GPIOE_CLK_DI();
 80003e6:	4b17      	ldr	r3, [pc, #92]	; (8000444 <GPIO_PeriClkCntrl+0x184>)
 80003e8:	691b      	ldr	r3, [r3, #16]
 80003ea:	4a16      	ldr	r2, [pc, #88]	; (8000444 <GPIO_PeriClkCntrl+0x184>)
 80003ec:	f043 0310 	orr.w	r3, r3, #16
 80003f0:	6113      	str	r3, [r2, #16]
}
 80003f2:	e01f      	b.n	8000434 <GPIO_PeriClkCntrl+0x174>
		else if(pGPIOx == GPIOF)
 80003f4:	687b      	ldr	r3, [r7, #4]
 80003f6:	4a18      	ldr	r2, [pc, #96]	; (8000458 <GPIO_PeriClkCntrl+0x198>)
 80003f8:	4293      	cmp	r3, r2
 80003fa:	d106      	bne.n	800040a <GPIO_PeriClkCntrl+0x14a>
			GPIOF_CLK_DI();
 80003fc:	4b11      	ldr	r3, [pc, #68]	; (8000444 <GPIO_PeriClkCntrl+0x184>)
 80003fe:	691b      	ldr	r3, [r3, #16]
 8000400:	4a10      	ldr	r2, [pc, #64]	; (8000444 <GPIO_PeriClkCntrl+0x184>)
 8000402:	f043 0320 	orr.w	r3, r3, #32
 8000406:	6113      	str	r3, [r2, #16]
}
 8000408:	e014      	b.n	8000434 <GPIO_PeriClkCntrl+0x174>
		else if(pGPIOx == GPIOG)
 800040a:	687b      	ldr	r3, [r7, #4]
 800040c:	4a13      	ldr	r2, [pc, #76]	; (800045c <GPIO_PeriClkCntrl+0x19c>)
 800040e:	4293      	cmp	r3, r2
 8000410:	d106      	bne.n	8000420 <GPIO_PeriClkCntrl+0x160>
			GPIOG_CLK_DI();
 8000412:	4b0c      	ldr	r3, [pc, #48]	; (8000444 <GPIO_PeriClkCntrl+0x184>)
 8000414:	691b      	ldr	r3, [r3, #16]
 8000416:	4a0b      	ldr	r2, [pc, #44]	; (8000444 <GPIO_PeriClkCntrl+0x184>)
 8000418:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800041c:	6113      	str	r3, [r2, #16]
}
 800041e:	e009      	b.n	8000434 <GPIO_PeriClkCntrl+0x174>
		else if(pGPIOx == GPIOH)
 8000420:	687b      	ldr	r3, [r7, #4]
 8000422:	4a0f      	ldr	r2, [pc, #60]	; (8000460 <GPIO_PeriClkCntrl+0x1a0>)
 8000424:	4293      	cmp	r3, r2
 8000426:	d105      	bne.n	8000434 <GPIO_PeriClkCntrl+0x174>
			GPIOH_CLK_DI();
 8000428:	4b06      	ldr	r3, [pc, #24]	; (8000444 <GPIO_PeriClkCntrl+0x184>)
 800042a:	691b      	ldr	r3, [r3, #16]
 800042c:	4a05      	ldr	r2, [pc, #20]	; (8000444 <GPIO_PeriClkCntrl+0x184>)
 800042e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000432:	6113      	str	r3, [r2, #16]
}
 8000434:	bf00      	nop
 8000436:	370c      	adds	r7, #12
 8000438:	46bd      	mov	sp, r7
 800043a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800043e:	4770      	bx	lr
 8000440:	40020000 	.word	0x40020000
 8000444:	40023800 	.word	0x40023800
 8000448:	40020400 	.word	0x40020400
 800044c:	40020800 	.word	0x40020800
 8000450:	40020c00 	.word	0x40020c00
 8000454:	40021000 	.word	0x40021000
 8000458:	40021400 	.word	0x40021400
 800045c:	40021800 	.word	0x40021800
 8000460:	40021c00 	.word	0x40021c00

08000464 <GPIO_Init>:
 * @return  : void
 *
 * @Note	: NULL
 */
void GPIO_Init(GPIO_handle_t *pGPIOHandle)
{
 8000464:	b580      	push	{r7, lr}
 8000466:	b084      	sub	sp, #16
 8000468:	af00      	add	r7, sp, #0
 800046a:	6078      	str	r0, [r7, #4]
	uint32_t temp = 0;
 800046c:	2300      	movs	r3, #0
 800046e:	60fb      	str	r3, [r7, #12]

	//CONFIG RCC FOR THE GPIO PORT
	GPIO_PeriClkCntrl(pGPIOHandle->pGPIOx, ENABLE);
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	681b      	ldr	r3, [r3, #0]
 8000474:	2101      	movs	r1, #1
 8000476:	4618      	mov	r0, r3
 8000478:	f7ff ff22 	bl	80002c0 <GPIO_PeriClkCntrl>

	// CONFIGURE THE MODE OF GPIO PIN
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= 3)
 800047c:	687b      	ldr	r3, [r7, #4]
 800047e:	795b      	ldrb	r3, [r3, #5]
 8000480:	b2db      	uxtb	r3, r3
 8000482:	2b03      	cmp	r3, #3
 8000484:	d813      	bhi.n	80004ae <GPIO_Init+0x4a>
	{

		temp = ( pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000486:	687b      	ldr	r3, [r7, #4]
 8000488:	795b      	ldrb	r3, [r3, #5]
 800048a:	b2db      	uxtb	r3, r3
 800048c:	461a      	mov	r2, r3
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	791b      	ldrb	r3, [r3, #4]
 8000492:	b2db      	uxtb	r3, r3
 8000494:	005b      	lsls	r3, r3, #1
 8000496:	fa02 f303 	lsl.w	r3, r2, r3
 800049a:	60fb      	str	r3, [r7, #12]
		pGPIOHandle->pGPIOx->MODER |= temp;
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	681b      	ldr	r3, [r3, #0]
 80004a0:	6819      	ldr	r1, [r3, #0]
 80004a2:	687b      	ldr	r3, [r7, #4]
 80004a4:	681b      	ldr	r3, [r3, #0]
 80004a6:	68fa      	ldr	r2, [r7, #12]
 80004a8:	430a      	orrs	r2, r1
 80004aa:	601a      	str	r2, [r3, #0]
 80004ac:	e0c7      	b.n	800063e <GPIO_Init+0x1da>

	}
	else
	{
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT)
 80004ae:	687b      	ldr	r3, [r7, #4]
 80004b0:	795b      	ldrb	r3, [r3, #5]
 80004b2:	b2db      	uxtb	r3, r3
 80004b4:	2b04      	cmp	r3, #4
 80004b6:	d11a      	bne.n	80004ee <GPIO_Init+0x8a>
		{
			//CONFIGURE THE FTSR (FALLING TRIGGER SELECTION REGISTER)
			EXTI->FTSR |= (0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80004b8:	687b      	ldr	r3, [r7, #4]
 80004ba:	791b      	ldrb	r3, [r3, #4]
 80004bc:	b2db      	uxtb	r3, r3
 80004be:	461a      	mov	r2, r3
 80004c0:	2301      	movs	r3, #1
 80004c2:	fa03 f202 	lsl.w	r2, r3, r2
 80004c6:	4b9e      	ldr	r3, [pc, #632]	; (8000740 <GPIO_Init+0x2dc>)
 80004c8:	68db      	ldr	r3, [r3, #12]
 80004ca:	4611      	mov	r1, r2
 80004cc:	4a9c      	ldr	r2, [pc, #624]	; (8000740 <GPIO_Init+0x2dc>)
 80004ce:	430b      	orrs	r3, r1
 80004d0:	60d3      	str	r3, [r2, #12]
			//CLEAR RTSR
			EXTI->RTSR &= ~(0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80004d2:	687b      	ldr	r3, [r7, #4]
 80004d4:	791b      	ldrb	r3, [r3, #4]
 80004d6:	b2db      	uxtb	r3, r3
 80004d8:	461a      	mov	r2, r3
 80004da:	2301      	movs	r3, #1
 80004dc:	4093      	lsls	r3, r2
 80004de:	43da      	mvns	r2, r3
 80004e0:	4b97      	ldr	r3, [pc, #604]	; (8000740 <GPIO_Init+0x2dc>)
 80004e2:	689b      	ldr	r3, [r3, #8]
 80004e4:	4611      	mov	r1, r2
 80004e6:	4a96      	ldr	r2, [pc, #600]	; (8000740 <GPIO_Init+0x2dc>)
 80004e8:	400b      	ands	r3, r1
 80004ea:	6093      	str	r3, [r2, #8]
 80004ec:	e03e      	b.n	800056c <GPIO_Init+0x108>
		}
		else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT)
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	795b      	ldrb	r3, [r3, #5]
 80004f2:	b2db      	uxtb	r3, r3
 80004f4:	2b05      	cmp	r3, #5
 80004f6:	d11a      	bne.n	800052e <GPIO_Init+0xca>
		{
			//CONFIGURE THE RTSR (RISING TRIGGER SELECTION REGISTER
			EXTI->RTSR |= (0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	791b      	ldrb	r3, [r3, #4]
 80004fc:	b2db      	uxtb	r3, r3
 80004fe:	461a      	mov	r2, r3
 8000500:	2301      	movs	r3, #1
 8000502:	fa03 f202 	lsl.w	r2, r3, r2
 8000506:	4b8e      	ldr	r3, [pc, #568]	; (8000740 <GPIO_Init+0x2dc>)
 8000508:	689b      	ldr	r3, [r3, #8]
 800050a:	4611      	mov	r1, r2
 800050c:	4a8c      	ldr	r2, [pc, #560]	; (8000740 <GPIO_Init+0x2dc>)
 800050e:	430b      	orrs	r3, r1
 8000510:	6093      	str	r3, [r2, #8]
			//CLEAR FTSR
			EXTI->FTSR &= ~(0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	791b      	ldrb	r3, [r3, #4]
 8000516:	b2db      	uxtb	r3, r3
 8000518:	461a      	mov	r2, r3
 800051a:	2301      	movs	r3, #1
 800051c:	4093      	lsls	r3, r2
 800051e:	43da      	mvns	r2, r3
 8000520:	4b87      	ldr	r3, [pc, #540]	; (8000740 <GPIO_Init+0x2dc>)
 8000522:	68db      	ldr	r3, [r3, #12]
 8000524:	4611      	mov	r1, r2
 8000526:	4a86      	ldr	r2, [pc, #536]	; (8000740 <GPIO_Init+0x2dc>)
 8000528:	400b      	ands	r3, r1
 800052a:	60d3      	str	r3, [r2, #12]
 800052c:	e01e      	b.n	800056c <GPIO_Init+0x108>
		}
		else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT)
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	795b      	ldrb	r3, [r3, #5]
 8000532:	b2db      	uxtb	r3, r3
 8000534:	2b06      	cmp	r3, #6
 8000536:	d119      	bne.n	800056c <GPIO_Init+0x108>
		{
			//CONFIGURE BOTH RTSR AND FTSRpGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
			EXTI->FTSR |= (0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	791b      	ldrb	r3, [r3, #4]
 800053c:	b2db      	uxtb	r3, r3
 800053e:	461a      	mov	r2, r3
 8000540:	2301      	movs	r3, #1
 8000542:	fa03 f202 	lsl.w	r2, r3, r2
 8000546:	4b7e      	ldr	r3, [pc, #504]	; (8000740 <GPIO_Init+0x2dc>)
 8000548:	68db      	ldr	r3, [r3, #12]
 800054a:	4611      	mov	r1, r2
 800054c:	4a7c      	ldr	r2, [pc, #496]	; (8000740 <GPIO_Init+0x2dc>)
 800054e:	430b      	orrs	r3, r1
 8000550:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR |= (0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	791b      	ldrb	r3, [r3, #4]
 8000556:	b2db      	uxtb	r3, r3
 8000558:	461a      	mov	r2, r3
 800055a:	2301      	movs	r3, #1
 800055c:	fa03 f202 	lsl.w	r2, r3, r2
 8000560:	4b77      	ldr	r3, [pc, #476]	; (8000740 <GPIO_Init+0x2dc>)
 8000562:	689b      	ldr	r3, [r3, #8]
 8000564:	4611      	mov	r1, r2
 8000566:	4a76      	ldr	r2, [pc, #472]	; (8000740 <GPIO_Init+0x2dc>)
 8000568:	430b      	orrs	r3, r1
 800056a:	6093      	str	r3, [r2, #8]
		}

		//CONFIGURE THE GPIO PORT SELECTION IN SYSCFG_EXTICR
		uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber/2;
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	791b      	ldrb	r3, [r3, #4]
 8000570:	b2db      	uxtb	r3, r3
 8000572:	085b      	lsrs	r3, r3, #1
 8000574:	72fb      	strb	r3, [r7, #11]
		uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber%2;
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	791b      	ldrb	r3, [r3, #4]
 800057a:	b2db      	uxtb	r3, r3
 800057c:	f003 0301 	and.w	r3, r3, #1
 8000580:	72bb      	strb	r3, [r7, #10]

		uint8_t portcode = GPIO_BA_CODE(pGPIOHandle->pGPIOx);
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	681b      	ldr	r3, [r3, #0]
 8000586:	4a6f      	ldr	r2, [pc, #444]	; (8000744 <GPIO_Init+0x2e0>)
 8000588:	4293      	cmp	r3, r2
 800058a:	d032      	beq.n	80005f2 <GPIO_Init+0x18e>
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	4a6d      	ldr	r2, [pc, #436]	; (8000748 <GPIO_Init+0x2e4>)
 8000592:	4293      	cmp	r3, r2
 8000594:	d02b      	beq.n	80005ee <GPIO_Init+0x18a>
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	681b      	ldr	r3, [r3, #0]
 800059a:	4a6c      	ldr	r2, [pc, #432]	; (800074c <GPIO_Init+0x2e8>)
 800059c:	4293      	cmp	r3, r2
 800059e:	d024      	beq.n	80005ea <GPIO_Init+0x186>
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	4a6a      	ldr	r2, [pc, #424]	; (8000750 <GPIO_Init+0x2ec>)
 80005a6:	4293      	cmp	r3, r2
 80005a8:	d01d      	beq.n	80005e6 <GPIO_Init+0x182>
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	681b      	ldr	r3, [r3, #0]
 80005ae:	4a69      	ldr	r2, [pc, #420]	; (8000754 <GPIO_Init+0x2f0>)
 80005b0:	4293      	cmp	r3, r2
 80005b2:	d016      	beq.n	80005e2 <GPIO_Init+0x17e>
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	4a67      	ldr	r2, [pc, #412]	; (8000758 <GPIO_Init+0x2f4>)
 80005ba:	4293      	cmp	r3, r2
 80005bc:	d00f      	beq.n	80005de <GPIO_Init+0x17a>
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	681b      	ldr	r3, [r3, #0]
 80005c2:	4a66      	ldr	r2, [pc, #408]	; (800075c <GPIO_Init+0x2f8>)
 80005c4:	4293      	cmp	r3, r2
 80005c6:	d008      	beq.n	80005da <GPIO_Init+0x176>
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	4a64      	ldr	r2, [pc, #400]	; (8000760 <GPIO_Init+0x2fc>)
 80005ce:	4293      	cmp	r3, r2
 80005d0:	d101      	bne.n	80005d6 <GPIO_Init+0x172>
 80005d2:	2307      	movs	r3, #7
 80005d4:	e00e      	b.n	80005f4 <GPIO_Init+0x190>
 80005d6:	23ff      	movs	r3, #255	; 0xff
 80005d8:	e00c      	b.n	80005f4 <GPIO_Init+0x190>
 80005da:	2306      	movs	r3, #6
 80005dc:	e00a      	b.n	80005f4 <GPIO_Init+0x190>
 80005de:	2305      	movs	r3, #5
 80005e0:	e008      	b.n	80005f4 <GPIO_Init+0x190>
 80005e2:	2304      	movs	r3, #4
 80005e4:	e006      	b.n	80005f4 <GPIO_Init+0x190>
 80005e6:	2303      	movs	r3, #3
 80005e8:	e004      	b.n	80005f4 <GPIO_Init+0x190>
 80005ea:	2302      	movs	r3, #2
 80005ec:	e002      	b.n	80005f4 <GPIO_Init+0x190>
 80005ee:	2301      	movs	r3, #1
 80005f0:	e000      	b.n	80005f4 <GPIO_Init+0x190>
 80005f2:	2300      	movs	r3, #0
 80005f4:	727b      	strb	r3, [r7, #9]

		SYSCFG_CLK_EN();
 80005f6:	4b5b      	ldr	r3, [pc, #364]	; (8000764 <GPIO_Init+0x300>)
 80005f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80005fa:	4a5a      	ldr	r2, [pc, #360]	; (8000764 <GPIO_Init+0x300>)
 80005fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000600:	6453      	str	r3, [r2, #68]	; 0x44
		SYSCFG->EXTICR[temp1] |= ( portcode << 4*temp2 );
 8000602:	4a59      	ldr	r2, [pc, #356]	; (8000768 <GPIO_Init+0x304>)
 8000604:	7afb      	ldrb	r3, [r7, #11]
 8000606:	3302      	adds	r3, #2
 8000608:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800060c:	7a79      	ldrb	r1, [r7, #9]
 800060e:	7abb      	ldrb	r3, [r7, #10]
 8000610:	009b      	lsls	r3, r3, #2
 8000612:	fa01 f303 	lsl.w	r3, r1, r3
 8000616:	4618      	mov	r0, r3
 8000618:	4953      	ldr	r1, [pc, #332]	; (8000768 <GPIO_Init+0x304>)
 800061a:	7afb      	ldrb	r3, [r7, #11]
 800061c:	4302      	orrs	r2, r0
 800061e:	3302      	adds	r3, #2
 8000620:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


		//ENABLE THE EXTI INTERRUPT DELIVERY USING IMR
		EXTI->IMR |= (0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	791b      	ldrb	r3, [r3, #4]
 8000628:	b2db      	uxtb	r3, r3
 800062a:	461a      	mov	r2, r3
 800062c:	2301      	movs	r3, #1
 800062e:	fa03 f202 	lsl.w	r2, r3, r2
 8000632:	4b43      	ldr	r3, [pc, #268]	; (8000740 <GPIO_Init+0x2dc>)
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	4611      	mov	r1, r2
 8000638:	4a41      	ldr	r2, [pc, #260]	; (8000740 <GPIO_Init+0x2dc>)
 800063a:	430b      	orrs	r3, r1
 800063c:	6013      	str	r3, [r2, #0]

	}

	temp = 0;
 800063e:	2300      	movs	r3, #0
 8000640:	60fb      	str	r3, [r7, #12]
	// CONFIGURE THE SPEED
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	799b      	ldrb	r3, [r3, #6]
 8000646:	b2db      	uxtb	r3, r3
 8000648:	461a      	mov	r2, r3
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	791b      	ldrb	r3, [r3, #4]
 800064e:	b2db      	uxtb	r3, r3
 8000650:	005b      	lsls	r3, r3, #1
 8000652:	fa02 f303 	lsl.w	r3, r2, r3
 8000656:	60fb      	str	r3, [r7, #12]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	6899      	ldr	r1, [r3, #8]
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	68fa      	ldr	r2, [r7, #12]
 8000664:	430a      	orrs	r2, r1
 8000666:	609a      	str	r2, [r3, #8]

	temp = 0;
 8000668:	2300      	movs	r3, #0
 800066a:	60fb      	str	r3, [r7, #12]
	// CONFIGURE THE PUPD SETTINGS
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	79db      	ldrb	r3, [r3, #7]
 8000670:	b2db      	uxtb	r3, r3
 8000672:	461a      	mov	r2, r3
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	791b      	ldrb	r3, [r3, #4]
 8000678:	b2db      	uxtb	r3, r3
 800067a:	005b      	lsls	r3, r3, #1
 800067c:	fa02 f303 	lsl.w	r3, r2, r3
 8000680:	60fb      	str	r3, [r7, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	681b      	ldr	r3, [r3, #0]
 8000686:	68d9      	ldr	r1, [r3, #12]
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	68fa      	ldr	r2, [r7, #12]
 800068e:	430a      	orrs	r2, r1
 8000690:	60da      	str	r2, [r3, #12]

	temp = 0;
 8000692:	2300      	movs	r3, #0
 8000694:	60fb      	str	r3, [r7, #12]
	// CONFIGURE THE OPTYPE
	pGPIOHandle->pGPIOx->OTYPER |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	7a1b      	ldrb	r3, [r3, #8]
 800069a:	b2db      	uxtb	r3, r3
 800069c:	461a      	mov	r2, r3
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	791b      	ldrb	r3, [r3, #4]
 80006a2:	b2db      	uxtb	r3, r3
 80006a4:	fa02 f103 	lsl.w	r1, r2, r3
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	685a      	ldr	r2, [r3, #4]
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	430a      	orrs	r2, r1
 80006b4:	605a      	str	r2, [r3, #4]

	temp = 0;
 80006b6:	2300      	movs	r3, #0
 80006b8:	60fb      	str	r3, [r7, #12]
	// CONFIGURE THE ALTERNATE FUNCTIONALITY OF THE PIN
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_ALT_FN)
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	795b      	ldrb	r3, [r3, #5]
 80006be:	b2db      	uxtb	r3, r3
 80006c0:	2b02      	cmp	r3, #2
 80006c2:	f040 8094 	bne.w	80007ee <GPIO_Init+0x38a>
	{
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber <= 3)
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	791b      	ldrb	r3, [r3, #4]
 80006ca:	b2db      	uxtb	r3, r3
 80006cc:	2b03      	cmp	r3, #3
 80006ce:	d815      	bhi.n	80006fc <GPIO_Init+0x298>
		{
			temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4 * (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4)));
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	7a5b      	ldrb	r3, [r3, #9]
 80006d4:	b2db      	uxtb	r3, r3
 80006d6:	461a      	mov	r2, r3
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	791b      	ldrb	r3, [r3, #4]
 80006dc:	b2db      	uxtb	r3, r3
 80006de:	f003 0303 	and.w	r3, r3, #3
 80006e2:	009b      	lsls	r3, r3, #2
 80006e4:	fa02 f303 	lsl.w	r3, r2, r3
 80006e8:	60fb      	str	r3, [r7, #12]
			pGPIOHandle->pGPIOx->AFR[0] |= temp;
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	6a19      	ldr	r1, [r3, #32]
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	68fa      	ldr	r2, [r7, #12]
 80006f6:	430a      	orrs	r2, r1
 80006f8:	621a      	str	r2, [r3, #32]
		{
			temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (16 + 4 * (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4)));
			pGPIOHandle->pGPIOx->AFR[1] |= temp;
		}
	}
}
 80006fa:	e078      	b.n	80007ee <GPIO_Init+0x38a>
		else if((pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber <= 7) && (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber > 3))
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	791b      	ldrb	r3, [r3, #4]
 8000700:	b2db      	uxtb	r3, r3
 8000702:	2b07      	cmp	r3, #7
 8000704:	d832      	bhi.n	800076c <GPIO_Init+0x308>
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	791b      	ldrb	r3, [r3, #4]
 800070a:	b2db      	uxtb	r3, r3
 800070c:	2b03      	cmp	r3, #3
 800070e:	d92d      	bls.n	800076c <GPIO_Init+0x308>
			temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (16 + 4 * (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4)));
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	7a5b      	ldrb	r3, [r3, #9]
 8000714:	b2db      	uxtb	r3, r3
 8000716:	461a      	mov	r2, r3
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	791b      	ldrb	r3, [r3, #4]
 800071c:	b2db      	uxtb	r3, r3
 800071e:	f003 0303 	and.w	r3, r3, #3
 8000722:	3304      	adds	r3, #4
 8000724:	009b      	lsls	r3, r3, #2
 8000726:	fa02 f303 	lsl.w	r3, r2, r3
 800072a:	60fb      	str	r3, [r7, #12]
			pGPIOHandle->pGPIOx->AFR[0] |= temp;
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	6a19      	ldr	r1, [r3, #32]
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	68fa      	ldr	r2, [r7, #12]
 8000738:	430a      	orrs	r2, r1
 800073a:	621a      	str	r2, [r3, #32]
 800073c:	e057      	b.n	80007ee <GPIO_Init+0x38a>
 800073e:	bf00      	nop
 8000740:	40013c00 	.word	0x40013c00
 8000744:	40020000 	.word	0x40020000
 8000748:	40020400 	.word	0x40020400
 800074c:	40020800 	.word	0x40020800
 8000750:	40020c00 	.word	0x40020c00
 8000754:	40021000 	.word	0x40021000
 8000758:	40021400 	.word	0x40021400
 800075c:	40021800 	.word	0x40021800
 8000760:	40021c00 	.word	0x40021c00
 8000764:	40023800 	.word	0x40023800
 8000768:	40013800 	.word	0x40013800
		else if((pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber <= 11) && (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber > 7))
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	791b      	ldrb	r3, [r3, #4]
 8000770:	b2db      	uxtb	r3, r3
 8000772:	2b0b      	cmp	r3, #11
 8000774:	d81a      	bhi.n	80007ac <GPIO_Init+0x348>
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	791b      	ldrb	r3, [r3, #4]
 800077a:	b2db      	uxtb	r3, r3
 800077c:	2b07      	cmp	r3, #7
 800077e:	d915      	bls.n	80007ac <GPIO_Init+0x348>
			temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << ( 4 * (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4)));
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	7a5b      	ldrb	r3, [r3, #9]
 8000784:	b2db      	uxtb	r3, r3
 8000786:	461a      	mov	r2, r3
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	791b      	ldrb	r3, [r3, #4]
 800078c:	b2db      	uxtb	r3, r3
 800078e:	f003 0303 	and.w	r3, r3, #3
 8000792:	009b      	lsls	r3, r3, #2
 8000794:	fa02 f303 	lsl.w	r3, r2, r3
 8000798:	60fb      	str	r3, [r7, #12]
			pGPIOHandle->pGPIOx->AFR[1] |= temp;
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	68fa      	ldr	r2, [r7, #12]
 80007a6:	430a      	orrs	r2, r1
 80007a8:	625a      	str	r2, [r3, #36]	; 0x24
 80007aa:	e020      	b.n	80007ee <GPIO_Init+0x38a>
		else if((pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber <= 15) && (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber > 11))
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	791b      	ldrb	r3, [r3, #4]
 80007b0:	b2db      	uxtb	r3, r3
 80007b2:	2b0f      	cmp	r3, #15
 80007b4:	d81b      	bhi.n	80007ee <GPIO_Init+0x38a>
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	791b      	ldrb	r3, [r3, #4]
 80007ba:	b2db      	uxtb	r3, r3
 80007bc:	2b0b      	cmp	r3, #11
 80007be:	d916      	bls.n	80007ee <GPIO_Init+0x38a>
			temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (16 + 4 * (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4)));
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	7a5b      	ldrb	r3, [r3, #9]
 80007c4:	b2db      	uxtb	r3, r3
 80007c6:	461a      	mov	r2, r3
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	791b      	ldrb	r3, [r3, #4]
 80007cc:	b2db      	uxtb	r3, r3
 80007ce:	f003 0303 	and.w	r3, r3, #3
 80007d2:	3304      	adds	r3, #4
 80007d4:	009b      	lsls	r3, r3, #2
 80007d6:	fa02 f303 	lsl.w	r3, r2, r3
 80007da:	60fb      	str	r3, [r7, #12]
			pGPIOHandle->pGPIOx->AFR[1] |= temp;
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	68fa      	ldr	r2, [r7, #12]
 80007e8:	430a      	orrs	r2, r1
 80007ea:	625a      	str	r2, [r3, #36]	; 0x24
}
 80007ec:	e7ff      	b.n	80007ee <GPIO_Init+0x38a>
 80007ee:	bf00      	nop
 80007f0:	3710      	adds	r7, #16
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	bf00      	nop

080007f8 <GPIO_ReadIPin>:
 * @return  : void
 *
 * @Note	: Returns SET(1) or RESET(0)
 */
uint8_t GPIO_ReadIPin(GPIO_regdef_t *pGPIOx, uint8_t Pin_No)
{
 80007f8:	b480      	push	{r7}
 80007fa:	b085      	sub	sp, #20
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]
 8000800:	460b      	mov	r3, r1
 8000802:	70fb      	strb	r3, [r7, #3]

	uint8_t temp;

	temp = (uint8_t)( (pGPIOx->IDR >> Pin_No) & 0x00000001);
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	691a      	ldr	r2, [r3, #16]
 8000808:	78fb      	ldrb	r3, [r7, #3]
 800080a:	fa22 f303 	lsr.w	r3, r2, r3
 800080e:	b2db      	uxtb	r3, r3
 8000810:	f003 0301 	and.w	r3, r3, #1
 8000814:	73fb      	strb	r3, [r7, #15]

	return(temp);
 8000816:	7bfb      	ldrb	r3, [r7, #15]
}
 8000818:	4618      	mov	r0, r3
 800081a:	3714      	adds	r7, #20
 800081c:	46bd      	mov	sp, r7
 800081e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000822:	4770      	bx	lr

08000824 <GPIO_ToggleOPin>:
 * @return  : void
 *
 * @Note	: NULL
 */
void GPIO_ToggleOPin(GPIO_regdef_t *pGPIOx, uint8_t Pin_No)
{
 8000824:	b480      	push	{r7}
 8000826:	b083      	sub	sp, #12
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
 800082c:	460b      	mov	r3, r1
 800082e:	70fb      	strb	r3, [r7, #3]

	pGPIOx->ODR ^= (0x1 << Pin_No);
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	695b      	ldr	r3, [r3, #20]
 8000834:	78fa      	ldrb	r2, [r7, #3]
 8000836:	2101      	movs	r1, #1
 8000838:	fa01 f202 	lsl.w	r2, r1, r2
 800083c:	405a      	eors	r2, r3
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	615a      	str	r2, [r3, #20]
}
 8000842:	bf00      	nop
 8000844:	370c      	adds	r7, #12
 8000846:	46bd      	mov	sp, r7
 8000848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084c:	4770      	bx	lr

0800084e <I2C_GenerateStartCondition>:
 *
 * @Note              - private function

 */
static void I2C_GenerateStartCondition(I2C_RegDef_t *pI2Cx)
{
 800084e:	b480      	push	{r7}
 8000850:	b083      	sub	sp, #12
 8000852:	af00      	add	r7, sp, #0
 8000854:	6078      	str	r0, [r7, #4]
	pI2Cx->CR1 |= (0x1 << I2C_CR1_START);
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	601a      	str	r2, [r3, #0]
}
 8000862:	bf00      	nop
 8000864:	370c      	adds	r7, #12
 8000866:	46bd      	mov	sp, r7
 8000868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086c:	4770      	bx	lr

0800086e <I2C_ExecuteAddrPhase>:
 *
 * @Note              - private function

 */
static void I2C_ExecuteAddrPhase(I2C_RegDef_t *pI2Cx, uint8_t SlaveAddr, uint8_t mode)
{
 800086e:	b480      	push	{r7}
 8000870:	b083      	sub	sp, #12
 8000872:	af00      	add	r7, sp, #0
 8000874:	6078      	str	r0, [r7, #4]
 8000876:	460b      	mov	r3, r1
 8000878:	70fb      	strb	r3, [r7, #3]
 800087a:	4613      	mov	r3, r2
 800087c:	70bb      	strb	r3, [r7, #2]
	if(mode == WRITE)
 800087e:	78bb      	ldrb	r3, [r7, #2]
 8000880:	2b00      	cmp	r3, #0
 8000882:	d105      	bne.n	8000890 <I2C_ExecuteAddrPhase+0x22>
	{
		pI2Cx->DR  =  ( (SlaveAddr << 1) | 0x0 );								//Shifting the slave address left by in byte bringing in a 0 from right which is the new LSB
 8000884:	78fb      	ldrb	r3, [r7, #3]
 8000886:	005b      	lsls	r3, r3, #1
 8000888:	461a      	mov	r2, r3
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	611a      	str	r2, [r3, #16]
	}
	else
	{
		pI2Cx->DR = ( (SlaveAddr << 1) |  0x1 );
	}
}
 800088e:	e006      	b.n	800089e <I2C_ExecuteAddrPhase+0x30>
		pI2Cx->DR = ( (SlaveAddr << 1) |  0x1 );
 8000890:	78fb      	ldrb	r3, [r7, #3]
 8000892:	005b      	lsls	r3, r3, #1
 8000894:	f043 0301 	orr.w	r3, r3, #1
 8000898:	461a      	mov	r2, r3
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	611a      	str	r2, [r3, #16]
}
 800089e:	bf00      	nop
 80008a0:	370c      	adds	r7, #12
 80008a2:	46bd      	mov	sp, r7
 80008a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a8:	4770      	bx	lr

080008aa <I2C_Enable>:
 *
 * @Note              - NULL

 */
void I2C_Enable(I2C_RegDef_t *pI2Cx , uint8_t EN_DI)
{
 80008aa:	b480      	push	{r7}
 80008ac:	b083      	sub	sp, #12
 80008ae:	af00      	add	r7, sp, #0
 80008b0:	6078      	str	r0, [r7, #4]
 80008b2:	460b      	mov	r3, r1
 80008b4:	70fb      	strb	r3, [r7, #3]
	if(EN_DI == ENABLE)
 80008b6:	78fb      	ldrb	r3, [r7, #3]
 80008b8:	2b01      	cmp	r3, #1
 80008ba:	d106      	bne.n	80008ca <I2C_Enable+0x20>
		pI2Cx->CR1 |= ( 0x1 << I2C_CR1_PE );
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	f043 0201 	orr.w	r2, r3, #1
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	601a      	str	r2, [r3, #0]

	else pI2Cx->CR1 &= ~(0x1 << I2C_CR1_PE);

}
 80008c8:	e005      	b.n	80008d6 <I2C_Enable+0x2c>
	else pI2Cx->CR1 &= ~(0x1 << I2C_CR1_PE);
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	f023 0201 	bic.w	r2, r3, #1
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	601a      	str	r2, [r3, #0]
}
 80008d6:	bf00      	nop
 80008d8:	370c      	adds	r7, #12
 80008da:	46bd      	mov	sp, r7
 80008dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e0:	4770      	bx	lr

080008e2 <I2C_GetFagStatus>:
 *
 * @Note              - NULL

 */
uint8_t I2C_GetFagStatus(I2C_RegDef_t *pI2Cx, uint32_t FlagName)
{
 80008e2:	b480      	push	{r7}
 80008e4:	b083      	sub	sp, #12
 80008e6:	af00      	add	r7, sp, #0
 80008e8:	6078      	str	r0, [r7, #4]
 80008ea:	6039      	str	r1, [r7, #0]
	if( pI2Cx->SR1 & (0x1 << FlagName) )
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	695b      	ldr	r3, [r3, #20]
 80008f0:	2101      	movs	r1, #1
 80008f2:	683a      	ldr	r2, [r7, #0]
 80008f4:	fa01 f202 	lsl.w	r2, r1, r2
 80008f8:	4013      	ands	r3, r2
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d001      	beq.n	8000902 <I2C_GetFagStatus+0x20>
		return FLAG_SET;
 80008fe:	2301      	movs	r3, #1
 8000900:	e000      	b.n	8000904 <I2C_GetFagStatus+0x22>

	return FLAG_RESET;
 8000902:	2300      	movs	r3, #0
}
 8000904:	4618      	mov	r0, r3
 8000906:	370c      	adds	r7, #12
 8000908:	46bd      	mov	sp, r7
 800090a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090e:	4770      	bx	lr

08000910 <RCC_GetClkVal>:
 *
 * @Note              - NULL

 */
uint32_t RCC_GetClkVal(void)
{
 8000910:	b480      	push	{r7}
 8000912:	b085      	sub	sp, #20
 8000914:	af00      	add	r7, sp, #0
	uint32_t PCLK1, Clk_SCL, temp;
	uint8_t System_clk_status, AHB1_Prescalar, APB1_Prescalar;

	System_clk_status = ((RCC->CFGR >> 2 ) & (0x3));
 8000916:	4b20      	ldr	r3, [pc, #128]	; (8000998 <RCC_GetClkVal+0x88>)
 8000918:	689b      	ldr	r3, [r3, #8]
 800091a:	089b      	lsrs	r3, r3, #2
 800091c:	b2db      	uxtb	r3, r3
 800091e:	f003 0303 	and.w	r3, r3, #3
 8000922:	727b      	strb	r3, [r7, #9]

	if(System_clk_status == 0)
 8000924:	7a7b      	ldrb	r3, [r7, #9]
 8000926:	2b00      	cmp	r3, #0
 8000928:	d101      	bne.n	800092e <RCC_GetClkVal+0x1e>
	{
		//HSI
		Clk_SCL = 16000000;
 800092a:	4b1c      	ldr	r3, [pc, #112]	; (800099c <RCC_GetClkVal+0x8c>)
 800092c:	60fb      	str	r3, [r7, #12]
	}else if(System_clk_status == 3)
	{
		//PLL_R
	}

	temp = ((RCC->CFGR >> 4) & (0x4));
 800092e:	4b1a      	ldr	r3, [pc, #104]	; (8000998 <RCC_GetClkVal+0x88>)
 8000930:	689b      	ldr	r3, [r3, #8]
 8000932:	091b      	lsrs	r3, r3, #4
 8000934:	f003 0304 	and.w	r3, r3, #4
 8000938:	607b      	str	r3, [r7, #4]

	if(temp < 8)
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	2b07      	cmp	r3, #7
 800093e:	d802      	bhi.n	8000946 <RCC_GetClkVal+0x36>
	{
		AHB1_Prescalar = 1;
 8000940:	2301      	movs	r3, #1
 8000942:	72fb      	strb	r3, [r7, #11]
 8000944:	e006      	b.n	8000954 <RCC_GetClkVal+0x44>
	}else
	{
		AHB1_Prescalar = (AHB1P[temp] - 8);
 8000946:	4a16      	ldr	r2, [pc, #88]	; (80009a0 <RCC_GetClkVal+0x90>)
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800094e:	b2db      	uxtb	r3, r3
 8000950:	3b08      	subs	r3, #8
 8000952:	72fb      	strb	r3, [r7, #11]
	}

	temp = ((RCC->CFGR >> 10 ) & (0x3));
 8000954:	4b10      	ldr	r3, [pc, #64]	; (8000998 <RCC_GetClkVal+0x88>)
 8000956:	689b      	ldr	r3, [r3, #8]
 8000958:	0a9b      	lsrs	r3, r3, #10
 800095a:	f003 0303 	and.w	r3, r3, #3
 800095e:	607b      	str	r3, [r7, #4]

	if(temp < 4)
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	2b03      	cmp	r3, #3
 8000964:	d802      	bhi.n	800096c <RCC_GetClkVal+0x5c>
	{
		APB1_Prescalar = 1;
 8000966:	2301      	movs	r3, #1
 8000968:	72bb      	strb	r3, [r7, #10]
 800096a:	e006      	b.n	800097a <RCC_GetClkVal+0x6a>

	}else
	{
		APB1_Prescalar = (APB1p[temp] - 4);
 800096c:	4a0d      	ldr	r2, [pc, #52]	; (80009a4 <RCC_GetClkVal+0x94>)
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000974:	b2db      	uxtb	r3, r3
 8000976:	3b04      	subs	r3, #4
 8000978:	72bb      	strb	r3, [r7, #10]
	}

	PCLK1 = (Clk_SCL/ AHB1_Prescalar)/APB1_Prescalar;
 800097a:	7afb      	ldrb	r3, [r7, #11]
 800097c:	68fa      	ldr	r2, [r7, #12]
 800097e:	fbb2 f2f3 	udiv	r2, r2, r3
 8000982:	7abb      	ldrb	r3, [r7, #10]
 8000984:	fbb2 f3f3 	udiv	r3, r2, r3
 8000988:	603b      	str	r3, [r7, #0]

	return PCLK1;
 800098a:	683b      	ldr	r3, [r7, #0]
}
 800098c:	4618      	mov	r0, r3
 800098e:	3714      	adds	r7, #20
 8000990:	46bd      	mov	sp, r7
 8000992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000996:	4770      	bx	lr
 8000998:	40023800 	.word	0x40023800
 800099c:	00f42400 	.word	0x00f42400
 80009a0:	20000000 	.word	0x20000000
 80009a4:	20000020 	.word	0x20000020

080009a8 <I2C_PeriClkCntrl>:
 *
 * @Note              - NULL

 */
void I2C_PeriClkCntrl(I2C_RegDef_t *pI2Cx, uint8_t En_Di)
{
 80009a8:	b480      	push	{r7}
 80009aa:	b083      	sub	sp, #12
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
 80009b0:	460b      	mov	r3, r1
 80009b2:	70fb      	strb	r3, [r7, #3]
	if(En_Di  ==	 ENABLE)
 80009b4:	78fb      	ldrb	r3, [r7, #3]
 80009b6:	2b01      	cmp	r3, #1
 80009b8:	d120      	bne.n	80009fc <I2C_PeriClkCntrl+0x54>
	{
		if(pI2Cx == I2C1)
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	4a22      	ldr	r2, [pc, #136]	; (8000a48 <I2C_PeriClkCntrl+0xa0>)
 80009be:	4293      	cmp	r3, r2
 80009c0:	d106      	bne.n	80009d0 <I2C_PeriClkCntrl+0x28>
			I2C1_CLK_EN();
 80009c2:	4b22      	ldr	r3, [pc, #136]	; (8000a4c <I2C_PeriClkCntrl+0xa4>)
 80009c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009c6:	4a21      	ldr	r2, [pc, #132]	; (8000a4c <I2C_PeriClkCntrl+0xa4>)
 80009c8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80009cc:	6413      	str	r3, [r2, #64]	; 0x40
		else if(pI2Cx == I2C3)
			I2C3_CLK_DI();

	}

}
 80009ce:	e035      	b.n	8000a3c <I2C_PeriClkCntrl+0x94>
		else if(pI2Cx == I2C2)
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	4a1f      	ldr	r2, [pc, #124]	; (8000a50 <I2C_PeriClkCntrl+0xa8>)
 80009d4:	4293      	cmp	r3, r2
 80009d6:	d106      	bne.n	80009e6 <I2C_PeriClkCntrl+0x3e>
			I2C2_CLK_EN();
 80009d8:	4b1c      	ldr	r3, [pc, #112]	; (8000a4c <I2C_PeriClkCntrl+0xa4>)
 80009da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009dc:	4a1b      	ldr	r2, [pc, #108]	; (8000a4c <I2C_PeriClkCntrl+0xa4>)
 80009de:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80009e2:	6413      	str	r3, [r2, #64]	; 0x40
}
 80009e4:	e02a      	b.n	8000a3c <I2C_PeriClkCntrl+0x94>
		else if(pI2Cx == I2C3)
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	4a1a      	ldr	r2, [pc, #104]	; (8000a54 <I2C_PeriClkCntrl+0xac>)
 80009ea:	4293      	cmp	r3, r2
 80009ec:	d126      	bne.n	8000a3c <I2C_PeriClkCntrl+0x94>
			I2C2_CLK_EN();
 80009ee:	4b17      	ldr	r3, [pc, #92]	; (8000a4c <I2C_PeriClkCntrl+0xa4>)
 80009f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009f2:	4a16      	ldr	r2, [pc, #88]	; (8000a4c <I2C_PeriClkCntrl+0xa4>)
 80009f4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80009f8:	6413      	str	r3, [r2, #64]	; 0x40
}
 80009fa:	e01f      	b.n	8000a3c <I2C_PeriClkCntrl+0x94>
		if(pI2Cx == I2C1)
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	4a12      	ldr	r2, [pc, #72]	; (8000a48 <I2C_PeriClkCntrl+0xa0>)
 8000a00:	4293      	cmp	r3, r2
 8000a02:	d106      	bne.n	8000a12 <I2C_PeriClkCntrl+0x6a>
			I2C1_CLK_DI();
 8000a04:	4b11      	ldr	r3, [pc, #68]	; (8000a4c <I2C_PeriClkCntrl+0xa4>)
 8000a06:	6a1b      	ldr	r3, [r3, #32]
 8000a08:	4a10      	ldr	r2, [pc, #64]	; (8000a4c <I2C_PeriClkCntrl+0xa4>)
 8000a0a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000a0e:	6213      	str	r3, [r2, #32]
}
 8000a10:	e014      	b.n	8000a3c <I2C_PeriClkCntrl+0x94>
		else if(pI2Cx == I2C2)
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	4a0e      	ldr	r2, [pc, #56]	; (8000a50 <I2C_PeriClkCntrl+0xa8>)
 8000a16:	4293      	cmp	r3, r2
 8000a18:	d106      	bne.n	8000a28 <I2C_PeriClkCntrl+0x80>
			I2C2_CLK_DI();
 8000a1a:	4b0c      	ldr	r3, [pc, #48]	; (8000a4c <I2C_PeriClkCntrl+0xa4>)
 8000a1c:	6a1b      	ldr	r3, [r3, #32]
 8000a1e:	4a0b      	ldr	r2, [pc, #44]	; (8000a4c <I2C_PeriClkCntrl+0xa4>)
 8000a20:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000a24:	6213      	str	r3, [r2, #32]
}
 8000a26:	e009      	b.n	8000a3c <I2C_PeriClkCntrl+0x94>
		else if(pI2Cx == I2C3)
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	4a0a      	ldr	r2, [pc, #40]	; (8000a54 <I2C_PeriClkCntrl+0xac>)
 8000a2c:	4293      	cmp	r3, r2
 8000a2e:	d105      	bne.n	8000a3c <I2C_PeriClkCntrl+0x94>
			I2C3_CLK_DI();
 8000a30:	4b06      	ldr	r3, [pc, #24]	; (8000a4c <I2C_PeriClkCntrl+0xa4>)
 8000a32:	6a1b      	ldr	r3, [r3, #32]
 8000a34:	4a05      	ldr	r2, [pc, #20]	; (8000a4c <I2C_PeriClkCntrl+0xa4>)
 8000a36:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000a3a:	6213      	str	r3, [r2, #32]
}
 8000a3c:	bf00      	nop
 8000a3e:	370c      	adds	r7, #12
 8000a40:	46bd      	mov	sp, r7
 8000a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a46:	4770      	bx	lr
 8000a48:	40005400 	.word	0x40005400
 8000a4c:	40023800 	.word	0x40023800
 8000a50:	40005800 	.word	0x40005800
 8000a54:	40005c00 	.word	0x40005c00

08000a58 <I2C_Init>:
 *
 * @Note              - NULL

 */
void I2C_Init(I2C_Handle_t *pI2CHandle)				//INITIALIZES I2C PORT
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b086      	sub	sp, #24
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
	uint32_t tempreg = 0;
 8000a60:	2300      	movs	r3, #0
 8000a62:	613b      	str	r3, [r7, #16]

	//Enable the I2Cx peripheral clock
	I2C_PeriClkCntrl(pI2CHandle->pI2Cx , ENABLE);
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	2101      	movs	r1, #1
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	f7ff ff9c 	bl	80009a8 <I2C_PeriClkCntrl>

	//ack control bit
	tempreg = 0;
 8000a70:	2300      	movs	r3, #0
 8000a72:	613b      	str	r3, [r7, #16]
	tempreg = (pI2CHandle->I2C_Config.I2C_ACKControl << 10);
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	799b      	ldrb	r3, [r3, #6]
 8000a78:	b2db      	uxtb	r3, r3
 8000a7a:	029b      	lsls	r3, r3, #10
 8000a7c:	613b      	str	r3, [r7, #16]
	pI2CHandle->pI2Cx->CR1 |= tempreg;
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	6819      	ldr	r1, [r3, #0]
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	693a      	ldr	r2, [r7, #16]
 8000a8a:	430a      	orrs	r2, r1
 8000a8c:	601a      	str	r2, [r3, #0]

	//prog the device own address
	tempreg = 0;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	613b      	str	r3, [r7, #16]
	tempreg = pI2CHandle->I2C_Config.I2C_DeviceAddress << 1;
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	795b      	ldrb	r3, [r3, #5]
 8000a96:	b2db      	uxtb	r3, r3
 8000a98:	005b      	lsls	r3, r3, #1
 8000a9a:	613b      	str	r3, [r7, #16]
	tempreg |= (0x1 << 14);
 8000a9c:	693b      	ldr	r3, [r7, #16]
 8000a9e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000aa2:	613b      	str	r3, [r7, #16]
	pI2CHandle->pI2Cx->OAR1 |= tempreg;
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	6899      	ldr	r1, [r3, #8]
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	693a      	ldr	r2, [r7, #16]
 8000ab0:	430a      	orrs	r2, r1
 8000ab2:	609a      	str	r2, [r3, #8]

	//config the FREQ field of CR2
	tempreg = 0;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	613b      	str	r3, [r7, #16]
	tempreg = RCC_GetClkVal()/1000000U;
 8000ab8:	f7ff ff2a 	bl	8000910 <RCC_GetClkVal>
 8000abc:	4602      	mov	r2, r0
 8000abe:	4b30      	ldr	r3, [pc, #192]	; (8000b80 <I2C_Init+0x128>)
 8000ac0:	fba3 2302 	umull	r2, r3, r3, r2
 8000ac4:	0c9b      	lsrs	r3, r3, #18
 8000ac6:	613b      	str	r3, [r7, #16]
	pI2CHandle->pI2Cx->CR2 |= (tempreg & ( 0x3F));
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	6859      	ldr	r1, [r3, #4]
 8000ace:	693b      	ldr	r3, [r7, #16]
 8000ad0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	430a      	orrs	r2, r1
 8000ada:	605a      	str	r2, [r3, #4]
 *
 *
 */

	//CCR Calculations
	uint16_t ccr_value = 0;
 8000adc:	2300      	movs	r3, #0
 8000ade:	81fb      	strh	r3, [r7, #14]
	tempreg = 0;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	613b      	str	r3, [r7, #16]

	if(pI2CHandle->I2C_Config.I2C_SCLSpeed <= I2C_SCL_SPEED_SM)
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	791b      	ldrb	r3, [r3, #4]
	{
		ccr_value =  (RCC_GetClkVal() / (2 * pI2CHandle->I2C_Config.I2C_SCLSpeed));
 8000ae8:	f7ff ff12 	bl	8000910 <RCC_GetClkVal>
 8000aec:	4602      	mov	r2, r0
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	791b      	ldrb	r3, [r3, #4]
 8000af2:	b2db      	uxtb	r3, r3
 8000af4:	005b      	lsls	r3, r3, #1
 8000af6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000afa:	81fb      	strh	r3, [r7, #14]
		tempreg = (ccr_value & (0xFFF));
 8000afc:	89fb      	ldrh	r3, [r7, #14]
 8000afe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000b02:	613b      	str	r3, [r7, #16]

		pI2CHandle->pI2Cx->CCR |= (pI2CHandle->I2C_Config.I2C_FMDutyCycle << 14 );
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	79db      	ldrb	r3, [r3, #7]
 8000b08:	b2db      	uxtb	r3, r3
 8000b0a:	0399      	lsls	r1, r3, #14
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	69da      	ldr	r2, [r3, #28]
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	430a      	orrs	r2, r1
 8000b18:	61da      	str	r2, [r3, #28]
		pI2CHandle->pI2Cx->CCR &= ~(0x1 << 15);
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	69da      	ldr	r2, [r3, #28]
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000b28:	61da      	str	r2, [r3, #28]
		pI2CHandle->pI2Cx->CCR |= (tempreg);
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	69d9      	ldr	r1, [r3, #28]
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	693a      	ldr	r2, [r7, #16]
 8000b36:	430a      	orrs	r2, r1
 8000b38:	61da      	str	r2, [r3, #28]
			pI2CHandle->pI2Cx->CCR |= (tempreg);

		}
	}

	uint32_t temp = 0;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	617b      	str	r3, [r7, #20]

	//TRISE Configuration
	if(pI2CHandle->I2C_Config.I2C_SCLSpeed <= I2C_SCL_SPEED_SM)
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	791b      	ldrb	r3, [r3, #4]
	{
		temp = ((( RCC_GetClkVal()*1 )/1000000U ) + 1);
 8000b42:	f7ff fee5 	bl	8000910 <RCC_GetClkVal>
 8000b46:	4602      	mov	r2, r0
 8000b48:	4b0d      	ldr	r3, [pc, #52]	; (8000b80 <I2C_Init+0x128>)
 8000b4a:	fba3 2302 	umull	r2, r3, r3, r2
 8000b4e:	0c9b      	lsrs	r3, r3, #18
 8000b50:	3301      	adds	r3, #1
 8000b52:	617b      	str	r3, [r7, #20]
	}else
	{
		temp = ((( RCC_GetClkVal()*300 )/1000000000U ) + 1);
	}

	pI2CHandle->pI2Cx->TRISE |= ((temp) & (0x3F));
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	6a19      	ldr	r1, [r3, #32]
 8000b5a:	697b      	ldr	r3, [r7, #20]
 8000b5c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	430a      	orrs	r2, r1
 8000b66:	621a      	str	r2, [r3, #32]
	(void)temp;

	pI2CHandle->pI2Cx->CR1 |= (0x1 << I2C_CR1_PE);
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	681a      	ldr	r2, [r3, #0]
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	f042 0201 	orr.w	r2, r2, #1
 8000b76:	601a      	str	r2, [r3, #0]
}
 8000b78:	bf00      	nop
 8000b7a:	3718      	adds	r7, #24
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	bd80      	pop	{r7, pc}
 8000b80:	431bde83 	.word	0x431bde83

08000b84 <I2C_MasterSendData>:
 *
 * @Note              - NULL

 */
void I2C_MasterSendData(I2C_Handle_t *pI2CHandle, uint8_t *pTXBuffer, uint32_t Len, uint8_t SlaveAddr)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b086      	sub	sp, #24
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	60f8      	str	r0, [r7, #12]
 8000b8c:	60b9      	str	r1, [r7, #8]
 8000b8e:	607a      	str	r2, [r7, #4]
 8000b90:	70fb      	strb	r3, [r7, #3]

	//1. 	Generate the start condition
	I2C_GenerateStartCondition(pI2CHandle->pI2Cx);
 8000b92:	68fb      	ldr	r3, [r7, #12]
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	4618      	mov	r0, r3
 8000b98:	f7ff fe59 	bl	800084e <I2C_GenerateStartCondition>

	//2.  Confirm that start Generation is completed by checking the SB flag in the SR1
	// Note: Until SB is cleared SCL will be stretched (pulled to LOW)
	while( !(I2C_GetFagStatus(pI2CHandle->pI2Cx, I2C_FLAG_SR1_SB)) );						//Be in while loop until SBin SR is set
 8000b9c:	bf00      	nop
 8000b9e:	68fb      	ldr	r3, [r7, #12]
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	2100      	movs	r1, #0
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	f7ff fe9c 	bl	80008e2 <I2C_GetFagStatus>
 8000baa:	4603      	mov	r3, r0
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d0f6      	beq.n	8000b9e <I2C_MasterSendData+0x1a>

	//3.   Send the address of the slave with R/nW bit set to w(0) (total 8 bits)
	I2C_ExecuteAddrPhase(pI2CHandle->pI2Cx, SlaveAddr, WRITE);
 8000bb0:	68fb      	ldr	r3, [r7, #12]
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	78f9      	ldrb	r1, [r7, #3]
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	4618      	mov	r0, r3
 8000bba:	f7ff fe58 	bl	800086e <I2C_ExecuteAddrPhase>

	//4.   Confirm that address phase is completed by checking the ADDR flag in the SR1
	while( !(pI2CHandle->pI2Cx->SR1 & (0x1 << I2C_SR1_ADDR)) );				//wait until ADDR bit of SR1 is set indicating end of address transmission
 8000bbe:	bf00      	nop
 8000bc0:	68fb      	ldr	r3, [r7, #12]
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	695b      	ldr	r3, [r3, #20]
 8000bc6:	f003 0302 	and.w	r3, r3, #2
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d0f8      	beq.n	8000bc0 <I2C_MasterSendData+0x3c>

	//5.	Clear the ADDR flag according to its s/w response
	//Note:	Until the ADDR is cleared SCL will be stretched(pulled to LOW)
	uint32_t temp;

	temp = pI2CHandle->pI2Cx->SR1;
 8000bce:	68fb      	ldr	r3, [r7, #12]
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	695b      	ldr	r3, [r3, #20]
 8000bd4:	617b      	str	r3, [r7, #20]
	temp = pI2CHandle->pI2Cx->SR2;
 8000bd6:	68fb      	ldr	r3, [r7, #12]
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	699b      	ldr	r3, [r3, #24]
 8000bdc:	617b      	str	r3, [r7, #20]

	//6.	Send the data until Len becomes 0
	while(Len > 0)
 8000bde:	e014      	b.n	8000c0a <I2C_MasterSendData+0x86>
	{
		while( !(I2C_GetFagStatus(pI2CHandle->pI2Cx, I2C_FLAG_SR1_TxE)) );
 8000be0:	bf00      	nop
 8000be2:	68fb      	ldr	r3, [r7, #12]
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	2107      	movs	r1, #7
 8000be8:	4618      	mov	r0, r3
 8000bea:	f7ff fe7a 	bl	80008e2 <I2C_GetFagStatus>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d0f6      	beq.n	8000be2 <I2C_MasterSendData+0x5e>

		pI2CHandle->pI2Cx->DR  =  *(pTXBuffer);
 8000bf4:	68bb      	ldr	r3, [r7, #8]
 8000bf6:	781a      	ldrb	r2, [r3, #0]
 8000bf8:	68fb      	ldr	r3, [r7, #12]
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	611a      	str	r2, [r3, #16]
		pTXBuffer++;
 8000bfe:	68bb      	ldr	r3, [r7, #8]
 8000c00:	3301      	adds	r3, #1
 8000c02:	60bb      	str	r3, [r7, #8]
		Len--;
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	3b01      	subs	r3, #1
 8000c08:	607b      	str	r3, [r7, #4]
	while(Len > 0)
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d1e7      	bne.n	8000be0 <I2C_MasterSendData+0x5c>
	}

	//7.	When Len becomes zero wait for TXE = 1 && BTF = 1 before generating the STOP condition
	//Note: 	TXE=1, BTF=1 , means that both SR && DR are empty && nxt transmission should begin
	//				when BTF=1 SCL will be stretched (pulled to LOW)
	while(  !( (pI2CHandle->pI2Cx->SR1 >> I2C_SR1_TxE  &  0x1) && (pI2CHandle->pI2Cx->SR1 >> I2C_SR1_BTF & 0x1)  )  );
 8000c10:	bf00      	nop
 8000c12:	68fb      	ldr	r3, [r7, #12]
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	695b      	ldr	r3, [r3, #20]
 8000c18:	09db      	lsrs	r3, r3, #7
 8000c1a:	f003 0301 	and.w	r3, r3, #1
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d0f7      	beq.n	8000c12 <I2C_MasterSendData+0x8e>
 8000c22:	68fb      	ldr	r3, [r7, #12]
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	695b      	ldr	r3, [r3, #20]
 8000c28:	089b      	lsrs	r3, r3, #2
 8000c2a:	f003 0301 	and.w	r3, r3, #1
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d0ef      	beq.n	8000c12 <I2C_MasterSendData+0x8e>


	//8.	Generate STOP condition && master need not to wait for the completion of STOP condition.
	//Note:	generating STOP, automatically clears the BTF
	pI2CHandle->pI2Cx->CR1 |= (0x1 << I2C_CR1_STOP);
 8000c32:	68fb      	ldr	r3, [r7, #12]
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	681a      	ldr	r2, [r3, #0]
 8000c38:	68fb      	ldr	r3, [r7, #12]
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000c40:	601a      	str	r2, [r3, #0]

	(void)temp;
	I2C_AppEventCallback(pI2CHandle, I2C_EV_Tx_COMPLETE);
 8000c42:	2100      	movs	r1, #0
 8000c44:	68f8      	ldr	r0, [r7, #12]
 8000c46:	f000 f8ae 	bl	8000da6 <I2C_AppEventCallback>
}
 8000c4a:	bf00      	nop
 8000c4c:	3718      	adds	r7, #24
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}

08000c52 <I2C_MasterReceiveData>:
 *
 * @Note              - NULL

 */
void I2C_MasterReceiveData(I2C_Handle_t *pI2CHandle, uint8_t *pRXBuffer, uint32_t Len, uint8_t SlaveAddr)
{
 8000c52:	b580      	push	{r7, lr}
 8000c54:	b086      	sub	sp, #24
 8000c56:	af00      	add	r7, sp, #0
 8000c58:	60f8      	str	r0, [r7, #12]
 8000c5a:	60b9      	str	r1, [r7, #8]
 8000c5c:	607a      	str	r2, [r7, #4]
 8000c5e:	70fb      	strb	r3, [r7, #3]
	uint32_t tempreg;

	//1. Generate the START condition
	pI2CHandle->pI2Cx->CR1 |= (0x1 << I2C_CR1_START);
 8000c60:	68fb      	ldr	r3, [r7, #12]
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	681a      	ldr	r2, [r3, #0]
 8000c66:	68fb      	ldr	r3, [r7, #12]
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000c6e:	601a      	str	r2, [r3, #0]

	//2. COnfirm that start generation is completed by checking the SB flag in the SR1
	//Note: Unitl SB is cleared SCl will be stretched (Pulled Low)
	while( !(I2C_GetFagStatus(pI2CHandle->pI2Cx, I2C_SR1_SB)) );
 8000c70:	bf00      	nop
 8000c72:	68fb      	ldr	r3, [r7, #12]
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	2100      	movs	r1, #0
 8000c78:	4618      	mov	r0, r3
 8000c7a:	f7ff fe32 	bl	80008e2 <I2C_GetFagStatus>
 8000c7e:	4603      	mov	r3, r0
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d0f6      	beq.n	8000c72 <I2C_MasterReceiveData+0x20>

	//3. Send the address of the slave with R/nW  bit set to R(1) (total 8 bits)
	I2C_ExecuteAddrPhase(pI2CHandle->pI2Cx, SlaveAddr, READ);
 8000c84:	68fb      	ldr	r3, [r7, #12]
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	78f9      	ldrb	r1, [r7, #3]
 8000c8a:	2201      	movs	r2, #1
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	f7ff fdee 	bl	800086e <I2C_ExecuteAddrPhase>

	//4. Wait until addr phase is completed by checking the ADDR flag in the SR1
	while( !(I2C_GetFagStatus(pI2CHandle->pI2Cx, I2C_SR1_ADDR)) );
 8000c92:	bf00      	nop
 8000c94:	68fb      	ldr	r3, [r7, #12]
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	2101      	movs	r1, #1
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	f7ff fe21 	bl	80008e2 <I2C_GetFagStatus>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d0f6      	beq.n	8000c94 <I2C_MasterReceiveData+0x42>

	//Procedure to read only 1 byte of data
	if(Len == 1)
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	2b01      	cmp	r3, #1
 8000caa:	d130      	bne.n	8000d0e <I2C_MasterReceiveData+0xbc>
	{
		// Disable Acking
		pI2CHandle->pI2Cx->CR1 &= ~(0x1 << I2C_CR1_ACK);
 8000cac:	68fb      	ldr	r3, [r7, #12]
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	681a      	ldr	r2, [r3, #0]
 8000cb2:	68fb      	ldr	r3, [r7, #12]
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000cba:	601a      	str	r2, [r3, #0]

		// Clear the ADDR flag
		tempreg = pI2CHandle->pI2Cx->SR1;
 8000cbc:	68fb      	ldr	r3, [r7, #12]
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	695b      	ldr	r3, [r3, #20]
 8000cc2:	613b      	str	r3, [r7, #16]
		tempreg = pI2CHandle->pI2Cx->SR2;
 8000cc4:	68fb      	ldr	r3, [r7, #12]
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	699b      	ldr	r3, [r3, #24]
 8000cca:	613b      	str	r3, [r7, #16]

		// Wait until RXNE becomes 1
		while( !(I2C_GetFagStatus(pI2CHandle->pI2Cx, I2C_SR1_RxNE)) );
 8000ccc:	bf00      	nop
 8000cce:	68fb      	ldr	r3, [r7, #12]
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	2106      	movs	r1, #6
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	f7ff fe04 	bl	80008e2 <I2C_GetFagStatus>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d0f6      	beq.n	8000cce <I2C_MasterReceiveData+0x7c>

		//Generate STOP condition
		pI2CHandle->pI2Cx->CR1 |= (0x1 << I2C_CR1_STOP);
 8000ce0:	68fb      	ldr	r3, [r7, #12]
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	681a      	ldr	r2, [r3, #0]
 8000ce6:	68fb      	ldr	r3, [r7, #12]
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000cee:	601a      	str	r2, [r3, #0]

		// Read data in to buffer
		*pRXBuffer |= pI2CHandle->pI2Cx->DR;
 8000cf0:	68fb      	ldr	r3, [r7, #12]
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	6919      	ldr	r1, [r3, #16]
 8000cf6:	68bb      	ldr	r3, [r7, #8]
 8000cf8:	781a      	ldrb	r2, [r3, #0]
 8000cfa:	b2cb      	uxtb	r3, r1
 8000cfc:	4313      	orrs	r3, r2
 8000cfe:	b2da      	uxtb	r2, r3
 8000d00:	68bb      	ldr	r3, [r7, #8]
 8000d02:	701a      	strb	r2, [r3, #0]

		pI2CHandle->RxSize = *pRXBuffer;
 8000d04:	68bb      	ldr	r3, [r7, #8]
 8000d06:	781b      	ldrb	r3, [r3, #0]
 8000d08:	461a      	mov	r2, r3
 8000d0a:	68fb      	ldr	r3, [r7, #12]
 8000d0c:	61da      	str	r2, [r3, #28]
	}

	//procedure to READ data from Slave when Len > 1
	if(Len > 1)
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	2b01      	cmp	r3, #1
 8000d12:	d933      	bls.n	8000d7c <I2C_MasterReceiveData+0x12a>
	{
		//Clear the ADDR flag
		tempreg = pI2CHandle->pI2Cx->SR2;
 8000d14:	68fb      	ldr	r3, [r7, #12]
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	699b      	ldr	r3, [r3, #24]
 8000d1a:	613b      	str	r3, [r7, #16]

		//Read the data until Len becomes Zero
		for(uint32_t i = Len+1; i > 1; i--)
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	3301      	adds	r3, #1
 8000d20:	617b      	str	r3, [r7, #20]
 8000d22:	e028      	b.n	8000d76 <I2C_MasterReceiveData+0x124>
		{
			if(i == 2)
 8000d24:	697b      	ldr	r3, [r7, #20]
 8000d26:	2b02      	cmp	r3, #2
 8000d28:	d10f      	bne.n	8000d4a <I2C_MasterReceiveData+0xf8>
			{
				//Clear the ACK bit
				pI2CHandle->pI2Cx->CR1 &= ~(0x1 << I2C_CR1_ACK);
 8000d2a:	68fb      	ldr	r3, [r7, #12]
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	681a      	ldr	r2, [r3, #0]
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000d38:	601a      	str	r2, [r3, #0]

				//Generate STOP condtion
				pI2CHandle->pI2Cx->CR1 |= (0x1 << I2C_CR1_STOP);
 8000d3a:	68fb      	ldr	r3, [r7, #12]
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	681a      	ldr	r2, [r3, #0]
 8000d40:	68fb      	ldr	r3, [r7, #12]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000d48:	601a      	str	r2, [r3, #0]
			}

			//Wait until RXNE becomes 1
			while( !(I2C_GetFagStatus(pI2CHandle->pI2Cx, I2C_SR1_RxNE)) );
 8000d4a:	bf00      	nop
 8000d4c:	68fb      	ldr	r3, [r7, #12]
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	2106      	movs	r1, #6
 8000d52:	4618      	mov	r0, r3
 8000d54:	f7ff fdc5 	bl	80008e2 <I2C_GetFagStatus>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d0f6      	beq.n	8000d4c <I2C_MasterReceiveData+0xfa>

			//Read the data from data reg in to buffer
			*pRXBuffer = pI2CHandle->pI2Cx->DR;
 8000d5e:	68fb      	ldr	r3, [r7, #12]
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	691b      	ldr	r3, [r3, #16]
 8000d64:	b2da      	uxtb	r2, r3
 8000d66:	68bb      	ldr	r3, [r7, #8]
 8000d68:	701a      	strb	r2, [r3, #0]

			//Increment the buffer Addr
			pRXBuffer++;
 8000d6a:	68bb      	ldr	r3, [r7, #8]
 8000d6c:	3301      	adds	r3, #1
 8000d6e:	60bb      	str	r3, [r7, #8]
		for(uint32_t i = Len+1; i > 1; i--)
 8000d70:	697b      	ldr	r3, [r7, #20]
 8000d72:	3b01      	subs	r3, #1
 8000d74:	617b      	str	r3, [r7, #20]
 8000d76:	697b      	ldr	r3, [r7, #20]
 8000d78:	2b01      	cmp	r3, #1
 8000d7a:	d8d3      	bhi.n	8000d24 <I2C_MasterReceiveData+0xd2>
		}
	}

	//Re-enable ACKing
	if(pI2CHandle->I2C_Config.I2C_ACKControl == I2C_ACK_EN)
 8000d7c:	68fb      	ldr	r3, [r7, #12]
 8000d7e:	799b      	ldrb	r3, [r3, #6]
 8000d80:	b2db      	uxtb	r3, r3
 8000d82:	2b01      	cmp	r3, #1
 8000d84:	d107      	bne.n	8000d96 <I2C_MasterReceiveData+0x144>
	{
		pI2CHandle->pI2Cx->CR1 |= (0x1 << I2C_CR1_ACK);
 8000d86:	68fb      	ldr	r3, [r7, #12]
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	681a      	ldr	r2, [r3, #0]
 8000d8c:	68fb      	ldr	r3, [r7, #12]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000d94:	601a      	str	r2, [r3, #0]
	}

	(void)tempreg;

	I2C_AppEventCallback(pI2CHandle, I2C_EV_Rx_COMPLETE);
 8000d96:	2101      	movs	r1, #1
 8000d98:	68f8      	ldr	r0, [r7, #12]
 8000d9a:	f000 f804 	bl	8000da6 <I2C_AppEventCallback>
}
 8000d9e:	bf00      	nop
 8000da0:	3718      	adds	r7, #24
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}

08000da6 <I2C_AppEventCallback>:
 *
 * @Note              - DO NOT REMOVE THIS FROM HERE

 */
__weak void I2C_AppEventCallback(I2C_Handle_t *pI2CHandle, uint8_t I2C_Event)
{
 8000da6:	b480      	push	{r7}
 8000da8:	b083      	sub	sp, #12
 8000daa:	af00      	add	r7, sp, #0
 8000dac:	6078      	str	r0, [r7, #4]
 8000dae:	460b      	mov	r3, r1
 8000db0:	70fb      	strb	r3, [r7, #3]

}
 8000db2:	bf00      	nop
 8000db4:	370c      	adds	r7, #12
 8000db6:	46bd      	mov	sp, r7
 8000db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbc:	4770      	bx	lr
	...

08000dc0 <delay>:
#include"stm32f446xx_i2c.h"
#include"string.h"
#include"stdint.h"

void delay()
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	b083      	sub	sp, #12
 8000dc4:	af00      	add	r7, sp, #0
	for(uint32_t i=0; i<300000; i++);
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	607b      	str	r3, [r7, #4]
 8000dca:	e002      	b.n	8000dd2 <delay+0x12>
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	3301      	adds	r3, #1
 8000dd0:	607b      	str	r3, [r7, #4]
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	4a04      	ldr	r2, [pc, #16]	; (8000de8 <delay+0x28>)
 8000dd6:	4293      	cmp	r3, r2
 8000dd8:	d9f8      	bls.n	8000dcc <delay+0xc>
}
 8000dda:	bf00      	nop
 8000ddc:	370c      	adds	r7, #12
 8000dde:	46bd      	mov	sp, r7
 8000de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de4:	4770      	bx	lr
 8000de6:	bf00      	nop
 8000de8:	000493df 	.word	0x000493df

08000dec <GPIO_ButtonConfig>:

void GPIO_ButtonConfig()
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b086      	sub	sp, #24
 8000df0:	af00      	add	r7, sp, #0
	GPIO_handle_t led, button;

	led.pGPIOx = GPIOA;
 8000df2:	4b17      	ldr	r3, [pc, #92]	; (8000e50 <GPIO_ButtonConfig+0x64>)
 8000df4:	60fb      	str	r3, [r7, #12]
	led.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_5;
 8000df6:	2305      	movs	r3, #5
 8000df8:	743b      	strb	r3, [r7, #16]
	led.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 8000dfa:	2301      	movs	r3, #1
 8000dfc:	747b      	strb	r3, [r7, #17]
	led.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	753b      	strb	r3, [r7, #20]
	led.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 8000e02:	2300      	movs	r3, #0
 8000e04:	74fb      	strb	r3, [r7, #19]
	led.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_LOW;
 8000e06:	2300      	movs	r3, #0
 8000e08:	74bb      	strb	r3, [r7, #18]

	GPIOA_CLK_EN();
 8000e0a:	4b12      	ldr	r3, [pc, #72]	; (8000e54 <GPIO_ButtonConfig+0x68>)
 8000e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e0e:	4a11      	ldr	r2, [pc, #68]	; (8000e54 <GPIO_ButtonConfig+0x68>)
 8000e10:	f043 0301 	orr.w	r3, r3, #1
 8000e14:	6313      	str	r3, [r2, #48]	; 0x30
	GPIO_Init(&led);
 8000e16:	f107 030c 	add.w	r3, r7, #12
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	f7ff fb22 	bl	8000464 <GPIO_Init>

	button.pGPIOx = GPIOC;
 8000e20:	4b0d      	ldr	r3, [pc, #52]	; (8000e58 <GPIO_ButtonConfig+0x6c>)
 8000e22:	603b      	str	r3, [r7, #0]
	button.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_12;
 8000e24:	230c      	movs	r3, #12
 8000e26:	713b      	strb	r3, [r7, #4]
	button.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IN;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	717b      	strb	r3, [r7, #5]
	button.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PIN_PD;
 8000e2c:	2302      	movs	r3, #2
 8000e2e:	71fb      	strb	r3, [r7, #7]
	button.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_LOW;
 8000e30:	2300      	movs	r3, #0
 8000e32:	71bb      	strb	r3, [r7, #6]

	GPIOC_CLK_EN();
 8000e34:	4b07      	ldr	r3, [pc, #28]	; (8000e54 <GPIO_ButtonConfig+0x68>)
 8000e36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e38:	4a06      	ldr	r2, [pc, #24]	; (8000e54 <GPIO_ButtonConfig+0x68>)
 8000e3a:	f043 0304 	orr.w	r3, r3, #4
 8000e3e:	6313      	str	r3, [r2, #48]	; 0x30
	GPIO_Init(&button);
 8000e40:	463b      	mov	r3, r7
 8000e42:	4618      	mov	r0, r3
 8000e44:	f7ff fb0e 	bl	8000464 <GPIO_Init>
}
 8000e48:	bf00      	nop
 8000e4a:	3718      	adds	r7, #24
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bd80      	pop	{r7, pc}
 8000e50:	40020000 	.word	0x40020000
 8000e54:	40023800 	.word	0x40023800
 8000e58:	40020800 	.word	0x40020800

08000e5c <I2C1_GPIOInits>:
//global I2C handle variable
I2C_Handle_t I2C1Handle;


void I2C1_GPIOInits()
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b084      	sub	sp, #16
 8000e60:	af00      	add	r7, sp, #0
	//Initialize the GPIO pins to be used with I2C peripheral
	GPIO_handle_t 	I2CPins;

	I2CPins.pGPIOx = GPIOB;
 8000e62:	4b0e      	ldr	r3, [pc, #56]	; (8000e9c <I2C1_GPIOInits+0x40>)
 8000e64:	607b      	str	r3, [r7, #4]
	I2CPins.GPIO_PinConfig.GPIO_PinMode = GPIO_ALT_FN;
 8000e66:	2302      	movs	r3, #2
 8000e68:	727b      	strb	r3, [r7, #9]
	I2CPins.GPIO_PinConfig.GPIO_PinAltFunMode = 4;
 8000e6a:	2304      	movs	r3, #4
 8000e6c:	737b      	strb	r3, [r7, #13]
	I2CPins.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_LOW;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	72bb      	strb	r3, [r7, #10]
	I2CPins.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_OD;
 8000e72:	2301      	movs	r3, #1
 8000e74:	733b      	strb	r3, [r7, #12]
	I2CPins.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PIN_PU;			//Always keep this pulled up
 8000e76:	2301      	movs	r3, #1
 8000e78:	72fb      	strb	r3, [r7, #11]

	//SDA
	I2CPins.GPIO_PinConfig.GPIO_PinNumber  =  SDA_PIN;
 8000e7a:	2303      	movs	r3, #3
 8000e7c:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&I2CPins);
 8000e7e:	1d3b      	adds	r3, r7, #4
 8000e80:	4618      	mov	r0, r3
 8000e82:	f7ff faef 	bl	8000464 <GPIO_Init>

	//SCL
	I2CPins.GPIO_PinConfig.GPIO_PinNumber  =  SCL_PIN;
 8000e86:	230a      	movs	r3, #10
 8000e88:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&I2CPins);
 8000e8a:	1d3b      	adds	r3, r7, #4
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	f7ff fae9 	bl	8000464 <GPIO_Init>



}
 8000e92:	bf00      	nop
 8000e94:	3710      	adds	r7, #16
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}
 8000e9a:	bf00      	nop
 8000e9c:	40020400 	.word	0x40020400

08000ea0 <I2C1_Inits>:

void I2C1_Inits()
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	af00      	add	r7, sp, #0

	//Initiliaze the I2C peripheral
	I2C1Handle.pI2Cx  = I2C2;
 8000ea4:	4b09      	ldr	r3, [pc, #36]	; (8000ecc <I2C1_Inits+0x2c>)
 8000ea6:	4a0a      	ldr	r2, [pc, #40]	; (8000ed0 <I2C1_Inits+0x30>)
 8000ea8:	601a      	str	r2, [r3, #0]
	I2C1Handle.I2C_Config.I2C_ACKControl = I2C_ACK_EN;
 8000eaa:	4b08      	ldr	r3, [pc, #32]	; (8000ecc <I2C1_Inits+0x2c>)
 8000eac:	2201      	movs	r2, #1
 8000eae:	719a      	strb	r2, [r3, #6]
	I2C1Handle.I2C_Config.I2C_DeviceAddress  =  MASTER_ADDR;
 8000eb0:	4b06      	ldr	r3, [pc, #24]	; (8000ecc <I2C1_Inits+0x2c>)
 8000eb2:	2238      	movs	r2, #56	; 0x38
 8000eb4:	715a      	strb	r2, [r3, #5]
	I2C1Handle.I2C_Config.I2C_FMDutyCycle = I2C_FM_DUTY_2;
 8000eb6:	4b05      	ldr	r3, [pc, #20]	; (8000ecc <I2C1_Inits+0x2c>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	71da      	strb	r2, [r3, #7]
	I2C1Handle.I2C_Config.I2C_SCLSpeed = I2C_SCL_SPEED_FM4K;
 8000ebc:	4b03      	ldr	r3, [pc, #12]	; (8000ecc <I2C1_Inits+0x2c>)
 8000ebe:	2280      	movs	r2, #128	; 0x80
 8000ec0:	711a      	strb	r2, [r3, #4]

	I2C_Init(&I2C1Handle);
 8000ec2:	4802      	ldr	r0, [pc, #8]	; (8000ecc <I2C1_Inits+0x2c>)
 8000ec4:	f7ff fdc8 	bl	8000a58 <I2C_Init>
}
 8000ec8:	bf00      	nop
 8000eca:	bd80      	pop	{r7, pc}
 8000ecc:	20000170 	.word	0x20000170
 8000ed0:	40005800 	.word	0x40005800

08000ed4 <main>:

int main()
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b082      	sub	sp, #8
 8000ed8:	af00      	add	r7, sp, #0
	initialise_monitor_handles();
 8000eda:	f001 fa65 	bl	80023a8 <initialise_monitor_handles>

	//GPIO Button Init
	GPIO_ButtonConfig();
 8000ede:	f7ff ff85 	bl	8000dec <GPIO_ButtonConfig>

	//I2C pin initsI2C1Handle
	I2C1_GPIOInits();
 8000ee2:	f7ff ffbb 	bl	8000e5c <I2C1_GPIOInits>

	//I2C peripheral config
	I2C1_Inits();
 8000ee6:	f7ff ffdb 	bl	8000ea0 <I2C1_Inits>

	//Enable the Peripheral
	I2C_Enable( I2C2 , ENABLE);
 8000eea:	2101      	movs	r1, #1
 8000eec:	4855      	ldr	r0, [pc, #340]	; (8001044 <main+0x170>)
 8000eee:	f7ff fcdc 	bl	80008aa <I2C_Enable>

	printf("%s", "Hellos\n\r");
 8000ef2:	4955      	ldr	r1, [pc, #340]	; (8001048 <main+0x174>)
 8000ef4:	4855      	ldr	r0, [pc, #340]	; (800104c <main+0x178>)
 8000ef6:	f000 f945 	bl	8001184 <iprintf>

	uint8_t data[3] = {0,0,0};
 8000efa:	2300      	movs	r3, #0
 8000efc:	703b      	strb	r3, [r7, #0]
 8000efe:	2300      	movs	r3, #0
 8000f00:	707b      	strb	r3, [r7, #1]
 8000f02:	2300      	movs	r3, #0
 8000f04:	70bb      	strb	r3, [r7, #2]
	uint16_t full_data = 0;
 8000f06:	2300      	movs	r3, #0
 8000f08:	80fb      	strh	r3, [r7, #6]

	while(1)
	{
		if( GPIO_ReadIPin(GPIOC, GPIO_PIN_12) == GPIO_PIN_SET)
 8000f0a:	210c      	movs	r1, #12
 8000f0c:	4850      	ldr	r0, [pc, #320]	; (8001050 <main+0x17c>)
 8000f0e:	f7ff fc73 	bl	80007f8 <GPIO_ReadIPin>
 8000f12:	4603      	mov	r3, r0
 8000f14:	2b01      	cmp	r3, #1
 8000f16:	d1f8      	bne.n	8000f0a <main+0x36>
		{//Send data
			delay();
 8000f18:	f7ff ff52 	bl	8000dc0 <delay>

			data[0] = 0x75;
 8000f1c:	2375      	movs	r3, #117	; 0x75
 8000f1e:	703b      	strb	r3, [r7, #0]
			I2C_MasterSendData(&I2C1Handle, &data[0], 1, MPU_ADDR);
 8000f20:	4639      	mov	r1, r7
 8000f22:	2368      	movs	r3, #104	; 0x68
 8000f24:	2201      	movs	r2, #1
 8000f26:	484b      	ldr	r0, [pc, #300]	; (8001054 <main+0x180>)
 8000f28:	f7ff fe2c 	bl	8000b84 <I2C_MasterSendData>
			I2C_MasterReceiveData(&I2C1Handle, &data[0], 1, MPU_ADDR);
 8000f2c:	4639      	mov	r1, r7
 8000f2e:	2368      	movs	r3, #104	; 0x68
 8000f30:	2201      	movs	r2, #1
 8000f32:	4848      	ldr	r0, [pc, #288]	; (8001054 <main+0x180>)
 8000f34:	f7ff fe8d 	bl	8000c52 <I2C_MasterReceiveData>

			data[0] = 0x68;
 8000f38:	2368      	movs	r3, #104	; 0x68
 8000f3a:	703b      	strb	r3, [r7, #0]
			data[1] = 0x1;
 8000f3c:	2301      	movs	r3, #1
 8000f3e:	707b      	strb	r3, [r7, #1]
			I2C_MasterSendData(&I2C1Handle, data, 2, MPU_ADDR);
 8000f40:	4639      	mov	r1, r7
 8000f42:	2368      	movs	r3, #104	; 0x68
 8000f44:	2202      	movs	r2, #2
 8000f46:	4843      	ldr	r0, [pc, #268]	; (8001054 <main+0x180>)
 8000f48:	f7ff fe1c 	bl	8000b84 <I2C_MasterSendData>


			data[0] = 0x6B;
 8000f4c:	236b      	movs	r3, #107	; 0x6b
 8000f4e:	703b      	strb	r3, [r7, #0]
			data[1] = 0x0;
 8000f50:	2300      	movs	r3, #0
 8000f52:	707b      	strb	r3, [r7, #1]
			I2C_MasterSendData(&I2C1Handle, data, 2, MPU_ADDR);
 8000f54:	4639      	mov	r1, r7
 8000f56:	2368      	movs	r3, #104	; 0x68
 8000f58:	2202      	movs	r2, #2
 8000f5a:	483e      	ldr	r0, [pc, #248]	; (8001054 <main+0x180>)
 8000f5c:	f7ff fe12 	bl	8000b84 <I2C_MasterSendData>

#define ENABLE_PRINT

			data[0] = 0x1C;		//Accelerometer Config set AFS
 8000f60:	231c      	movs	r3, #28
 8000f62:	703b      	strb	r3, [r7, #0]
			data[1] = (0x3 << 3);
 8000f64:	2318      	movs	r3, #24
 8000f66:	707b      	strb	r3, [r7, #1]
			I2C_MasterSendData( &I2C1Handle, data, 2, MPU_ADDR);
 8000f68:	4639      	mov	r1, r7
 8000f6a:	2368      	movs	r3, #104	; 0x68
 8000f6c:	2202      	movs	r2, #2
 8000f6e:	4839      	ldr	r0, [pc, #228]	; (8001054 <main+0x180>)
 8000f70:	f7ff fe08 	bl	8000b84 <I2C_MasterSendData>

			/*
			 * Start Reading Accelerometer sensor data
			 */
			data[0] = 0x3B; //XOUT_H
 8000f74:	233b      	movs	r3, #59	; 0x3b
 8000f76:	703b      	strb	r3, [r7, #0]
			I2C_MasterSendData( &I2C1Handle, &data[0], 1, MPU_ADDR);
 8000f78:	4639      	mov	r1, r7
 8000f7a:	2368      	movs	r3, #104	; 0x68
 8000f7c:	2201      	movs	r2, #1
 8000f7e:	4835      	ldr	r0, [pc, #212]	; (8001054 <main+0x180>)
 8000f80:	f7ff fe00 	bl	8000b84 <I2C_MasterSendData>
			I2C_MasterReceiveData(&I2C1Handle, &data[0], 1, MPU_ADDR);
 8000f84:	4639      	mov	r1, r7
 8000f86:	2368      	movs	r3, #104	; 0x68
 8000f88:	2201      	movs	r2, #1
 8000f8a:	4832      	ldr	r0, [pc, #200]	; (8001054 <main+0x180>)
 8000f8c:	f7ff fe61 	bl	8000c52 <I2C_MasterReceiveData>
			data[0] = 0x3C; //XOUT_L
 8000f90:	233c      	movs	r3, #60	; 0x3c
 8000f92:	703b      	strb	r3, [r7, #0]
			I2C_MasterSendData( &I2C1Handle, &data[0], 1, MPU_ADDR);
 8000f94:	4639      	mov	r1, r7
 8000f96:	2368      	movs	r3, #104	; 0x68
 8000f98:	2201      	movs	r2, #1
 8000f9a:	482e      	ldr	r0, [pc, #184]	; (8001054 <main+0x180>)
 8000f9c:	f7ff fdf2 	bl	8000b84 <I2C_MasterSendData>
			I2C_MasterReceiveData(&I2C1Handle, &data[0], 1, MPU_ADDR);
 8000fa0:	4639      	mov	r1, r7
 8000fa2:	2368      	movs	r3, #104	; 0x68
 8000fa4:	2201      	movs	r2, #1
 8000fa6:	482b      	ldr	r0, [pc, #172]	; (8001054 <main+0x180>)
 8000fa8:	f7ff fe53 	bl	8000c52 <I2C_MasterReceiveData>


			data[0] = 0x3D; //YOUT_H
 8000fac:	233d      	movs	r3, #61	; 0x3d
 8000fae:	703b      	strb	r3, [r7, #0]
			I2C_MasterSendData( &I2C1Handle, &data[0], 1, MPU_ADDR);
 8000fb0:	4639      	mov	r1, r7
 8000fb2:	2368      	movs	r3, #104	; 0x68
 8000fb4:	2201      	movs	r2, #1
 8000fb6:	4827      	ldr	r0, [pc, #156]	; (8001054 <main+0x180>)
 8000fb8:	f7ff fde4 	bl	8000b84 <I2C_MasterSendData>
			I2C_MasterReceiveData(&I2C1Handle, &data[0], 1, MPU_ADDR);
 8000fbc:	4639      	mov	r1, r7
 8000fbe:	2368      	movs	r3, #104	; 0x68
 8000fc0:	2201      	movs	r2, #1
 8000fc2:	4824      	ldr	r0, [pc, #144]	; (8001054 <main+0x180>)
 8000fc4:	f7ff fe45 	bl	8000c52 <I2C_MasterReceiveData>
			data[0] = 0x3E; //YOUT_L
 8000fc8:	233e      	movs	r3, #62	; 0x3e
 8000fca:	703b      	strb	r3, [r7, #0]
			I2C_MasterSendData( &I2C1Handle, &data[0], 1, MPU_ADDR);
 8000fcc:	4639      	mov	r1, r7
 8000fce:	2368      	movs	r3, #104	; 0x68
 8000fd0:	2201      	movs	r2, #1
 8000fd2:	4820      	ldr	r0, [pc, #128]	; (8001054 <main+0x180>)
 8000fd4:	f7ff fdd6 	bl	8000b84 <I2C_MasterSendData>
			I2C_MasterReceiveData(&I2C1Handle, &data[0], 1, MPU_ADDR);
 8000fd8:	4639      	mov	r1, r7
 8000fda:	2368      	movs	r3, #104	; 0x68
 8000fdc:	2201      	movs	r2, #1
 8000fde:	481d      	ldr	r0, [pc, #116]	; (8001054 <main+0x180>)
 8000fe0:	f7ff fe37 	bl	8000c52 <I2C_MasterReceiveData>


			data[0] = 0x3F; //ZOUT_H
 8000fe4:	233f      	movs	r3, #63	; 0x3f
 8000fe6:	703b      	strb	r3, [r7, #0]
			I2C_MasterSendData( &I2C1Handle, &data[0], 1, MPU_ADDR);
 8000fe8:	4639      	mov	r1, r7
 8000fea:	2368      	movs	r3, #104	; 0x68
 8000fec:	2201      	movs	r2, #1
 8000fee:	4819      	ldr	r0, [pc, #100]	; (8001054 <main+0x180>)
 8000ff0:	f7ff fdc8 	bl	8000b84 <I2C_MasterSendData>
			I2C_MasterReceiveData(&I2C1Handle, &data[0], 1, MPU_ADDR);
 8000ff4:	4639      	mov	r1, r7
 8000ff6:	2368      	movs	r3, #104	; 0x68
 8000ff8:	2201      	movs	r2, #1
 8000ffa:	4816      	ldr	r0, [pc, #88]	; (8001054 <main+0x180>)
 8000ffc:	f7ff fe29 	bl	8000c52 <I2C_MasterReceiveData>
			data[0] = 0x40; //ZOUT_L
 8001000:	2340      	movs	r3, #64	; 0x40
 8001002:	703b      	strb	r3, [r7, #0]
			I2C_MasterSendData( &I2C1Handle, &data[0], 1, MPU_ADDR);
 8001004:	4639      	mov	r1, r7
 8001006:	2368      	movs	r3, #104	; 0x68
 8001008:	2201      	movs	r2, #1
 800100a:	4812      	ldr	r0, [pc, #72]	; (8001054 <main+0x180>)
 800100c:	f7ff fdba 	bl	8000b84 <I2C_MasterSendData>
			I2C_MasterReceiveData(&I2C1Handle, &data[0], 1, MPU_ADDR);
 8001010:	4639      	mov	r1, r7
 8001012:	2368      	movs	r3, #104	; 0x68
 8001014:	2201      	movs	r2, #1
 8001016:	480f      	ldr	r0, [pc, #60]	; (8001054 <main+0x180>)
 8001018:	f7ff fe1b 	bl	8000c52 <I2C_MasterReceiveData>

#ifdef ENABLE_PRINT
			printf("%d\n\r", data);
 800101c:	463b      	mov	r3, r7
 800101e:	4619      	mov	r1, r3
 8001020:	480d      	ldr	r0, [pc, #52]	; (8001058 <main+0x184>)
 8001022:	f000 f8af 	bl	8001184 <iprintf>
			full_data |= ((uint16_t)data);
 8001026:	463b      	mov	r3, r7
 8001028:	b29a      	uxth	r2, r3
 800102a:	88fb      	ldrh	r3, [r7, #6]
 800102c:	4313      	orrs	r3, r2
 800102e:	80fb      	strh	r3, [r7, #6]
			printf("%d\n\r", full_data);
 8001030:	88fb      	ldrh	r3, [r7, #6]
 8001032:	4619      	mov	r1, r3
 8001034:	4808      	ldr	r0, [pc, #32]	; (8001058 <main+0x184>)
 8001036:	f000 f8a5 	bl	8001184 <iprintf>
#endif

			GPIO_ToggleOPin(GPIOA, GPIO_PIN_5);
 800103a:	2105      	movs	r1, #5
 800103c:	4807      	ldr	r0, [pc, #28]	; (800105c <main+0x188>)
 800103e:	f7ff fbf1 	bl	8000824 <GPIO_ToggleOPin>
		if( GPIO_ReadIPin(GPIOC, GPIO_PIN_12) == GPIO_PIN_SET)
 8001042:	e762      	b.n	8000f0a <main+0x36>
 8001044:	40005800 	.word	0x40005800
 8001048:	080024b4 	.word	0x080024b4
 800104c:	080024c0 	.word	0x080024c0
 8001050:	40020800 	.word	0x40020800
 8001054:	20000170 	.word	0x20000170
 8001058:	080024c4 	.word	0x080024c4
 800105c:	40020000 	.word	0x40020000

08001060 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b086      	sub	sp, #24
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001068:	4a14      	ldr	r2, [pc, #80]	; (80010bc <_sbrk+0x5c>)
 800106a:	4b15      	ldr	r3, [pc, #84]	; (80010c0 <_sbrk+0x60>)
 800106c:	1ad3      	subs	r3, r2, r3
 800106e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001070:	697b      	ldr	r3, [r7, #20]
 8001072:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001074:	4b13      	ldr	r3, [pc, #76]	; (80010c4 <_sbrk+0x64>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	2b00      	cmp	r3, #0
 800107a:	d102      	bne.n	8001082 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800107c:	4b11      	ldr	r3, [pc, #68]	; (80010c4 <_sbrk+0x64>)
 800107e:	4a12      	ldr	r2, [pc, #72]	; (80010c8 <_sbrk+0x68>)
 8001080:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001082:	4b10      	ldr	r3, [pc, #64]	; (80010c4 <_sbrk+0x64>)
 8001084:	681a      	ldr	r2, [r3, #0]
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	4413      	add	r3, r2
 800108a:	693a      	ldr	r2, [r7, #16]
 800108c:	429a      	cmp	r2, r3
 800108e:	d207      	bcs.n	80010a0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001090:	f000 f846 	bl	8001120 <__errno>
 8001094:	4602      	mov	r2, r0
 8001096:	230c      	movs	r3, #12
 8001098:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800109a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800109e:	e009      	b.n	80010b4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80010a0:	4b08      	ldr	r3, [pc, #32]	; (80010c4 <_sbrk+0x64>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80010a6:	4b07      	ldr	r3, [pc, #28]	; (80010c4 <_sbrk+0x64>)
 80010a8:	681a      	ldr	r2, [r3, #0]
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	4413      	add	r3, r2
 80010ae:	4a05      	ldr	r2, [pc, #20]	; (80010c4 <_sbrk+0x64>)
 80010b0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80010b2:	68fb      	ldr	r3, [r7, #12]
}
 80010b4:	4618      	mov	r0, r3
 80010b6:	3718      	adds	r7, #24
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bd80      	pop	{r7, pc}
 80010bc:	20020000 	.word	0x20020000
 80010c0:	00000400 	.word	0x00000400
 80010c4:	200000b8 	.word	0x200000b8
 80010c8:	20000198 	.word	0x20000198

080010cc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80010cc:	480d      	ldr	r0, [pc, #52]	; (8001104 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80010ce:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 80010d0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80010d4:	480c      	ldr	r0, [pc, #48]	; (8001108 <LoopForever+0x6>)
  ldr r1, =_edata
 80010d6:	490d      	ldr	r1, [pc, #52]	; (800110c <LoopForever+0xa>)
  ldr r2, =_sidata
 80010d8:	4a0d      	ldr	r2, [pc, #52]	; (8001110 <LoopForever+0xe>)
  movs r3, #0
 80010da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010dc:	e002      	b.n	80010e4 <LoopCopyDataInit>

080010de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010e2:	3304      	adds	r3, #4

080010e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010e8:	d3f9      	bcc.n	80010de <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010ea:	4a0a      	ldr	r2, [pc, #40]	; (8001114 <LoopForever+0x12>)
  ldr r4, =_ebss
 80010ec:	4c0a      	ldr	r4, [pc, #40]	; (8001118 <LoopForever+0x16>)
  movs r3, #0
 80010ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010f0:	e001      	b.n	80010f6 <LoopFillZerobss>

080010f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010f4:	3204      	adds	r2, #4

080010f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010f8:	d3fb      	bcc.n	80010f2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80010fa:	f000 f817 	bl	800112c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80010fe:	f7ff fee9 	bl	8000ed4 <main>

08001102 <LoopForever>:

LoopForever:
    b LoopForever
 8001102:	e7fe      	b.n	8001102 <LoopForever>
  ldr   r0, =_estack
 8001104:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001108:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800110c:	2000009c 	.word	0x2000009c
  ldr r2, =_sidata
 8001110:	08002588 	.word	0x08002588
  ldr r2, =_sbss
 8001114:	2000009c 	.word	0x2000009c
  ldr r4, =_ebss
 8001118:	20000198 	.word	0x20000198

0800111c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800111c:	e7fe      	b.n	800111c <ADC_IRQHandler>
	...

08001120 <__errno>:
 8001120:	4b01      	ldr	r3, [pc, #4]	; (8001128 <__errno+0x8>)
 8001122:	6818      	ldr	r0, [r3, #0]
 8001124:	4770      	bx	lr
 8001126:	bf00      	nop
 8001128:	20000030 	.word	0x20000030

0800112c <__libc_init_array>:
 800112c:	b570      	push	{r4, r5, r6, lr}
 800112e:	4e0d      	ldr	r6, [pc, #52]	; (8001164 <__libc_init_array+0x38>)
 8001130:	4c0d      	ldr	r4, [pc, #52]	; (8001168 <__libc_init_array+0x3c>)
 8001132:	1ba4      	subs	r4, r4, r6
 8001134:	10a4      	asrs	r4, r4, #2
 8001136:	2500      	movs	r5, #0
 8001138:	42a5      	cmp	r5, r4
 800113a:	d109      	bne.n	8001150 <__libc_init_array+0x24>
 800113c:	4e0b      	ldr	r6, [pc, #44]	; (800116c <__libc_init_array+0x40>)
 800113e:	4c0c      	ldr	r4, [pc, #48]	; (8001170 <__libc_init_array+0x44>)
 8001140:	f001 f9ac 	bl	800249c <_init>
 8001144:	1ba4      	subs	r4, r4, r6
 8001146:	10a4      	asrs	r4, r4, #2
 8001148:	2500      	movs	r5, #0
 800114a:	42a5      	cmp	r5, r4
 800114c:	d105      	bne.n	800115a <__libc_init_array+0x2e>
 800114e:	bd70      	pop	{r4, r5, r6, pc}
 8001150:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001154:	4798      	blx	r3
 8001156:	3501      	adds	r5, #1
 8001158:	e7ee      	b.n	8001138 <__libc_init_array+0xc>
 800115a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800115e:	4798      	blx	r3
 8001160:	3501      	adds	r5, #1
 8001162:	e7f2      	b.n	800114a <__libc_init_array+0x1e>
 8001164:	08002580 	.word	0x08002580
 8001168:	08002580 	.word	0x08002580
 800116c:	08002580 	.word	0x08002580
 8001170:	08002584 	.word	0x08002584

08001174 <memset>:
 8001174:	4402      	add	r2, r0
 8001176:	4603      	mov	r3, r0
 8001178:	4293      	cmp	r3, r2
 800117a:	d100      	bne.n	800117e <memset+0xa>
 800117c:	4770      	bx	lr
 800117e:	f803 1b01 	strb.w	r1, [r3], #1
 8001182:	e7f9      	b.n	8001178 <memset+0x4>

08001184 <iprintf>:
 8001184:	b40f      	push	{r0, r1, r2, r3}
 8001186:	4b0a      	ldr	r3, [pc, #40]	; (80011b0 <iprintf+0x2c>)
 8001188:	b513      	push	{r0, r1, r4, lr}
 800118a:	681c      	ldr	r4, [r3, #0]
 800118c:	b124      	cbz	r4, 8001198 <iprintf+0x14>
 800118e:	69a3      	ldr	r3, [r4, #24]
 8001190:	b913      	cbnz	r3, 8001198 <iprintf+0x14>
 8001192:	4620      	mov	r0, r4
 8001194:	f000 f84e 	bl	8001234 <__sinit>
 8001198:	ab05      	add	r3, sp, #20
 800119a:	9a04      	ldr	r2, [sp, #16]
 800119c:	68a1      	ldr	r1, [r4, #8]
 800119e:	9301      	str	r3, [sp, #4]
 80011a0:	4620      	mov	r0, r4
 80011a2:	f000 f955 	bl	8001450 <_vfiprintf_r>
 80011a6:	b002      	add	sp, #8
 80011a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80011ac:	b004      	add	sp, #16
 80011ae:	4770      	bx	lr
 80011b0:	20000030 	.word	0x20000030

080011b4 <std>:
 80011b4:	2300      	movs	r3, #0
 80011b6:	b510      	push	{r4, lr}
 80011b8:	4604      	mov	r4, r0
 80011ba:	e9c0 3300 	strd	r3, r3, [r0]
 80011be:	6083      	str	r3, [r0, #8]
 80011c0:	8181      	strh	r1, [r0, #12]
 80011c2:	6643      	str	r3, [r0, #100]	; 0x64
 80011c4:	81c2      	strh	r2, [r0, #14]
 80011c6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80011ca:	6183      	str	r3, [r0, #24]
 80011cc:	4619      	mov	r1, r3
 80011ce:	2208      	movs	r2, #8
 80011d0:	305c      	adds	r0, #92	; 0x5c
 80011d2:	f7ff ffcf 	bl	8001174 <memset>
 80011d6:	4b05      	ldr	r3, [pc, #20]	; (80011ec <std+0x38>)
 80011d8:	6263      	str	r3, [r4, #36]	; 0x24
 80011da:	4b05      	ldr	r3, [pc, #20]	; (80011f0 <std+0x3c>)
 80011dc:	62a3      	str	r3, [r4, #40]	; 0x28
 80011de:	4b05      	ldr	r3, [pc, #20]	; (80011f4 <std+0x40>)
 80011e0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80011e2:	4b05      	ldr	r3, [pc, #20]	; (80011f8 <std+0x44>)
 80011e4:	6224      	str	r4, [r4, #32]
 80011e6:	6323      	str	r3, [r4, #48]	; 0x30
 80011e8:	bd10      	pop	{r4, pc}
 80011ea:	bf00      	nop
 80011ec:	080019ad 	.word	0x080019ad
 80011f0:	080019cf 	.word	0x080019cf
 80011f4:	08001a07 	.word	0x08001a07
 80011f8:	08001a2b 	.word	0x08001a2b

080011fc <_cleanup_r>:
 80011fc:	4901      	ldr	r1, [pc, #4]	; (8001204 <_cleanup_r+0x8>)
 80011fe:	f000 b885 	b.w	800130c <_fwalk_reent>
 8001202:	bf00      	nop
 8001204:	08001d05 	.word	0x08001d05

08001208 <__sfmoreglue>:
 8001208:	b570      	push	{r4, r5, r6, lr}
 800120a:	1e4a      	subs	r2, r1, #1
 800120c:	2568      	movs	r5, #104	; 0x68
 800120e:	4355      	muls	r5, r2
 8001210:	460e      	mov	r6, r1
 8001212:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8001216:	f000 f897 	bl	8001348 <_malloc_r>
 800121a:	4604      	mov	r4, r0
 800121c:	b140      	cbz	r0, 8001230 <__sfmoreglue+0x28>
 800121e:	2100      	movs	r1, #0
 8001220:	e9c0 1600 	strd	r1, r6, [r0]
 8001224:	300c      	adds	r0, #12
 8001226:	60a0      	str	r0, [r4, #8]
 8001228:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800122c:	f7ff ffa2 	bl	8001174 <memset>
 8001230:	4620      	mov	r0, r4
 8001232:	bd70      	pop	{r4, r5, r6, pc}

08001234 <__sinit>:
 8001234:	6983      	ldr	r3, [r0, #24]
 8001236:	b510      	push	{r4, lr}
 8001238:	4604      	mov	r4, r0
 800123a:	bb33      	cbnz	r3, 800128a <__sinit+0x56>
 800123c:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8001240:	6503      	str	r3, [r0, #80]	; 0x50
 8001242:	4b12      	ldr	r3, [pc, #72]	; (800128c <__sinit+0x58>)
 8001244:	4a12      	ldr	r2, [pc, #72]	; (8001290 <__sinit+0x5c>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	6282      	str	r2, [r0, #40]	; 0x28
 800124a:	4298      	cmp	r0, r3
 800124c:	bf04      	itt	eq
 800124e:	2301      	moveq	r3, #1
 8001250:	6183      	streq	r3, [r0, #24]
 8001252:	f000 f81f 	bl	8001294 <__sfp>
 8001256:	6060      	str	r0, [r4, #4]
 8001258:	4620      	mov	r0, r4
 800125a:	f000 f81b 	bl	8001294 <__sfp>
 800125e:	60a0      	str	r0, [r4, #8]
 8001260:	4620      	mov	r0, r4
 8001262:	f000 f817 	bl	8001294 <__sfp>
 8001266:	2200      	movs	r2, #0
 8001268:	60e0      	str	r0, [r4, #12]
 800126a:	2104      	movs	r1, #4
 800126c:	6860      	ldr	r0, [r4, #4]
 800126e:	f7ff ffa1 	bl	80011b4 <std>
 8001272:	2201      	movs	r2, #1
 8001274:	2109      	movs	r1, #9
 8001276:	68a0      	ldr	r0, [r4, #8]
 8001278:	f7ff ff9c 	bl	80011b4 <std>
 800127c:	2202      	movs	r2, #2
 800127e:	2112      	movs	r1, #18
 8001280:	68e0      	ldr	r0, [r4, #12]
 8001282:	f7ff ff97 	bl	80011b4 <std>
 8001286:	2301      	movs	r3, #1
 8001288:	61a3      	str	r3, [r4, #24]
 800128a:	bd10      	pop	{r4, pc}
 800128c:	080024cc 	.word	0x080024cc
 8001290:	080011fd 	.word	0x080011fd

08001294 <__sfp>:
 8001294:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001296:	4b1b      	ldr	r3, [pc, #108]	; (8001304 <__sfp+0x70>)
 8001298:	681e      	ldr	r6, [r3, #0]
 800129a:	69b3      	ldr	r3, [r6, #24]
 800129c:	4607      	mov	r7, r0
 800129e:	b913      	cbnz	r3, 80012a6 <__sfp+0x12>
 80012a0:	4630      	mov	r0, r6
 80012a2:	f7ff ffc7 	bl	8001234 <__sinit>
 80012a6:	3648      	adds	r6, #72	; 0x48
 80012a8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80012ac:	3b01      	subs	r3, #1
 80012ae:	d503      	bpl.n	80012b8 <__sfp+0x24>
 80012b0:	6833      	ldr	r3, [r6, #0]
 80012b2:	b133      	cbz	r3, 80012c2 <__sfp+0x2e>
 80012b4:	6836      	ldr	r6, [r6, #0]
 80012b6:	e7f7      	b.n	80012a8 <__sfp+0x14>
 80012b8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80012bc:	b16d      	cbz	r5, 80012da <__sfp+0x46>
 80012be:	3468      	adds	r4, #104	; 0x68
 80012c0:	e7f4      	b.n	80012ac <__sfp+0x18>
 80012c2:	2104      	movs	r1, #4
 80012c4:	4638      	mov	r0, r7
 80012c6:	f7ff ff9f 	bl	8001208 <__sfmoreglue>
 80012ca:	6030      	str	r0, [r6, #0]
 80012cc:	2800      	cmp	r0, #0
 80012ce:	d1f1      	bne.n	80012b4 <__sfp+0x20>
 80012d0:	230c      	movs	r3, #12
 80012d2:	603b      	str	r3, [r7, #0]
 80012d4:	4604      	mov	r4, r0
 80012d6:	4620      	mov	r0, r4
 80012d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80012da:	4b0b      	ldr	r3, [pc, #44]	; (8001308 <__sfp+0x74>)
 80012dc:	6665      	str	r5, [r4, #100]	; 0x64
 80012de:	e9c4 5500 	strd	r5, r5, [r4]
 80012e2:	60a5      	str	r5, [r4, #8]
 80012e4:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80012e8:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80012ec:	2208      	movs	r2, #8
 80012ee:	4629      	mov	r1, r5
 80012f0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80012f4:	f7ff ff3e 	bl	8001174 <memset>
 80012f8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80012fc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8001300:	e7e9      	b.n	80012d6 <__sfp+0x42>
 8001302:	bf00      	nop
 8001304:	080024cc 	.word	0x080024cc
 8001308:	ffff0001 	.word	0xffff0001

0800130c <_fwalk_reent>:
 800130c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001310:	4680      	mov	r8, r0
 8001312:	4689      	mov	r9, r1
 8001314:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8001318:	2600      	movs	r6, #0
 800131a:	b914      	cbnz	r4, 8001322 <_fwalk_reent+0x16>
 800131c:	4630      	mov	r0, r6
 800131e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001322:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8001326:	3f01      	subs	r7, #1
 8001328:	d501      	bpl.n	800132e <_fwalk_reent+0x22>
 800132a:	6824      	ldr	r4, [r4, #0]
 800132c:	e7f5      	b.n	800131a <_fwalk_reent+0xe>
 800132e:	89ab      	ldrh	r3, [r5, #12]
 8001330:	2b01      	cmp	r3, #1
 8001332:	d907      	bls.n	8001344 <_fwalk_reent+0x38>
 8001334:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001338:	3301      	adds	r3, #1
 800133a:	d003      	beq.n	8001344 <_fwalk_reent+0x38>
 800133c:	4629      	mov	r1, r5
 800133e:	4640      	mov	r0, r8
 8001340:	47c8      	blx	r9
 8001342:	4306      	orrs	r6, r0
 8001344:	3568      	adds	r5, #104	; 0x68
 8001346:	e7ee      	b.n	8001326 <_fwalk_reent+0x1a>

08001348 <_malloc_r>:
 8001348:	b570      	push	{r4, r5, r6, lr}
 800134a:	1ccd      	adds	r5, r1, #3
 800134c:	f025 0503 	bic.w	r5, r5, #3
 8001350:	3508      	adds	r5, #8
 8001352:	2d0c      	cmp	r5, #12
 8001354:	bf38      	it	cc
 8001356:	250c      	movcc	r5, #12
 8001358:	2d00      	cmp	r5, #0
 800135a:	4606      	mov	r6, r0
 800135c:	db01      	blt.n	8001362 <_malloc_r+0x1a>
 800135e:	42a9      	cmp	r1, r5
 8001360:	d903      	bls.n	800136a <_malloc_r+0x22>
 8001362:	230c      	movs	r3, #12
 8001364:	6033      	str	r3, [r6, #0]
 8001366:	2000      	movs	r0, #0
 8001368:	bd70      	pop	{r4, r5, r6, pc}
 800136a:	f000 fd6b 	bl	8001e44 <__malloc_lock>
 800136e:	4a21      	ldr	r2, [pc, #132]	; (80013f4 <_malloc_r+0xac>)
 8001370:	6814      	ldr	r4, [r2, #0]
 8001372:	4621      	mov	r1, r4
 8001374:	b991      	cbnz	r1, 800139c <_malloc_r+0x54>
 8001376:	4c20      	ldr	r4, [pc, #128]	; (80013f8 <_malloc_r+0xb0>)
 8001378:	6823      	ldr	r3, [r4, #0]
 800137a:	b91b      	cbnz	r3, 8001384 <_malloc_r+0x3c>
 800137c:	4630      	mov	r0, r6
 800137e:	f000 fb05 	bl	800198c <_sbrk_r>
 8001382:	6020      	str	r0, [r4, #0]
 8001384:	4629      	mov	r1, r5
 8001386:	4630      	mov	r0, r6
 8001388:	f000 fb00 	bl	800198c <_sbrk_r>
 800138c:	1c43      	adds	r3, r0, #1
 800138e:	d124      	bne.n	80013da <_malloc_r+0x92>
 8001390:	230c      	movs	r3, #12
 8001392:	6033      	str	r3, [r6, #0]
 8001394:	4630      	mov	r0, r6
 8001396:	f000 fd56 	bl	8001e46 <__malloc_unlock>
 800139a:	e7e4      	b.n	8001366 <_malloc_r+0x1e>
 800139c:	680b      	ldr	r3, [r1, #0]
 800139e:	1b5b      	subs	r3, r3, r5
 80013a0:	d418      	bmi.n	80013d4 <_malloc_r+0x8c>
 80013a2:	2b0b      	cmp	r3, #11
 80013a4:	d90f      	bls.n	80013c6 <_malloc_r+0x7e>
 80013a6:	600b      	str	r3, [r1, #0]
 80013a8:	50cd      	str	r5, [r1, r3]
 80013aa:	18cc      	adds	r4, r1, r3
 80013ac:	4630      	mov	r0, r6
 80013ae:	f000 fd4a 	bl	8001e46 <__malloc_unlock>
 80013b2:	f104 000b 	add.w	r0, r4, #11
 80013b6:	1d23      	adds	r3, r4, #4
 80013b8:	f020 0007 	bic.w	r0, r0, #7
 80013bc:	1ac3      	subs	r3, r0, r3
 80013be:	d0d3      	beq.n	8001368 <_malloc_r+0x20>
 80013c0:	425a      	negs	r2, r3
 80013c2:	50e2      	str	r2, [r4, r3]
 80013c4:	e7d0      	b.n	8001368 <_malloc_r+0x20>
 80013c6:	428c      	cmp	r4, r1
 80013c8:	684b      	ldr	r3, [r1, #4]
 80013ca:	bf16      	itet	ne
 80013cc:	6063      	strne	r3, [r4, #4]
 80013ce:	6013      	streq	r3, [r2, #0]
 80013d0:	460c      	movne	r4, r1
 80013d2:	e7eb      	b.n	80013ac <_malloc_r+0x64>
 80013d4:	460c      	mov	r4, r1
 80013d6:	6849      	ldr	r1, [r1, #4]
 80013d8:	e7cc      	b.n	8001374 <_malloc_r+0x2c>
 80013da:	1cc4      	adds	r4, r0, #3
 80013dc:	f024 0403 	bic.w	r4, r4, #3
 80013e0:	42a0      	cmp	r0, r4
 80013e2:	d005      	beq.n	80013f0 <_malloc_r+0xa8>
 80013e4:	1a21      	subs	r1, r4, r0
 80013e6:	4630      	mov	r0, r6
 80013e8:	f000 fad0 	bl	800198c <_sbrk_r>
 80013ec:	3001      	adds	r0, #1
 80013ee:	d0cf      	beq.n	8001390 <_malloc_r+0x48>
 80013f0:	6025      	str	r5, [r4, #0]
 80013f2:	e7db      	b.n	80013ac <_malloc_r+0x64>
 80013f4:	200000bc 	.word	0x200000bc
 80013f8:	200000c0 	.word	0x200000c0

080013fc <__sfputc_r>:
 80013fc:	6893      	ldr	r3, [r2, #8]
 80013fe:	3b01      	subs	r3, #1
 8001400:	2b00      	cmp	r3, #0
 8001402:	b410      	push	{r4}
 8001404:	6093      	str	r3, [r2, #8]
 8001406:	da08      	bge.n	800141a <__sfputc_r+0x1e>
 8001408:	6994      	ldr	r4, [r2, #24]
 800140a:	42a3      	cmp	r3, r4
 800140c:	db01      	blt.n	8001412 <__sfputc_r+0x16>
 800140e:	290a      	cmp	r1, #10
 8001410:	d103      	bne.n	800141a <__sfputc_r+0x1e>
 8001412:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001416:	f000 bb0d 	b.w	8001a34 <__swbuf_r>
 800141a:	6813      	ldr	r3, [r2, #0]
 800141c:	1c58      	adds	r0, r3, #1
 800141e:	6010      	str	r0, [r2, #0]
 8001420:	7019      	strb	r1, [r3, #0]
 8001422:	4608      	mov	r0, r1
 8001424:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001428:	4770      	bx	lr

0800142a <__sfputs_r>:
 800142a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800142c:	4606      	mov	r6, r0
 800142e:	460f      	mov	r7, r1
 8001430:	4614      	mov	r4, r2
 8001432:	18d5      	adds	r5, r2, r3
 8001434:	42ac      	cmp	r4, r5
 8001436:	d101      	bne.n	800143c <__sfputs_r+0x12>
 8001438:	2000      	movs	r0, #0
 800143a:	e007      	b.n	800144c <__sfputs_r+0x22>
 800143c:	463a      	mov	r2, r7
 800143e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001442:	4630      	mov	r0, r6
 8001444:	f7ff ffda 	bl	80013fc <__sfputc_r>
 8001448:	1c43      	adds	r3, r0, #1
 800144a:	d1f3      	bne.n	8001434 <__sfputs_r+0xa>
 800144c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08001450 <_vfiprintf_r>:
 8001450:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001454:	460c      	mov	r4, r1
 8001456:	b09d      	sub	sp, #116	; 0x74
 8001458:	4617      	mov	r7, r2
 800145a:	461d      	mov	r5, r3
 800145c:	4606      	mov	r6, r0
 800145e:	b118      	cbz	r0, 8001468 <_vfiprintf_r+0x18>
 8001460:	6983      	ldr	r3, [r0, #24]
 8001462:	b90b      	cbnz	r3, 8001468 <_vfiprintf_r+0x18>
 8001464:	f7ff fee6 	bl	8001234 <__sinit>
 8001468:	4b7c      	ldr	r3, [pc, #496]	; (800165c <_vfiprintf_r+0x20c>)
 800146a:	429c      	cmp	r4, r3
 800146c:	d158      	bne.n	8001520 <_vfiprintf_r+0xd0>
 800146e:	6874      	ldr	r4, [r6, #4]
 8001470:	89a3      	ldrh	r3, [r4, #12]
 8001472:	0718      	lsls	r0, r3, #28
 8001474:	d55e      	bpl.n	8001534 <_vfiprintf_r+0xe4>
 8001476:	6923      	ldr	r3, [r4, #16]
 8001478:	2b00      	cmp	r3, #0
 800147a:	d05b      	beq.n	8001534 <_vfiprintf_r+0xe4>
 800147c:	2300      	movs	r3, #0
 800147e:	9309      	str	r3, [sp, #36]	; 0x24
 8001480:	2320      	movs	r3, #32
 8001482:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001486:	2330      	movs	r3, #48	; 0x30
 8001488:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800148c:	9503      	str	r5, [sp, #12]
 800148e:	f04f 0b01 	mov.w	fp, #1
 8001492:	46b8      	mov	r8, r7
 8001494:	4645      	mov	r5, r8
 8001496:	f815 3b01 	ldrb.w	r3, [r5], #1
 800149a:	b10b      	cbz	r3, 80014a0 <_vfiprintf_r+0x50>
 800149c:	2b25      	cmp	r3, #37	; 0x25
 800149e:	d154      	bne.n	800154a <_vfiprintf_r+0xfa>
 80014a0:	ebb8 0a07 	subs.w	sl, r8, r7
 80014a4:	d00b      	beq.n	80014be <_vfiprintf_r+0x6e>
 80014a6:	4653      	mov	r3, sl
 80014a8:	463a      	mov	r2, r7
 80014aa:	4621      	mov	r1, r4
 80014ac:	4630      	mov	r0, r6
 80014ae:	f7ff ffbc 	bl	800142a <__sfputs_r>
 80014b2:	3001      	adds	r0, #1
 80014b4:	f000 80c2 	beq.w	800163c <_vfiprintf_r+0x1ec>
 80014b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80014ba:	4453      	add	r3, sl
 80014bc:	9309      	str	r3, [sp, #36]	; 0x24
 80014be:	f898 3000 	ldrb.w	r3, [r8]
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	f000 80ba 	beq.w	800163c <_vfiprintf_r+0x1ec>
 80014c8:	2300      	movs	r3, #0
 80014ca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80014ce:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80014d2:	9304      	str	r3, [sp, #16]
 80014d4:	9307      	str	r3, [sp, #28]
 80014d6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80014da:	931a      	str	r3, [sp, #104]	; 0x68
 80014dc:	46a8      	mov	r8, r5
 80014de:	2205      	movs	r2, #5
 80014e0:	f818 1b01 	ldrb.w	r1, [r8], #1
 80014e4:	485e      	ldr	r0, [pc, #376]	; (8001660 <_vfiprintf_r+0x210>)
 80014e6:	f7fe fe93 	bl	8000210 <memchr>
 80014ea:	9b04      	ldr	r3, [sp, #16]
 80014ec:	bb78      	cbnz	r0, 800154e <_vfiprintf_r+0xfe>
 80014ee:	06d9      	lsls	r1, r3, #27
 80014f0:	bf44      	itt	mi
 80014f2:	2220      	movmi	r2, #32
 80014f4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80014f8:	071a      	lsls	r2, r3, #28
 80014fa:	bf44      	itt	mi
 80014fc:	222b      	movmi	r2, #43	; 0x2b
 80014fe:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8001502:	782a      	ldrb	r2, [r5, #0]
 8001504:	2a2a      	cmp	r2, #42	; 0x2a
 8001506:	d02a      	beq.n	800155e <_vfiprintf_r+0x10e>
 8001508:	9a07      	ldr	r2, [sp, #28]
 800150a:	46a8      	mov	r8, r5
 800150c:	2000      	movs	r0, #0
 800150e:	250a      	movs	r5, #10
 8001510:	4641      	mov	r1, r8
 8001512:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001516:	3b30      	subs	r3, #48	; 0x30
 8001518:	2b09      	cmp	r3, #9
 800151a:	d969      	bls.n	80015f0 <_vfiprintf_r+0x1a0>
 800151c:	b360      	cbz	r0, 8001578 <_vfiprintf_r+0x128>
 800151e:	e024      	b.n	800156a <_vfiprintf_r+0x11a>
 8001520:	4b50      	ldr	r3, [pc, #320]	; (8001664 <_vfiprintf_r+0x214>)
 8001522:	429c      	cmp	r4, r3
 8001524:	d101      	bne.n	800152a <_vfiprintf_r+0xda>
 8001526:	68b4      	ldr	r4, [r6, #8]
 8001528:	e7a2      	b.n	8001470 <_vfiprintf_r+0x20>
 800152a:	4b4f      	ldr	r3, [pc, #316]	; (8001668 <_vfiprintf_r+0x218>)
 800152c:	429c      	cmp	r4, r3
 800152e:	bf08      	it	eq
 8001530:	68f4      	ldreq	r4, [r6, #12]
 8001532:	e79d      	b.n	8001470 <_vfiprintf_r+0x20>
 8001534:	4621      	mov	r1, r4
 8001536:	4630      	mov	r0, r6
 8001538:	f000 fae0 	bl	8001afc <__swsetup_r>
 800153c:	2800      	cmp	r0, #0
 800153e:	d09d      	beq.n	800147c <_vfiprintf_r+0x2c>
 8001540:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001544:	b01d      	add	sp, #116	; 0x74
 8001546:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800154a:	46a8      	mov	r8, r5
 800154c:	e7a2      	b.n	8001494 <_vfiprintf_r+0x44>
 800154e:	4a44      	ldr	r2, [pc, #272]	; (8001660 <_vfiprintf_r+0x210>)
 8001550:	1a80      	subs	r0, r0, r2
 8001552:	fa0b f000 	lsl.w	r0, fp, r0
 8001556:	4318      	orrs	r0, r3
 8001558:	9004      	str	r0, [sp, #16]
 800155a:	4645      	mov	r5, r8
 800155c:	e7be      	b.n	80014dc <_vfiprintf_r+0x8c>
 800155e:	9a03      	ldr	r2, [sp, #12]
 8001560:	1d11      	adds	r1, r2, #4
 8001562:	6812      	ldr	r2, [r2, #0]
 8001564:	9103      	str	r1, [sp, #12]
 8001566:	2a00      	cmp	r2, #0
 8001568:	db01      	blt.n	800156e <_vfiprintf_r+0x11e>
 800156a:	9207      	str	r2, [sp, #28]
 800156c:	e004      	b.n	8001578 <_vfiprintf_r+0x128>
 800156e:	4252      	negs	r2, r2
 8001570:	f043 0302 	orr.w	r3, r3, #2
 8001574:	9207      	str	r2, [sp, #28]
 8001576:	9304      	str	r3, [sp, #16]
 8001578:	f898 3000 	ldrb.w	r3, [r8]
 800157c:	2b2e      	cmp	r3, #46	; 0x2e
 800157e:	d10e      	bne.n	800159e <_vfiprintf_r+0x14e>
 8001580:	f898 3001 	ldrb.w	r3, [r8, #1]
 8001584:	2b2a      	cmp	r3, #42	; 0x2a
 8001586:	d138      	bne.n	80015fa <_vfiprintf_r+0x1aa>
 8001588:	9b03      	ldr	r3, [sp, #12]
 800158a:	1d1a      	adds	r2, r3, #4
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	9203      	str	r2, [sp, #12]
 8001590:	2b00      	cmp	r3, #0
 8001592:	bfb8      	it	lt
 8001594:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8001598:	f108 0802 	add.w	r8, r8, #2
 800159c:	9305      	str	r3, [sp, #20]
 800159e:	4d33      	ldr	r5, [pc, #204]	; (800166c <_vfiprintf_r+0x21c>)
 80015a0:	f898 1000 	ldrb.w	r1, [r8]
 80015a4:	2203      	movs	r2, #3
 80015a6:	4628      	mov	r0, r5
 80015a8:	f7fe fe32 	bl	8000210 <memchr>
 80015ac:	b140      	cbz	r0, 80015c0 <_vfiprintf_r+0x170>
 80015ae:	2340      	movs	r3, #64	; 0x40
 80015b0:	1b40      	subs	r0, r0, r5
 80015b2:	fa03 f000 	lsl.w	r0, r3, r0
 80015b6:	9b04      	ldr	r3, [sp, #16]
 80015b8:	4303      	orrs	r3, r0
 80015ba:	f108 0801 	add.w	r8, r8, #1
 80015be:	9304      	str	r3, [sp, #16]
 80015c0:	f898 1000 	ldrb.w	r1, [r8]
 80015c4:	482a      	ldr	r0, [pc, #168]	; (8001670 <_vfiprintf_r+0x220>)
 80015c6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80015ca:	2206      	movs	r2, #6
 80015cc:	f108 0701 	add.w	r7, r8, #1
 80015d0:	f7fe fe1e 	bl	8000210 <memchr>
 80015d4:	2800      	cmp	r0, #0
 80015d6:	d037      	beq.n	8001648 <_vfiprintf_r+0x1f8>
 80015d8:	4b26      	ldr	r3, [pc, #152]	; (8001674 <_vfiprintf_r+0x224>)
 80015da:	bb1b      	cbnz	r3, 8001624 <_vfiprintf_r+0x1d4>
 80015dc:	9b03      	ldr	r3, [sp, #12]
 80015de:	3307      	adds	r3, #7
 80015e0:	f023 0307 	bic.w	r3, r3, #7
 80015e4:	3308      	adds	r3, #8
 80015e6:	9303      	str	r3, [sp, #12]
 80015e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80015ea:	444b      	add	r3, r9
 80015ec:	9309      	str	r3, [sp, #36]	; 0x24
 80015ee:	e750      	b.n	8001492 <_vfiprintf_r+0x42>
 80015f0:	fb05 3202 	mla	r2, r5, r2, r3
 80015f4:	2001      	movs	r0, #1
 80015f6:	4688      	mov	r8, r1
 80015f8:	e78a      	b.n	8001510 <_vfiprintf_r+0xc0>
 80015fa:	2300      	movs	r3, #0
 80015fc:	f108 0801 	add.w	r8, r8, #1
 8001600:	9305      	str	r3, [sp, #20]
 8001602:	4619      	mov	r1, r3
 8001604:	250a      	movs	r5, #10
 8001606:	4640      	mov	r0, r8
 8001608:	f810 2b01 	ldrb.w	r2, [r0], #1
 800160c:	3a30      	subs	r2, #48	; 0x30
 800160e:	2a09      	cmp	r2, #9
 8001610:	d903      	bls.n	800161a <_vfiprintf_r+0x1ca>
 8001612:	2b00      	cmp	r3, #0
 8001614:	d0c3      	beq.n	800159e <_vfiprintf_r+0x14e>
 8001616:	9105      	str	r1, [sp, #20]
 8001618:	e7c1      	b.n	800159e <_vfiprintf_r+0x14e>
 800161a:	fb05 2101 	mla	r1, r5, r1, r2
 800161e:	2301      	movs	r3, #1
 8001620:	4680      	mov	r8, r0
 8001622:	e7f0      	b.n	8001606 <_vfiprintf_r+0x1b6>
 8001624:	ab03      	add	r3, sp, #12
 8001626:	9300      	str	r3, [sp, #0]
 8001628:	4622      	mov	r2, r4
 800162a:	4b13      	ldr	r3, [pc, #76]	; (8001678 <_vfiprintf_r+0x228>)
 800162c:	a904      	add	r1, sp, #16
 800162e:	4630      	mov	r0, r6
 8001630:	f3af 8000 	nop.w
 8001634:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8001638:	4681      	mov	r9, r0
 800163a:	d1d5      	bne.n	80015e8 <_vfiprintf_r+0x198>
 800163c:	89a3      	ldrh	r3, [r4, #12]
 800163e:	065b      	lsls	r3, r3, #25
 8001640:	f53f af7e 	bmi.w	8001540 <_vfiprintf_r+0xf0>
 8001644:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001646:	e77d      	b.n	8001544 <_vfiprintf_r+0xf4>
 8001648:	ab03      	add	r3, sp, #12
 800164a:	9300      	str	r3, [sp, #0]
 800164c:	4622      	mov	r2, r4
 800164e:	4b0a      	ldr	r3, [pc, #40]	; (8001678 <_vfiprintf_r+0x228>)
 8001650:	a904      	add	r1, sp, #16
 8001652:	4630      	mov	r0, r6
 8001654:	f000 f888 	bl	8001768 <_printf_i>
 8001658:	e7ec      	b.n	8001634 <_vfiprintf_r+0x1e4>
 800165a:	bf00      	nop
 800165c:	080024f0 	.word	0x080024f0
 8001660:	08002530 	.word	0x08002530
 8001664:	08002510 	.word	0x08002510
 8001668:	080024d0 	.word	0x080024d0
 800166c:	08002536 	.word	0x08002536
 8001670:	0800253a 	.word	0x0800253a
 8001674:	00000000 	.word	0x00000000
 8001678:	0800142b 	.word	0x0800142b

0800167c <_printf_common>:
 800167c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001680:	4691      	mov	r9, r2
 8001682:	461f      	mov	r7, r3
 8001684:	688a      	ldr	r2, [r1, #8]
 8001686:	690b      	ldr	r3, [r1, #16]
 8001688:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800168c:	4293      	cmp	r3, r2
 800168e:	bfb8      	it	lt
 8001690:	4613      	movlt	r3, r2
 8001692:	f8c9 3000 	str.w	r3, [r9]
 8001696:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800169a:	4606      	mov	r6, r0
 800169c:	460c      	mov	r4, r1
 800169e:	b112      	cbz	r2, 80016a6 <_printf_common+0x2a>
 80016a0:	3301      	adds	r3, #1
 80016a2:	f8c9 3000 	str.w	r3, [r9]
 80016a6:	6823      	ldr	r3, [r4, #0]
 80016a8:	0699      	lsls	r1, r3, #26
 80016aa:	bf42      	ittt	mi
 80016ac:	f8d9 3000 	ldrmi.w	r3, [r9]
 80016b0:	3302      	addmi	r3, #2
 80016b2:	f8c9 3000 	strmi.w	r3, [r9]
 80016b6:	6825      	ldr	r5, [r4, #0]
 80016b8:	f015 0506 	ands.w	r5, r5, #6
 80016bc:	d107      	bne.n	80016ce <_printf_common+0x52>
 80016be:	f104 0a19 	add.w	sl, r4, #25
 80016c2:	68e3      	ldr	r3, [r4, #12]
 80016c4:	f8d9 2000 	ldr.w	r2, [r9]
 80016c8:	1a9b      	subs	r3, r3, r2
 80016ca:	42ab      	cmp	r3, r5
 80016cc:	dc28      	bgt.n	8001720 <_printf_common+0xa4>
 80016ce:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80016d2:	6822      	ldr	r2, [r4, #0]
 80016d4:	3300      	adds	r3, #0
 80016d6:	bf18      	it	ne
 80016d8:	2301      	movne	r3, #1
 80016da:	0692      	lsls	r2, r2, #26
 80016dc:	d42d      	bmi.n	800173a <_printf_common+0xbe>
 80016de:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80016e2:	4639      	mov	r1, r7
 80016e4:	4630      	mov	r0, r6
 80016e6:	47c0      	blx	r8
 80016e8:	3001      	adds	r0, #1
 80016ea:	d020      	beq.n	800172e <_printf_common+0xb2>
 80016ec:	6823      	ldr	r3, [r4, #0]
 80016ee:	68e5      	ldr	r5, [r4, #12]
 80016f0:	f8d9 2000 	ldr.w	r2, [r9]
 80016f4:	f003 0306 	and.w	r3, r3, #6
 80016f8:	2b04      	cmp	r3, #4
 80016fa:	bf08      	it	eq
 80016fc:	1aad      	subeq	r5, r5, r2
 80016fe:	68a3      	ldr	r3, [r4, #8]
 8001700:	6922      	ldr	r2, [r4, #16]
 8001702:	bf0c      	ite	eq
 8001704:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001708:	2500      	movne	r5, #0
 800170a:	4293      	cmp	r3, r2
 800170c:	bfc4      	itt	gt
 800170e:	1a9b      	subgt	r3, r3, r2
 8001710:	18ed      	addgt	r5, r5, r3
 8001712:	f04f 0900 	mov.w	r9, #0
 8001716:	341a      	adds	r4, #26
 8001718:	454d      	cmp	r5, r9
 800171a:	d11a      	bne.n	8001752 <_printf_common+0xd6>
 800171c:	2000      	movs	r0, #0
 800171e:	e008      	b.n	8001732 <_printf_common+0xb6>
 8001720:	2301      	movs	r3, #1
 8001722:	4652      	mov	r2, sl
 8001724:	4639      	mov	r1, r7
 8001726:	4630      	mov	r0, r6
 8001728:	47c0      	blx	r8
 800172a:	3001      	adds	r0, #1
 800172c:	d103      	bne.n	8001736 <_printf_common+0xba>
 800172e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001732:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001736:	3501      	adds	r5, #1
 8001738:	e7c3      	b.n	80016c2 <_printf_common+0x46>
 800173a:	18e1      	adds	r1, r4, r3
 800173c:	1c5a      	adds	r2, r3, #1
 800173e:	2030      	movs	r0, #48	; 0x30
 8001740:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001744:	4422      	add	r2, r4
 8001746:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800174a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800174e:	3302      	adds	r3, #2
 8001750:	e7c5      	b.n	80016de <_printf_common+0x62>
 8001752:	2301      	movs	r3, #1
 8001754:	4622      	mov	r2, r4
 8001756:	4639      	mov	r1, r7
 8001758:	4630      	mov	r0, r6
 800175a:	47c0      	blx	r8
 800175c:	3001      	adds	r0, #1
 800175e:	d0e6      	beq.n	800172e <_printf_common+0xb2>
 8001760:	f109 0901 	add.w	r9, r9, #1
 8001764:	e7d8      	b.n	8001718 <_printf_common+0x9c>
	...

08001768 <_printf_i>:
 8001768:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800176c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8001770:	460c      	mov	r4, r1
 8001772:	7e09      	ldrb	r1, [r1, #24]
 8001774:	b085      	sub	sp, #20
 8001776:	296e      	cmp	r1, #110	; 0x6e
 8001778:	4617      	mov	r7, r2
 800177a:	4606      	mov	r6, r0
 800177c:	4698      	mov	r8, r3
 800177e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8001780:	f000 80b3 	beq.w	80018ea <_printf_i+0x182>
 8001784:	d822      	bhi.n	80017cc <_printf_i+0x64>
 8001786:	2963      	cmp	r1, #99	; 0x63
 8001788:	d036      	beq.n	80017f8 <_printf_i+0x90>
 800178a:	d80a      	bhi.n	80017a2 <_printf_i+0x3a>
 800178c:	2900      	cmp	r1, #0
 800178e:	f000 80b9 	beq.w	8001904 <_printf_i+0x19c>
 8001792:	2958      	cmp	r1, #88	; 0x58
 8001794:	f000 8083 	beq.w	800189e <_printf_i+0x136>
 8001798:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800179c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80017a0:	e032      	b.n	8001808 <_printf_i+0xa0>
 80017a2:	2964      	cmp	r1, #100	; 0x64
 80017a4:	d001      	beq.n	80017aa <_printf_i+0x42>
 80017a6:	2969      	cmp	r1, #105	; 0x69
 80017a8:	d1f6      	bne.n	8001798 <_printf_i+0x30>
 80017aa:	6820      	ldr	r0, [r4, #0]
 80017ac:	6813      	ldr	r3, [r2, #0]
 80017ae:	0605      	lsls	r5, r0, #24
 80017b0:	f103 0104 	add.w	r1, r3, #4
 80017b4:	d52a      	bpl.n	800180c <_printf_i+0xa4>
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	6011      	str	r1, [r2, #0]
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	da03      	bge.n	80017c6 <_printf_i+0x5e>
 80017be:	222d      	movs	r2, #45	; 0x2d
 80017c0:	425b      	negs	r3, r3
 80017c2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80017c6:	486f      	ldr	r0, [pc, #444]	; (8001984 <_printf_i+0x21c>)
 80017c8:	220a      	movs	r2, #10
 80017ca:	e039      	b.n	8001840 <_printf_i+0xd8>
 80017cc:	2973      	cmp	r1, #115	; 0x73
 80017ce:	f000 809d 	beq.w	800190c <_printf_i+0x1a4>
 80017d2:	d808      	bhi.n	80017e6 <_printf_i+0x7e>
 80017d4:	296f      	cmp	r1, #111	; 0x6f
 80017d6:	d020      	beq.n	800181a <_printf_i+0xb2>
 80017d8:	2970      	cmp	r1, #112	; 0x70
 80017da:	d1dd      	bne.n	8001798 <_printf_i+0x30>
 80017dc:	6823      	ldr	r3, [r4, #0]
 80017de:	f043 0320 	orr.w	r3, r3, #32
 80017e2:	6023      	str	r3, [r4, #0]
 80017e4:	e003      	b.n	80017ee <_printf_i+0x86>
 80017e6:	2975      	cmp	r1, #117	; 0x75
 80017e8:	d017      	beq.n	800181a <_printf_i+0xb2>
 80017ea:	2978      	cmp	r1, #120	; 0x78
 80017ec:	d1d4      	bne.n	8001798 <_printf_i+0x30>
 80017ee:	2378      	movs	r3, #120	; 0x78
 80017f0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80017f4:	4864      	ldr	r0, [pc, #400]	; (8001988 <_printf_i+0x220>)
 80017f6:	e055      	b.n	80018a4 <_printf_i+0x13c>
 80017f8:	6813      	ldr	r3, [r2, #0]
 80017fa:	1d19      	adds	r1, r3, #4
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	6011      	str	r1, [r2, #0]
 8001800:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001804:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001808:	2301      	movs	r3, #1
 800180a:	e08c      	b.n	8001926 <_printf_i+0x1be>
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	6011      	str	r1, [r2, #0]
 8001810:	f010 0f40 	tst.w	r0, #64	; 0x40
 8001814:	bf18      	it	ne
 8001816:	b21b      	sxthne	r3, r3
 8001818:	e7cf      	b.n	80017ba <_printf_i+0x52>
 800181a:	6813      	ldr	r3, [r2, #0]
 800181c:	6825      	ldr	r5, [r4, #0]
 800181e:	1d18      	adds	r0, r3, #4
 8001820:	6010      	str	r0, [r2, #0]
 8001822:	0628      	lsls	r0, r5, #24
 8001824:	d501      	bpl.n	800182a <_printf_i+0xc2>
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	e002      	b.n	8001830 <_printf_i+0xc8>
 800182a:	0668      	lsls	r0, r5, #25
 800182c:	d5fb      	bpl.n	8001826 <_printf_i+0xbe>
 800182e:	881b      	ldrh	r3, [r3, #0]
 8001830:	4854      	ldr	r0, [pc, #336]	; (8001984 <_printf_i+0x21c>)
 8001832:	296f      	cmp	r1, #111	; 0x6f
 8001834:	bf14      	ite	ne
 8001836:	220a      	movne	r2, #10
 8001838:	2208      	moveq	r2, #8
 800183a:	2100      	movs	r1, #0
 800183c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8001840:	6865      	ldr	r5, [r4, #4]
 8001842:	60a5      	str	r5, [r4, #8]
 8001844:	2d00      	cmp	r5, #0
 8001846:	f2c0 8095 	blt.w	8001974 <_printf_i+0x20c>
 800184a:	6821      	ldr	r1, [r4, #0]
 800184c:	f021 0104 	bic.w	r1, r1, #4
 8001850:	6021      	str	r1, [r4, #0]
 8001852:	2b00      	cmp	r3, #0
 8001854:	d13d      	bne.n	80018d2 <_printf_i+0x16a>
 8001856:	2d00      	cmp	r5, #0
 8001858:	f040 808e 	bne.w	8001978 <_printf_i+0x210>
 800185c:	4665      	mov	r5, ip
 800185e:	2a08      	cmp	r2, #8
 8001860:	d10b      	bne.n	800187a <_printf_i+0x112>
 8001862:	6823      	ldr	r3, [r4, #0]
 8001864:	07db      	lsls	r3, r3, #31
 8001866:	d508      	bpl.n	800187a <_printf_i+0x112>
 8001868:	6923      	ldr	r3, [r4, #16]
 800186a:	6862      	ldr	r2, [r4, #4]
 800186c:	429a      	cmp	r2, r3
 800186e:	bfde      	ittt	le
 8001870:	2330      	movle	r3, #48	; 0x30
 8001872:	f805 3c01 	strble.w	r3, [r5, #-1]
 8001876:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800187a:	ebac 0305 	sub.w	r3, ip, r5
 800187e:	6123      	str	r3, [r4, #16]
 8001880:	f8cd 8000 	str.w	r8, [sp]
 8001884:	463b      	mov	r3, r7
 8001886:	aa03      	add	r2, sp, #12
 8001888:	4621      	mov	r1, r4
 800188a:	4630      	mov	r0, r6
 800188c:	f7ff fef6 	bl	800167c <_printf_common>
 8001890:	3001      	adds	r0, #1
 8001892:	d14d      	bne.n	8001930 <_printf_i+0x1c8>
 8001894:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001898:	b005      	add	sp, #20
 800189a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800189e:	4839      	ldr	r0, [pc, #228]	; (8001984 <_printf_i+0x21c>)
 80018a0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80018a4:	6813      	ldr	r3, [r2, #0]
 80018a6:	6821      	ldr	r1, [r4, #0]
 80018a8:	1d1d      	adds	r5, r3, #4
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	6015      	str	r5, [r2, #0]
 80018ae:	060a      	lsls	r2, r1, #24
 80018b0:	d50b      	bpl.n	80018ca <_printf_i+0x162>
 80018b2:	07ca      	lsls	r2, r1, #31
 80018b4:	bf44      	itt	mi
 80018b6:	f041 0120 	orrmi.w	r1, r1, #32
 80018ba:	6021      	strmi	r1, [r4, #0]
 80018bc:	b91b      	cbnz	r3, 80018c6 <_printf_i+0x15e>
 80018be:	6822      	ldr	r2, [r4, #0]
 80018c0:	f022 0220 	bic.w	r2, r2, #32
 80018c4:	6022      	str	r2, [r4, #0]
 80018c6:	2210      	movs	r2, #16
 80018c8:	e7b7      	b.n	800183a <_printf_i+0xd2>
 80018ca:	064d      	lsls	r5, r1, #25
 80018cc:	bf48      	it	mi
 80018ce:	b29b      	uxthmi	r3, r3
 80018d0:	e7ef      	b.n	80018b2 <_printf_i+0x14a>
 80018d2:	4665      	mov	r5, ip
 80018d4:	fbb3 f1f2 	udiv	r1, r3, r2
 80018d8:	fb02 3311 	mls	r3, r2, r1, r3
 80018dc:	5cc3      	ldrb	r3, [r0, r3]
 80018de:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80018e2:	460b      	mov	r3, r1
 80018e4:	2900      	cmp	r1, #0
 80018e6:	d1f5      	bne.n	80018d4 <_printf_i+0x16c>
 80018e8:	e7b9      	b.n	800185e <_printf_i+0xf6>
 80018ea:	6813      	ldr	r3, [r2, #0]
 80018ec:	6825      	ldr	r5, [r4, #0]
 80018ee:	6961      	ldr	r1, [r4, #20]
 80018f0:	1d18      	adds	r0, r3, #4
 80018f2:	6010      	str	r0, [r2, #0]
 80018f4:	0628      	lsls	r0, r5, #24
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	d501      	bpl.n	80018fe <_printf_i+0x196>
 80018fa:	6019      	str	r1, [r3, #0]
 80018fc:	e002      	b.n	8001904 <_printf_i+0x19c>
 80018fe:	066a      	lsls	r2, r5, #25
 8001900:	d5fb      	bpl.n	80018fa <_printf_i+0x192>
 8001902:	8019      	strh	r1, [r3, #0]
 8001904:	2300      	movs	r3, #0
 8001906:	6123      	str	r3, [r4, #16]
 8001908:	4665      	mov	r5, ip
 800190a:	e7b9      	b.n	8001880 <_printf_i+0x118>
 800190c:	6813      	ldr	r3, [r2, #0]
 800190e:	1d19      	adds	r1, r3, #4
 8001910:	6011      	str	r1, [r2, #0]
 8001912:	681d      	ldr	r5, [r3, #0]
 8001914:	6862      	ldr	r2, [r4, #4]
 8001916:	2100      	movs	r1, #0
 8001918:	4628      	mov	r0, r5
 800191a:	f7fe fc79 	bl	8000210 <memchr>
 800191e:	b108      	cbz	r0, 8001924 <_printf_i+0x1bc>
 8001920:	1b40      	subs	r0, r0, r5
 8001922:	6060      	str	r0, [r4, #4]
 8001924:	6863      	ldr	r3, [r4, #4]
 8001926:	6123      	str	r3, [r4, #16]
 8001928:	2300      	movs	r3, #0
 800192a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800192e:	e7a7      	b.n	8001880 <_printf_i+0x118>
 8001930:	6923      	ldr	r3, [r4, #16]
 8001932:	462a      	mov	r2, r5
 8001934:	4639      	mov	r1, r7
 8001936:	4630      	mov	r0, r6
 8001938:	47c0      	blx	r8
 800193a:	3001      	adds	r0, #1
 800193c:	d0aa      	beq.n	8001894 <_printf_i+0x12c>
 800193e:	6823      	ldr	r3, [r4, #0]
 8001940:	079b      	lsls	r3, r3, #30
 8001942:	d413      	bmi.n	800196c <_printf_i+0x204>
 8001944:	68e0      	ldr	r0, [r4, #12]
 8001946:	9b03      	ldr	r3, [sp, #12]
 8001948:	4298      	cmp	r0, r3
 800194a:	bfb8      	it	lt
 800194c:	4618      	movlt	r0, r3
 800194e:	e7a3      	b.n	8001898 <_printf_i+0x130>
 8001950:	2301      	movs	r3, #1
 8001952:	464a      	mov	r2, r9
 8001954:	4639      	mov	r1, r7
 8001956:	4630      	mov	r0, r6
 8001958:	47c0      	blx	r8
 800195a:	3001      	adds	r0, #1
 800195c:	d09a      	beq.n	8001894 <_printf_i+0x12c>
 800195e:	3501      	adds	r5, #1
 8001960:	68e3      	ldr	r3, [r4, #12]
 8001962:	9a03      	ldr	r2, [sp, #12]
 8001964:	1a9b      	subs	r3, r3, r2
 8001966:	42ab      	cmp	r3, r5
 8001968:	dcf2      	bgt.n	8001950 <_printf_i+0x1e8>
 800196a:	e7eb      	b.n	8001944 <_printf_i+0x1dc>
 800196c:	2500      	movs	r5, #0
 800196e:	f104 0919 	add.w	r9, r4, #25
 8001972:	e7f5      	b.n	8001960 <_printf_i+0x1f8>
 8001974:	2b00      	cmp	r3, #0
 8001976:	d1ac      	bne.n	80018d2 <_printf_i+0x16a>
 8001978:	7803      	ldrb	r3, [r0, #0]
 800197a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800197e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001982:	e76c      	b.n	800185e <_printf_i+0xf6>
 8001984:	08002541 	.word	0x08002541
 8001988:	08002552 	.word	0x08002552

0800198c <_sbrk_r>:
 800198c:	b538      	push	{r3, r4, r5, lr}
 800198e:	4c06      	ldr	r4, [pc, #24]	; (80019a8 <_sbrk_r+0x1c>)
 8001990:	2300      	movs	r3, #0
 8001992:	4605      	mov	r5, r0
 8001994:	4608      	mov	r0, r1
 8001996:	6023      	str	r3, [r4, #0]
 8001998:	f7ff fb62 	bl	8001060 <_sbrk>
 800199c:	1c43      	adds	r3, r0, #1
 800199e:	d102      	bne.n	80019a6 <_sbrk_r+0x1a>
 80019a0:	6823      	ldr	r3, [r4, #0]
 80019a2:	b103      	cbz	r3, 80019a6 <_sbrk_r+0x1a>
 80019a4:	602b      	str	r3, [r5, #0]
 80019a6:	bd38      	pop	{r3, r4, r5, pc}
 80019a8:	20000194 	.word	0x20000194

080019ac <__sread>:
 80019ac:	b510      	push	{r4, lr}
 80019ae:	460c      	mov	r4, r1
 80019b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80019b4:	f000 fa96 	bl	8001ee4 <_read_r>
 80019b8:	2800      	cmp	r0, #0
 80019ba:	bfab      	itete	ge
 80019bc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80019be:	89a3      	ldrhlt	r3, [r4, #12]
 80019c0:	181b      	addge	r3, r3, r0
 80019c2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80019c6:	bfac      	ite	ge
 80019c8:	6563      	strge	r3, [r4, #84]	; 0x54
 80019ca:	81a3      	strhlt	r3, [r4, #12]
 80019cc:	bd10      	pop	{r4, pc}

080019ce <__swrite>:
 80019ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80019d2:	461f      	mov	r7, r3
 80019d4:	898b      	ldrh	r3, [r1, #12]
 80019d6:	05db      	lsls	r3, r3, #23
 80019d8:	4605      	mov	r5, r0
 80019da:	460c      	mov	r4, r1
 80019dc:	4616      	mov	r6, r2
 80019de:	d505      	bpl.n	80019ec <__swrite+0x1e>
 80019e0:	2302      	movs	r3, #2
 80019e2:	2200      	movs	r2, #0
 80019e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80019e8:	f000 f9b6 	bl	8001d58 <_lseek_r>
 80019ec:	89a3      	ldrh	r3, [r4, #12]
 80019ee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80019f2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80019f6:	81a3      	strh	r3, [r4, #12]
 80019f8:	4632      	mov	r2, r6
 80019fa:	463b      	mov	r3, r7
 80019fc:	4628      	mov	r0, r5
 80019fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001a02:	f000 b869 	b.w	8001ad8 <_write_r>

08001a06 <__sseek>:
 8001a06:	b510      	push	{r4, lr}
 8001a08:	460c      	mov	r4, r1
 8001a0a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001a0e:	f000 f9a3 	bl	8001d58 <_lseek_r>
 8001a12:	1c43      	adds	r3, r0, #1
 8001a14:	89a3      	ldrh	r3, [r4, #12]
 8001a16:	bf15      	itete	ne
 8001a18:	6560      	strne	r0, [r4, #84]	; 0x54
 8001a1a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8001a1e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8001a22:	81a3      	strheq	r3, [r4, #12]
 8001a24:	bf18      	it	ne
 8001a26:	81a3      	strhne	r3, [r4, #12]
 8001a28:	bd10      	pop	{r4, pc}

08001a2a <__sclose>:
 8001a2a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001a2e:	f000 b8d3 	b.w	8001bd8 <_close_r>
	...

08001a34 <__swbuf_r>:
 8001a34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a36:	460e      	mov	r6, r1
 8001a38:	4614      	mov	r4, r2
 8001a3a:	4605      	mov	r5, r0
 8001a3c:	b118      	cbz	r0, 8001a46 <__swbuf_r+0x12>
 8001a3e:	6983      	ldr	r3, [r0, #24]
 8001a40:	b90b      	cbnz	r3, 8001a46 <__swbuf_r+0x12>
 8001a42:	f7ff fbf7 	bl	8001234 <__sinit>
 8001a46:	4b21      	ldr	r3, [pc, #132]	; (8001acc <__swbuf_r+0x98>)
 8001a48:	429c      	cmp	r4, r3
 8001a4a:	d12a      	bne.n	8001aa2 <__swbuf_r+0x6e>
 8001a4c:	686c      	ldr	r4, [r5, #4]
 8001a4e:	69a3      	ldr	r3, [r4, #24]
 8001a50:	60a3      	str	r3, [r4, #8]
 8001a52:	89a3      	ldrh	r3, [r4, #12]
 8001a54:	071a      	lsls	r2, r3, #28
 8001a56:	d52e      	bpl.n	8001ab6 <__swbuf_r+0x82>
 8001a58:	6923      	ldr	r3, [r4, #16]
 8001a5a:	b363      	cbz	r3, 8001ab6 <__swbuf_r+0x82>
 8001a5c:	6923      	ldr	r3, [r4, #16]
 8001a5e:	6820      	ldr	r0, [r4, #0]
 8001a60:	1ac0      	subs	r0, r0, r3
 8001a62:	6963      	ldr	r3, [r4, #20]
 8001a64:	b2f6      	uxtb	r6, r6
 8001a66:	4283      	cmp	r3, r0
 8001a68:	4637      	mov	r7, r6
 8001a6a:	dc04      	bgt.n	8001a76 <__swbuf_r+0x42>
 8001a6c:	4621      	mov	r1, r4
 8001a6e:	4628      	mov	r0, r5
 8001a70:	f000 f948 	bl	8001d04 <_fflush_r>
 8001a74:	bb28      	cbnz	r0, 8001ac2 <__swbuf_r+0x8e>
 8001a76:	68a3      	ldr	r3, [r4, #8]
 8001a78:	3b01      	subs	r3, #1
 8001a7a:	60a3      	str	r3, [r4, #8]
 8001a7c:	6823      	ldr	r3, [r4, #0]
 8001a7e:	1c5a      	adds	r2, r3, #1
 8001a80:	6022      	str	r2, [r4, #0]
 8001a82:	701e      	strb	r6, [r3, #0]
 8001a84:	6963      	ldr	r3, [r4, #20]
 8001a86:	3001      	adds	r0, #1
 8001a88:	4283      	cmp	r3, r0
 8001a8a:	d004      	beq.n	8001a96 <__swbuf_r+0x62>
 8001a8c:	89a3      	ldrh	r3, [r4, #12]
 8001a8e:	07db      	lsls	r3, r3, #31
 8001a90:	d519      	bpl.n	8001ac6 <__swbuf_r+0x92>
 8001a92:	2e0a      	cmp	r6, #10
 8001a94:	d117      	bne.n	8001ac6 <__swbuf_r+0x92>
 8001a96:	4621      	mov	r1, r4
 8001a98:	4628      	mov	r0, r5
 8001a9a:	f000 f933 	bl	8001d04 <_fflush_r>
 8001a9e:	b190      	cbz	r0, 8001ac6 <__swbuf_r+0x92>
 8001aa0:	e00f      	b.n	8001ac2 <__swbuf_r+0x8e>
 8001aa2:	4b0b      	ldr	r3, [pc, #44]	; (8001ad0 <__swbuf_r+0x9c>)
 8001aa4:	429c      	cmp	r4, r3
 8001aa6:	d101      	bne.n	8001aac <__swbuf_r+0x78>
 8001aa8:	68ac      	ldr	r4, [r5, #8]
 8001aaa:	e7d0      	b.n	8001a4e <__swbuf_r+0x1a>
 8001aac:	4b09      	ldr	r3, [pc, #36]	; (8001ad4 <__swbuf_r+0xa0>)
 8001aae:	429c      	cmp	r4, r3
 8001ab0:	bf08      	it	eq
 8001ab2:	68ec      	ldreq	r4, [r5, #12]
 8001ab4:	e7cb      	b.n	8001a4e <__swbuf_r+0x1a>
 8001ab6:	4621      	mov	r1, r4
 8001ab8:	4628      	mov	r0, r5
 8001aba:	f000 f81f 	bl	8001afc <__swsetup_r>
 8001abe:	2800      	cmp	r0, #0
 8001ac0:	d0cc      	beq.n	8001a5c <__swbuf_r+0x28>
 8001ac2:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8001ac6:	4638      	mov	r0, r7
 8001ac8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001aca:	bf00      	nop
 8001acc:	080024f0 	.word	0x080024f0
 8001ad0:	08002510 	.word	0x08002510
 8001ad4:	080024d0 	.word	0x080024d0

08001ad8 <_write_r>:
 8001ad8:	b538      	push	{r3, r4, r5, lr}
 8001ada:	4c07      	ldr	r4, [pc, #28]	; (8001af8 <_write_r+0x20>)
 8001adc:	4605      	mov	r5, r0
 8001ade:	4608      	mov	r0, r1
 8001ae0:	4611      	mov	r1, r2
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	6022      	str	r2, [r4, #0]
 8001ae6:	461a      	mov	r2, r3
 8001ae8:	f000 fae1 	bl	80020ae <_write>
 8001aec:	1c43      	adds	r3, r0, #1
 8001aee:	d102      	bne.n	8001af6 <_write_r+0x1e>
 8001af0:	6823      	ldr	r3, [r4, #0]
 8001af2:	b103      	cbz	r3, 8001af6 <_write_r+0x1e>
 8001af4:	602b      	str	r3, [r5, #0]
 8001af6:	bd38      	pop	{r3, r4, r5, pc}
 8001af8:	20000194 	.word	0x20000194

08001afc <__swsetup_r>:
 8001afc:	4b32      	ldr	r3, [pc, #200]	; (8001bc8 <__swsetup_r+0xcc>)
 8001afe:	b570      	push	{r4, r5, r6, lr}
 8001b00:	681d      	ldr	r5, [r3, #0]
 8001b02:	4606      	mov	r6, r0
 8001b04:	460c      	mov	r4, r1
 8001b06:	b125      	cbz	r5, 8001b12 <__swsetup_r+0x16>
 8001b08:	69ab      	ldr	r3, [r5, #24]
 8001b0a:	b913      	cbnz	r3, 8001b12 <__swsetup_r+0x16>
 8001b0c:	4628      	mov	r0, r5
 8001b0e:	f7ff fb91 	bl	8001234 <__sinit>
 8001b12:	4b2e      	ldr	r3, [pc, #184]	; (8001bcc <__swsetup_r+0xd0>)
 8001b14:	429c      	cmp	r4, r3
 8001b16:	d10f      	bne.n	8001b38 <__swsetup_r+0x3c>
 8001b18:	686c      	ldr	r4, [r5, #4]
 8001b1a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001b1e:	b29a      	uxth	r2, r3
 8001b20:	0715      	lsls	r5, r2, #28
 8001b22:	d42c      	bmi.n	8001b7e <__swsetup_r+0x82>
 8001b24:	06d0      	lsls	r0, r2, #27
 8001b26:	d411      	bmi.n	8001b4c <__swsetup_r+0x50>
 8001b28:	2209      	movs	r2, #9
 8001b2a:	6032      	str	r2, [r6, #0]
 8001b2c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001b30:	81a3      	strh	r3, [r4, #12]
 8001b32:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001b36:	e03e      	b.n	8001bb6 <__swsetup_r+0xba>
 8001b38:	4b25      	ldr	r3, [pc, #148]	; (8001bd0 <__swsetup_r+0xd4>)
 8001b3a:	429c      	cmp	r4, r3
 8001b3c:	d101      	bne.n	8001b42 <__swsetup_r+0x46>
 8001b3e:	68ac      	ldr	r4, [r5, #8]
 8001b40:	e7eb      	b.n	8001b1a <__swsetup_r+0x1e>
 8001b42:	4b24      	ldr	r3, [pc, #144]	; (8001bd4 <__swsetup_r+0xd8>)
 8001b44:	429c      	cmp	r4, r3
 8001b46:	bf08      	it	eq
 8001b48:	68ec      	ldreq	r4, [r5, #12]
 8001b4a:	e7e6      	b.n	8001b1a <__swsetup_r+0x1e>
 8001b4c:	0751      	lsls	r1, r2, #29
 8001b4e:	d512      	bpl.n	8001b76 <__swsetup_r+0x7a>
 8001b50:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001b52:	b141      	cbz	r1, 8001b66 <__swsetup_r+0x6a>
 8001b54:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001b58:	4299      	cmp	r1, r3
 8001b5a:	d002      	beq.n	8001b62 <__swsetup_r+0x66>
 8001b5c:	4630      	mov	r0, r6
 8001b5e:	f000 f973 	bl	8001e48 <_free_r>
 8001b62:	2300      	movs	r3, #0
 8001b64:	6363      	str	r3, [r4, #52]	; 0x34
 8001b66:	89a3      	ldrh	r3, [r4, #12]
 8001b68:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8001b6c:	81a3      	strh	r3, [r4, #12]
 8001b6e:	2300      	movs	r3, #0
 8001b70:	6063      	str	r3, [r4, #4]
 8001b72:	6923      	ldr	r3, [r4, #16]
 8001b74:	6023      	str	r3, [r4, #0]
 8001b76:	89a3      	ldrh	r3, [r4, #12]
 8001b78:	f043 0308 	orr.w	r3, r3, #8
 8001b7c:	81a3      	strh	r3, [r4, #12]
 8001b7e:	6923      	ldr	r3, [r4, #16]
 8001b80:	b94b      	cbnz	r3, 8001b96 <__swsetup_r+0x9a>
 8001b82:	89a3      	ldrh	r3, [r4, #12]
 8001b84:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8001b88:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001b8c:	d003      	beq.n	8001b96 <__swsetup_r+0x9a>
 8001b8e:	4621      	mov	r1, r4
 8001b90:	4630      	mov	r0, r6
 8001b92:	f000 f917 	bl	8001dc4 <__smakebuf_r>
 8001b96:	89a2      	ldrh	r2, [r4, #12]
 8001b98:	f012 0301 	ands.w	r3, r2, #1
 8001b9c:	d00c      	beq.n	8001bb8 <__swsetup_r+0xbc>
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	60a3      	str	r3, [r4, #8]
 8001ba2:	6963      	ldr	r3, [r4, #20]
 8001ba4:	425b      	negs	r3, r3
 8001ba6:	61a3      	str	r3, [r4, #24]
 8001ba8:	6923      	ldr	r3, [r4, #16]
 8001baa:	b953      	cbnz	r3, 8001bc2 <__swsetup_r+0xc6>
 8001bac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001bb0:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8001bb4:	d1ba      	bne.n	8001b2c <__swsetup_r+0x30>
 8001bb6:	bd70      	pop	{r4, r5, r6, pc}
 8001bb8:	0792      	lsls	r2, r2, #30
 8001bba:	bf58      	it	pl
 8001bbc:	6963      	ldrpl	r3, [r4, #20]
 8001bbe:	60a3      	str	r3, [r4, #8]
 8001bc0:	e7f2      	b.n	8001ba8 <__swsetup_r+0xac>
 8001bc2:	2000      	movs	r0, #0
 8001bc4:	e7f7      	b.n	8001bb6 <__swsetup_r+0xba>
 8001bc6:	bf00      	nop
 8001bc8:	20000030 	.word	0x20000030
 8001bcc:	080024f0 	.word	0x080024f0
 8001bd0:	08002510 	.word	0x08002510
 8001bd4:	080024d0 	.word	0x080024d0

08001bd8 <_close_r>:
 8001bd8:	b538      	push	{r3, r4, r5, lr}
 8001bda:	4c06      	ldr	r4, [pc, #24]	; (8001bf4 <_close_r+0x1c>)
 8001bdc:	2300      	movs	r3, #0
 8001bde:	4605      	mov	r5, r0
 8001be0:	4608      	mov	r0, r1
 8001be2:	6023      	str	r3, [r4, #0]
 8001be4:	f000 fa92 	bl	800210c <_close>
 8001be8:	1c43      	adds	r3, r0, #1
 8001bea:	d102      	bne.n	8001bf2 <_close_r+0x1a>
 8001bec:	6823      	ldr	r3, [r4, #0]
 8001bee:	b103      	cbz	r3, 8001bf2 <_close_r+0x1a>
 8001bf0:	602b      	str	r3, [r5, #0]
 8001bf2:	bd38      	pop	{r3, r4, r5, pc}
 8001bf4:	20000194 	.word	0x20000194

08001bf8 <__sflush_r>:
 8001bf8:	898a      	ldrh	r2, [r1, #12]
 8001bfa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001bfe:	4605      	mov	r5, r0
 8001c00:	0710      	lsls	r0, r2, #28
 8001c02:	460c      	mov	r4, r1
 8001c04:	d458      	bmi.n	8001cb8 <__sflush_r+0xc0>
 8001c06:	684b      	ldr	r3, [r1, #4]
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	dc05      	bgt.n	8001c18 <__sflush_r+0x20>
 8001c0c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	dc02      	bgt.n	8001c18 <__sflush_r+0x20>
 8001c12:	2000      	movs	r0, #0
 8001c14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001c18:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001c1a:	2e00      	cmp	r6, #0
 8001c1c:	d0f9      	beq.n	8001c12 <__sflush_r+0x1a>
 8001c1e:	2300      	movs	r3, #0
 8001c20:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8001c24:	682f      	ldr	r7, [r5, #0]
 8001c26:	6a21      	ldr	r1, [r4, #32]
 8001c28:	602b      	str	r3, [r5, #0]
 8001c2a:	d032      	beq.n	8001c92 <__sflush_r+0x9a>
 8001c2c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001c2e:	89a3      	ldrh	r3, [r4, #12]
 8001c30:	075a      	lsls	r2, r3, #29
 8001c32:	d505      	bpl.n	8001c40 <__sflush_r+0x48>
 8001c34:	6863      	ldr	r3, [r4, #4]
 8001c36:	1ac0      	subs	r0, r0, r3
 8001c38:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001c3a:	b10b      	cbz	r3, 8001c40 <__sflush_r+0x48>
 8001c3c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001c3e:	1ac0      	subs	r0, r0, r3
 8001c40:	2300      	movs	r3, #0
 8001c42:	4602      	mov	r2, r0
 8001c44:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001c46:	6a21      	ldr	r1, [r4, #32]
 8001c48:	4628      	mov	r0, r5
 8001c4a:	47b0      	blx	r6
 8001c4c:	1c43      	adds	r3, r0, #1
 8001c4e:	89a3      	ldrh	r3, [r4, #12]
 8001c50:	d106      	bne.n	8001c60 <__sflush_r+0x68>
 8001c52:	6829      	ldr	r1, [r5, #0]
 8001c54:	291d      	cmp	r1, #29
 8001c56:	d848      	bhi.n	8001cea <__sflush_r+0xf2>
 8001c58:	4a29      	ldr	r2, [pc, #164]	; (8001d00 <__sflush_r+0x108>)
 8001c5a:	40ca      	lsrs	r2, r1
 8001c5c:	07d6      	lsls	r6, r2, #31
 8001c5e:	d544      	bpl.n	8001cea <__sflush_r+0xf2>
 8001c60:	2200      	movs	r2, #0
 8001c62:	6062      	str	r2, [r4, #4]
 8001c64:	04d9      	lsls	r1, r3, #19
 8001c66:	6922      	ldr	r2, [r4, #16]
 8001c68:	6022      	str	r2, [r4, #0]
 8001c6a:	d504      	bpl.n	8001c76 <__sflush_r+0x7e>
 8001c6c:	1c42      	adds	r2, r0, #1
 8001c6e:	d101      	bne.n	8001c74 <__sflush_r+0x7c>
 8001c70:	682b      	ldr	r3, [r5, #0]
 8001c72:	b903      	cbnz	r3, 8001c76 <__sflush_r+0x7e>
 8001c74:	6560      	str	r0, [r4, #84]	; 0x54
 8001c76:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001c78:	602f      	str	r7, [r5, #0]
 8001c7a:	2900      	cmp	r1, #0
 8001c7c:	d0c9      	beq.n	8001c12 <__sflush_r+0x1a>
 8001c7e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001c82:	4299      	cmp	r1, r3
 8001c84:	d002      	beq.n	8001c8c <__sflush_r+0x94>
 8001c86:	4628      	mov	r0, r5
 8001c88:	f000 f8de 	bl	8001e48 <_free_r>
 8001c8c:	2000      	movs	r0, #0
 8001c8e:	6360      	str	r0, [r4, #52]	; 0x34
 8001c90:	e7c0      	b.n	8001c14 <__sflush_r+0x1c>
 8001c92:	2301      	movs	r3, #1
 8001c94:	4628      	mov	r0, r5
 8001c96:	47b0      	blx	r6
 8001c98:	1c41      	adds	r1, r0, #1
 8001c9a:	d1c8      	bne.n	8001c2e <__sflush_r+0x36>
 8001c9c:	682b      	ldr	r3, [r5, #0]
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d0c5      	beq.n	8001c2e <__sflush_r+0x36>
 8001ca2:	2b1d      	cmp	r3, #29
 8001ca4:	d001      	beq.n	8001caa <__sflush_r+0xb2>
 8001ca6:	2b16      	cmp	r3, #22
 8001ca8:	d101      	bne.n	8001cae <__sflush_r+0xb6>
 8001caa:	602f      	str	r7, [r5, #0]
 8001cac:	e7b1      	b.n	8001c12 <__sflush_r+0x1a>
 8001cae:	89a3      	ldrh	r3, [r4, #12]
 8001cb0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001cb4:	81a3      	strh	r3, [r4, #12]
 8001cb6:	e7ad      	b.n	8001c14 <__sflush_r+0x1c>
 8001cb8:	690f      	ldr	r7, [r1, #16]
 8001cba:	2f00      	cmp	r7, #0
 8001cbc:	d0a9      	beq.n	8001c12 <__sflush_r+0x1a>
 8001cbe:	0793      	lsls	r3, r2, #30
 8001cc0:	680e      	ldr	r6, [r1, #0]
 8001cc2:	bf08      	it	eq
 8001cc4:	694b      	ldreq	r3, [r1, #20]
 8001cc6:	600f      	str	r7, [r1, #0]
 8001cc8:	bf18      	it	ne
 8001cca:	2300      	movne	r3, #0
 8001ccc:	eba6 0807 	sub.w	r8, r6, r7
 8001cd0:	608b      	str	r3, [r1, #8]
 8001cd2:	f1b8 0f00 	cmp.w	r8, #0
 8001cd6:	dd9c      	ble.n	8001c12 <__sflush_r+0x1a>
 8001cd8:	4643      	mov	r3, r8
 8001cda:	463a      	mov	r2, r7
 8001cdc:	6a21      	ldr	r1, [r4, #32]
 8001cde:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8001ce0:	4628      	mov	r0, r5
 8001ce2:	47b0      	blx	r6
 8001ce4:	2800      	cmp	r0, #0
 8001ce6:	dc06      	bgt.n	8001cf6 <__sflush_r+0xfe>
 8001ce8:	89a3      	ldrh	r3, [r4, #12]
 8001cea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001cee:	81a3      	strh	r3, [r4, #12]
 8001cf0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001cf4:	e78e      	b.n	8001c14 <__sflush_r+0x1c>
 8001cf6:	4407      	add	r7, r0
 8001cf8:	eba8 0800 	sub.w	r8, r8, r0
 8001cfc:	e7e9      	b.n	8001cd2 <__sflush_r+0xda>
 8001cfe:	bf00      	nop
 8001d00:	20400001 	.word	0x20400001

08001d04 <_fflush_r>:
 8001d04:	b538      	push	{r3, r4, r5, lr}
 8001d06:	690b      	ldr	r3, [r1, #16]
 8001d08:	4605      	mov	r5, r0
 8001d0a:	460c      	mov	r4, r1
 8001d0c:	b1db      	cbz	r3, 8001d46 <_fflush_r+0x42>
 8001d0e:	b118      	cbz	r0, 8001d18 <_fflush_r+0x14>
 8001d10:	6983      	ldr	r3, [r0, #24]
 8001d12:	b90b      	cbnz	r3, 8001d18 <_fflush_r+0x14>
 8001d14:	f7ff fa8e 	bl	8001234 <__sinit>
 8001d18:	4b0c      	ldr	r3, [pc, #48]	; (8001d4c <_fflush_r+0x48>)
 8001d1a:	429c      	cmp	r4, r3
 8001d1c:	d109      	bne.n	8001d32 <_fflush_r+0x2e>
 8001d1e:	686c      	ldr	r4, [r5, #4]
 8001d20:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001d24:	b17b      	cbz	r3, 8001d46 <_fflush_r+0x42>
 8001d26:	4621      	mov	r1, r4
 8001d28:	4628      	mov	r0, r5
 8001d2a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001d2e:	f7ff bf63 	b.w	8001bf8 <__sflush_r>
 8001d32:	4b07      	ldr	r3, [pc, #28]	; (8001d50 <_fflush_r+0x4c>)
 8001d34:	429c      	cmp	r4, r3
 8001d36:	d101      	bne.n	8001d3c <_fflush_r+0x38>
 8001d38:	68ac      	ldr	r4, [r5, #8]
 8001d3a:	e7f1      	b.n	8001d20 <_fflush_r+0x1c>
 8001d3c:	4b05      	ldr	r3, [pc, #20]	; (8001d54 <_fflush_r+0x50>)
 8001d3e:	429c      	cmp	r4, r3
 8001d40:	bf08      	it	eq
 8001d42:	68ec      	ldreq	r4, [r5, #12]
 8001d44:	e7ec      	b.n	8001d20 <_fflush_r+0x1c>
 8001d46:	2000      	movs	r0, #0
 8001d48:	bd38      	pop	{r3, r4, r5, pc}
 8001d4a:	bf00      	nop
 8001d4c:	080024f0 	.word	0x080024f0
 8001d50:	08002510 	.word	0x08002510
 8001d54:	080024d0 	.word	0x080024d0

08001d58 <_lseek_r>:
 8001d58:	b538      	push	{r3, r4, r5, lr}
 8001d5a:	4c07      	ldr	r4, [pc, #28]	; (8001d78 <_lseek_r+0x20>)
 8001d5c:	4605      	mov	r5, r0
 8001d5e:	4608      	mov	r0, r1
 8001d60:	4611      	mov	r1, r2
 8001d62:	2200      	movs	r2, #0
 8001d64:	6022      	str	r2, [r4, #0]
 8001d66:	461a      	mov	r2, r3
 8001d68:	f000 f98f 	bl	800208a <_lseek>
 8001d6c:	1c43      	adds	r3, r0, #1
 8001d6e:	d102      	bne.n	8001d76 <_lseek_r+0x1e>
 8001d70:	6823      	ldr	r3, [r4, #0]
 8001d72:	b103      	cbz	r3, 8001d76 <_lseek_r+0x1e>
 8001d74:	602b      	str	r3, [r5, #0]
 8001d76:	bd38      	pop	{r3, r4, r5, pc}
 8001d78:	20000194 	.word	0x20000194

08001d7c <__swhatbuf_r>:
 8001d7c:	b570      	push	{r4, r5, r6, lr}
 8001d7e:	460e      	mov	r6, r1
 8001d80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001d84:	2900      	cmp	r1, #0
 8001d86:	b096      	sub	sp, #88	; 0x58
 8001d88:	4614      	mov	r4, r2
 8001d8a:	461d      	mov	r5, r3
 8001d8c:	da07      	bge.n	8001d9e <__swhatbuf_r+0x22>
 8001d8e:	2300      	movs	r3, #0
 8001d90:	602b      	str	r3, [r5, #0]
 8001d92:	89b3      	ldrh	r3, [r6, #12]
 8001d94:	061a      	lsls	r2, r3, #24
 8001d96:	d410      	bmi.n	8001dba <__swhatbuf_r+0x3e>
 8001d98:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001d9c:	e00e      	b.n	8001dbc <__swhatbuf_r+0x40>
 8001d9e:	466a      	mov	r2, sp
 8001da0:	f000 f8b2 	bl	8001f08 <_fstat_r>
 8001da4:	2800      	cmp	r0, #0
 8001da6:	dbf2      	blt.n	8001d8e <__swhatbuf_r+0x12>
 8001da8:	9a01      	ldr	r2, [sp, #4]
 8001daa:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8001dae:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8001db2:	425a      	negs	r2, r3
 8001db4:	415a      	adcs	r2, r3
 8001db6:	602a      	str	r2, [r5, #0]
 8001db8:	e7ee      	b.n	8001d98 <__swhatbuf_r+0x1c>
 8001dba:	2340      	movs	r3, #64	; 0x40
 8001dbc:	2000      	movs	r0, #0
 8001dbe:	6023      	str	r3, [r4, #0]
 8001dc0:	b016      	add	sp, #88	; 0x58
 8001dc2:	bd70      	pop	{r4, r5, r6, pc}

08001dc4 <__smakebuf_r>:
 8001dc4:	898b      	ldrh	r3, [r1, #12]
 8001dc6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001dc8:	079d      	lsls	r5, r3, #30
 8001dca:	4606      	mov	r6, r0
 8001dcc:	460c      	mov	r4, r1
 8001dce:	d507      	bpl.n	8001de0 <__smakebuf_r+0x1c>
 8001dd0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8001dd4:	6023      	str	r3, [r4, #0]
 8001dd6:	6123      	str	r3, [r4, #16]
 8001dd8:	2301      	movs	r3, #1
 8001dda:	6163      	str	r3, [r4, #20]
 8001ddc:	b002      	add	sp, #8
 8001dde:	bd70      	pop	{r4, r5, r6, pc}
 8001de0:	ab01      	add	r3, sp, #4
 8001de2:	466a      	mov	r2, sp
 8001de4:	f7ff ffca 	bl	8001d7c <__swhatbuf_r>
 8001de8:	9900      	ldr	r1, [sp, #0]
 8001dea:	4605      	mov	r5, r0
 8001dec:	4630      	mov	r0, r6
 8001dee:	f7ff faab 	bl	8001348 <_malloc_r>
 8001df2:	b948      	cbnz	r0, 8001e08 <__smakebuf_r+0x44>
 8001df4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001df8:	059a      	lsls	r2, r3, #22
 8001dfa:	d4ef      	bmi.n	8001ddc <__smakebuf_r+0x18>
 8001dfc:	f023 0303 	bic.w	r3, r3, #3
 8001e00:	f043 0302 	orr.w	r3, r3, #2
 8001e04:	81a3      	strh	r3, [r4, #12]
 8001e06:	e7e3      	b.n	8001dd0 <__smakebuf_r+0xc>
 8001e08:	4b0d      	ldr	r3, [pc, #52]	; (8001e40 <__smakebuf_r+0x7c>)
 8001e0a:	62b3      	str	r3, [r6, #40]	; 0x28
 8001e0c:	89a3      	ldrh	r3, [r4, #12]
 8001e0e:	6020      	str	r0, [r4, #0]
 8001e10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e14:	81a3      	strh	r3, [r4, #12]
 8001e16:	9b00      	ldr	r3, [sp, #0]
 8001e18:	6163      	str	r3, [r4, #20]
 8001e1a:	9b01      	ldr	r3, [sp, #4]
 8001e1c:	6120      	str	r0, [r4, #16]
 8001e1e:	b15b      	cbz	r3, 8001e38 <__smakebuf_r+0x74>
 8001e20:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001e24:	4630      	mov	r0, r6
 8001e26:	f000 f881 	bl	8001f2c <_isatty_r>
 8001e2a:	b128      	cbz	r0, 8001e38 <__smakebuf_r+0x74>
 8001e2c:	89a3      	ldrh	r3, [r4, #12]
 8001e2e:	f023 0303 	bic.w	r3, r3, #3
 8001e32:	f043 0301 	orr.w	r3, r3, #1
 8001e36:	81a3      	strh	r3, [r4, #12]
 8001e38:	89a3      	ldrh	r3, [r4, #12]
 8001e3a:	431d      	orrs	r5, r3
 8001e3c:	81a5      	strh	r5, [r4, #12]
 8001e3e:	e7cd      	b.n	8001ddc <__smakebuf_r+0x18>
 8001e40:	080011fd 	.word	0x080011fd

08001e44 <__malloc_lock>:
 8001e44:	4770      	bx	lr

08001e46 <__malloc_unlock>:
 8001e46:	4770      	bx	lr

08001e48 <_free_r>:
 8001e48:	b538      	push	{r3, r4, r5, lr}
 8001e4a:	4605      	mov	r5, r0
 8001e4c:	2900      	cmp	r1, #0
 8001e4e:	d045      	beq.n	8001edc <_free_r+0x94>
 8001e50:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001e54:	1f0c      	subs	r4, r1, #4
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	bfb8      	it	lt
 8001e5a:	18e4      	addlt	r4, r4, r3
 8001e5c:	f7ff fff2 	bl	8001e44 <__malloc_lock>
 8001e60:	4a1f      	ldr	r2, [pc, #124]	; (8001ee0 <_free_r+0x98>)
 8001e62:	6813      	ldr	r3, [r2, #0]
 8001e64:	4610      	mov	r0, r2
 8001e66:	b933      	cbnz	r3, 8001e76 <_free_r+0x2e>
 8001e68:	6063      	str	r3, [r4, #4]
 8001e6a:	6014      	str	r4, [r2, #0]
 8001e6c:	4628      	mov	r0, r5
 8001e6e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001e72:	f7ff bfe8 	b.w	8001e46 <__malloc_unlock>
 8001e76:	42a3      	cmp	r3, r4
 8001e78:	d90c      	bls.n	8001e94 <_free_r+0x4c>
 8001e7a:	6821      	ldr	r1, [r4, #0]
 8001e7c:	1862      	adds	r2, r4, r1
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	bf04      	itt	eq
 8001e82:	681a      	ldreq	r2, [r3, #0]
 8001e84:	685b      	ldreq	r3, [r3, #4]
 8001e86:	6063      	str	r3, [r4, #4]
 8001e88:	bf04      	itt	eq
 8001e8a:	1852      	addeq	r2, r2, r1
 8001e8c:	6022      	streq	r2, [r4, #0]
 8001e8e:	6004      	str	r4, [r0, #0]
 8001e90:	e7ec      	b.n	8001e6c <_free_r+0x24>
 8001e92:	4613      	mov	r3, r2
 8001e94:	685a      	ldr	r2, [r3, #4]
 8001e96:	b10a      	cbz	r2, 8001e9c <_free_r+0x54>
 8001e98:	42a2      	cmp	r2, r4
 8001e9a:	d9fa      	bls.n	8001e92 <_free_r+0x4a>
 8001e9c:	6819      	ldr	r1, [r3, #0]
 8001e9e:	1858      	adds	r0, r3, r1
 8001ea0:	42a0      	cmp	r0, r4
 8001ea2:	d10b      	bne.n	8001ebc <_free_r+0x74>
 8001ea4:	6820      	ldr	r0, [r4, #0]
 8001ea6:	4401      	add	r1, r0
 8001ea8:	1858      	adds	r0, r3, r1
 8001eaa:	4282      	cmp	r2, r0
 8001eac:	6019      	str	r1, [r3, #0]
 8001eae:	d1dd      	bne.n	8001e6c <_free_r+0x24>
 8001eb0:	6810      	ldr	r0, [r2, #0]
 8001eb2:	6852      	ldr	r2, [r2, #4]
 8001eb4:	605a      	str	r2, [r3, #4]
 8001eb6:	4401      	add	r1, r0
 8001eb8:	6019      	str	r1, [r3, #0]
 8001eba:	e7d7      	b.n	8001e6c <_free_r+0x24>
 8001ebc:	d902      	bls.n	8001ec4 <_free_r+0x7c>
 8001ebe:	230c      	movs	r3, #12
 8001ec0:	602b      	str	r3, [r5, #0]
 8001ec2:	e7d3      	b.n	8001e6c <_free_r+0x24>
 8001ec4:	6820      	ldr	r0, [r4, #0]
 8001ec6:	1821      	adds	r1, r4, r0
 8001ec8:	428a      	cmp	r2, r1
 8001eca:	bf04      	itt	eq
 8001ecc:	6811      	ldreq	r1, [r2, #0]
 8001ece:	6852      	ldreq	r2, [r2, #4]
 8001ed0:	6062      	str	r2, [r4, #4]
 8001ed2:	bf04      	itt	eq
 8001ed4:	1809      	addeq	r1, r1, r0
 8001ed6:	6021      	streq	r1, [r4, #0]
 8001ed8:	605c      	str	r4, [r3, #4]
 8001eda:	e7c7      	b.n	8001e6c <_free_r+0x24>
 8001edc:	bd38      	pop	{r3, r4, r5, pc}
 8001ede:	bf00      	nop
 8001ee0:	200000bc 	.word	0x200000bc

08001ee4 <_read_r>:
 8001ee4:	b538      	push	{r3, r4, r5, lr}
 8001ee6:	4c07      	ldr	r4, [pc, #28]	; (8001f04 <_read_r+0x20>)
 8001ee8:	4605      	mov	r5, r0
 8001eea:	4608      	mov	r0, r1
 8001eec:	4611      	mov	r1, r2
 8001eee:	2200      	movs	r2, #0
 8001ef0:	6022      	str	r2, [r4, #0]
 8001ef2:	461a      	mov	r2, r3
 8001ef4:	f000 f872 	bl	8001fdc <_read>
 8001ef8:	1c43      	adds	r3, r0, #1
 8001efa:	d102      	bne.n	8001f02 <_read_r+0x1e>
 8001efc:	6823      	ldr	r3, [r4, #0]
 8001efe:	b103      	cbz	r3, 8001f02 <_read_r+0x1e>
 8001f00:	602b      	str	r3, [r5, #0]
 8001f02:	bd38      	pop	{r3, r4, r5, pc}
 8001f04:	20000194 	.word	0x20000194

08001f08 <_fstat_r>:
 8001f08:	b538      	push	{r3, r4, r5, lr}
 8001f0a:	4c07      	ldr	r4, [pc, #28]	; (8001f28 <_fstat_r+0x20>)
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	4605      	mov	r5, r0
 8001f10:	4608      	mov	r0, r1
 8001f12:	4611      	mov	r1, r2
 8001f14:	6023      	str	r3, [r4, #0]
 8001f16:	f000 f940 	bl	800219a <_fstat>
 8001f1a:	1c43      	adds	r3, r0, #1
 8001f1c:	d102      	bne.n	8001f24 <_fstat_r+0x1c>
 8001f1e:	6823      	ldr	r3, [r4, #0]
 8001f20:	b103      	cbz	r3, 8001f24 <_fstat_r+0x1c>
 8001f22:	602b      	str	r3, [r5, #0]
 8001f24:	bd38      	pop	{r3, r4, r5, pc}
 8001f26:	bf00      	nop
 8001f28:	20000194 	.word	0x20000194

08001f2c <_isatty_r>:
 8001f2c:	b538      	push	{r3, r4, r5, lr}
 8001f2e:	4c06      	ldr	r4, [pc, #24]	; (8001f48 <_isatty_r+0x1c>)
 8001f30:	2300      	movs	r3, #0
 8001f32:	4605      	mov	r5, r0
 8001f34:	4608      	mov	r0, r1
 8001f36:	6023      	str	r3, [r4, #0]
 8001f38:	f000 fa94 	bl	8002464 <_isatty>
 8001f3c:	1c43      	adds	r3, r0, #1
 8001f3e:	d102      	bne.n	8001f46 <_isatty_r+0x1a>
 8001f40:	6823      	ldr	r3, [r4, #0]
 8001f42:	b103      	cbz	r3, 8001f46 <_isatty_r+0x1a>
 8001f44:	602b      	str	r3, [r5, #0]
 8001f46:	bd38      	pop	{r3, r4, r5, pc}
 8001f48:	20000194 	.word	0x20000194

08001f4c <findslot>:
 8001f4c:	4b0a      	ldr	r3, [pc, #40]	; (8001f78 <findslot+0x2c>)
 8001f4e:	b510      	push	{r4, lr}
 8001f50:	4604      	mov	r4, r0
 8001f52:	6818      	ldr	r0, [r3, #0]
 8001f54:	b118      	cbz	r0, 8001f5e <findslot+0x12>
 8001f56:	6983      	ldr	r3, [r0, #24]
 8001f58:	b90b      	cbnz	r3, 8001f5e <findslot+0x12>
 8001f5a:	f7ff f96b 	bl	8001234 <__sinit>
 8001f5e:	2c13      	cmp	r4, #19
 8001f60:	d807      	bhi.n	8001f72 <findslot+0x26>
 8001f62:	4806      	ldr	r0, [pc, #24]	; (8001f7c <findslot+0x30>)
 8001f64:	f850 3034 	ldr.w	r3, [r0, r4, lsl #3]
 8001f68:	3301      	adds	r3, #1
 8001f6a:	d002      	beq.n	8001f72 <findslot+0x26>
 8001f6c:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 8001f70:	bd10      	pop	{r4, pc}
 8001f72:	2000      	movs	r0, #0
 8001f74:	e7fc      	b.n	8001f70 <findslot+0x24>
 8001f76:	bf00      	nop
 8001f78:	20000030 	.word	0x20000030
 8001f7c:	200000d0 	.word	0x200000d0

08001f80 <checkerror>:
 8001f80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f82:	1c43      	adds	r3, r0, #1
 8001f84:	4605      	mov	r5, r0
 8001f86:	d109      	bne.n	8001f9c <checkerror+0x1c>
 8001f88:	f7ff f8ca 	bl	8001120 <__errno>
 8001f8c:	2413      	movs	r4, #19
 8001f8e:	4606      	mov	r6, r0
 8001f90:	2700      	movs	r7, #0
 8001f92:	4620      	mov	r0, r4
 8001f94:	4639      	mov	r1, r7
 8001f96:	beab      	bkpt	0x00ab
 8001f98:	4604      	mov	r4, r0
 8001f9a:	6034      	str	r4, [r6, #0]
 8001f9c:	4628      	mov	r0, r5
 8001f9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08001fa0 <error>:
 8001fa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001fa2:	4605      	mov	r5, r0
 8001fa4:	f7ff f8bc 	bl	8001120 <__errno>
 8001fa8:	2413      	movs	r4, #19
 8001faa:	4606      	mov	r6, r0
 8001fac:	2700      	movs	r7, #0
 8001fae:	4620      	mov	r0, r4
 8001fb0:	4639      	mov	r1, r7
 8001fb2:	beab      	bkpt	0x00ab
 8001fb4:	4604      	mov	r4, r0
 8001fb6:	6034      	str	r4, [r6, #0]
 8001fb8:	4628      	mov	r0, r5
 8001fba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08001fbc <_swiread>:
 8001fbc:	b530      	push	{r4, r5, lr}
 8001fbe:	b085      	sub	sp, #20
 8001fc0:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8001fc4:	9203      	str	r2, [sp, #12]
 8001fc6:	2406      	movs	r4, #6
 8001fc8:	ad01      	add	r5, sp, #4
 8001fca:	4620      	mov	r0, r4
 8001fcc:	4629      	mov	r1, r5
 8001fce:	beab      	bkpt	0x00ab
 8001fd0:	4604      	mov	r4, r0
 8001fd2:	4620      	mov	r0, r4
 8001fd4:	f7ff ffd4 	bl	8001f80 <checkerror>
 8001fd8:	b005      	add	sp, #20
 8001fda:	bd30      	pop	{r4, r5, pc}

08001fdc <_read>:
 8001fdc:	b570      	push	{r4, r5, r6, lr}
 8001fde:	460e      	mov	r6, r1
 8001fe0:	4615      	mov	r5, r2
 8001fe2:	f7ff ffb3 	bl	8001f4c <findslot>
 8001fe6:	4604      	mov	r4, r0
 8001fe8:	b930      	cbnz	r0, 8001ff8 <_read+0x1c>
 8001fea:	f7ff f899 	bl	8001120 <__errno>
 8001fee:	2309      	movs	r3, #9
 8001ff0:	6003      	str	r3, [r0, #0]
 8001ff2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001ff6:	bd70      	pop	{r4, r5, r6, pc}
 8001ff8:	462a      	mov	r2, r5
 8001ffa:	4631      	mov	r1, r6
 8001ffc:	6800      	ldr	r0, [r0, #0]
 8001ffe:	f7ff ffdd 	bl	8001fbc <_swiread>
 8002002:	1c43      	adds	r3, r0, #1
 8002004:	bf1f      	itttt	ne
 8002006:	6863      	ldrne	r3, [r4, #4]
 8002008:	1a28      	subne	r0, r5, r0
 800200a:	181b      	addne	r3, r3, r0
 800200c:	6063      	strne	r3, [r4, #4]
 800200e:	e7f2      	b.n	8001ff6 <_read+0x1a>

08002010 <_swilseek>:
 8002010:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002012:	460c      	mov	r4, r1
 8002014:	4616      	mov	r6, r2
 8002016:	f7ff ff99 	bl	8001f4c <findslot>
 800201a:	4605      	mov	r5, r0
 800201c:	b940      	cbnz	r0, 8002030 <_swilseek+0x20>
 800201e:	f7ff f87f 	bl	8001120 <__errno>
 8002022:	2309      	movs	r3, #9
 8002024:	6003      	str	r3, [r0, #0]
 8002026:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800202a:	4620      	mov	r0, r4
 800202c:	b003      	add	sp, #12
 800202e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002030:	2e02      	cmp	r6, #2
 8002032:	d903      	bls.n	800203c <_swilseek+0x2c>
 8002034:	f7ff f874 	bl	8001120 <__errno>
 8002038:	2316      	movs	r3, #22
 800203a:	e7f3      	b.n	8002024 <_swilseek+0x14>
 800203c:	2e01      	cmp	r6, #1
 800203e:	d112      	bne.n	8002066 <_swilseek+0x56>
 8002040:	6843      	ldr	r3, [r0, #4]
 8002042:	18e4      	adds	r4, r4, r3
 8002044:	d4f6      	bmi.n	8002034 <_swilseek+0x24>
 8002046:	682b      	ldr	r3, [r5, #0]
 8002048:	260a      	movs	r6, #10
 800204a:	e9cd 3400 	strd	r3, r4, [sp]
 800204e:	466f      	mov	r7, sp
 8002050:	4630      	mov	r0, r6
 8002052:	4639      	mov	r1, r7
 8002054:	beab      	bkpt	0x00ab
 8002056:	4606      	mov	r6, r0
 8002058:	4630      	mov	r0, r6
 800205a:	f7ff ff91 	bl	8001f80 <checkerror>
 800205e:	2800      	cmp	r0, #0
 8002060:	dbe1      	blt.n	8002026 <_swilseek+0x16>
 8002062:	606c      	str	r4, [r5, #4]
 8002064:	e7e1      	b.n	800202a <_swilseek+0x1a>
 8002066:	2e02      	cmp	r6, #2
 8002068:	d1ed      	bne.n	8002046 <_swilseek+0x36>
 800206a:	af02      	add	r7, sp, #8
 800206c:	6803      	ldr	r3, [r0, #0]
 800206e:	f847 3d08 	str.w	r3, [r7, #-8]!
 8002072:	260c      	movs	r6, #12
 8002074:	4630      	mov	r0, r6
 8002076:	4639      	mov	r1, r7
 8002078:	beab      	bkpt	0x00ab
 800207a:	4606      	mov	r6, r0
 800207c:	4630      	mov	r0, r6
 800207e:	f7ff ff7f 	bl	8001f80 <checkerror>
 8002082:	1c43      	adds	r3, r0, #1
 8002084:	d0cf      	beq.n	8002026 <_swilseek+0x16>
 8002086:	4404      	add	r4, r0
 8002088:	e7dd      	b.n	8002046 <_swilseek+0x36>

0800208a <_lseek>:
 800208a:	f7ff bfc1 	b.w	8002010 <_swilseek>

0800208e <_swiwrite>:
 800208e:	b530      	push	{r4, r5, lr}
 8002090:	b085      	sub	sp, #20
 8002092:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8002096:	9203      	str	r2, [sp, #12]
 8002098:	2405      	movs	r4, #5
 800209a:	ad01      	add	r5, sp, #4
 800209c:	4620      	mov	r0, r4
 800209e:	4629      	mov	r1, r5
 80020a0:	beab      	bkpt	0x00ab
 80020a2:	4604      	mov	r4, r0
 80020a4:	4620      	mov	r0, r4
 80020a6:	f7ff ff6b 	bl	8001f80 <checkerror>
 80020aa:	b005      	add	sp, #20
 80020ac:	bd30      	pop	{r4, r5, pc}

080020ae <_write>:
 80020ae:	b570      	push	{r4, r5, r6, lr}
 80020b0:	460e      	mov	r6, r1
 80020b2:	4615      	mov	r5, r2
 80020b4:	f7ff ff4a 	bl	8001f4c <findslot>
 80020b8:	4604      	mov	r4, r0
 80020ba:	b930      	cbnz	r0, 80020ca <_write+0x1c>
 80020bc:	f7ff f830 	bl	8001120 <__errno>
 80020c0:	2309      	movs	r3, #9
 80020c2:	6003      	str	r3, [r0, #0]
 80020c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80020c8:	bd70      	pop	{r4, r5, r6, pc}
 80020ca:	462a      	mov	r2, r5
 80020cc:	4631      	mov	r1, r6
 80020ce:	6800      	ldr	r0, [r0, #0]
 80020d0:	f7ff ffdd 	bl	800208e <_swiwrite>
 80020d4:	1e02      	subs	r2, r0, #0
 80020d6:	dbf5      	blt.n	80020c4 <_write+0x16>
 80020d8:	6863      	ldr	r3, [r4, #4]
 80020da:	1aa8      	subs	r0, r5, r2
 80020dc:	4403      	add	r3, r0
 80020de:	42aa      	cmp	r2, r5
 80020e0:	6063      	str	r3, [r4, #4]
 80020e2:	d1f1      	bne.n	80020c8 <_write+0x1a>
 80020e4:	2000      	movs	r0, #0
 80020e6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80020ea:	f7ff bf59 	b.w	8001fa0 <error>

080020ee <_swiclose>:
 80020ee:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80020f0:	ad02      	add	r5, sp, #8
 80020f2:	2402      	movs	r4, #2
 80020f4:	f845 0d04 	str.w	r0, [r5, #-4]!
 80020f8:	4620      	mov	r0, r4
 80020fa:	4629      	mov	r1, r5
 80020fc:	beab      	bkpt	0x00ab
 80020fe:	4604      	mov	r4, r0
 8002100:	4620      	mov	r0, r4
 8002102:	f7ff ff3d 	bl	8001f80 <checkerror>
 8002106:	b003      	add	sp, #12
 8002108:	bd30      	pop	{r4, r5, pc}
	...

0800210c <_close>:
 800210c:	b538      	push	{r3, r4, r5, lr}
 800210e:	4605      	mov	r5, r0
 8002110:	f7ff ff1c 	bl	8001f4c <findslot>
 8002114:	4604      	mov	r4, r0
 8002116:	b930      	cbnz	r0, 8002126 <_close+0x1a>
 8002118:	f7ff f802 	bl	8001120 <__errno>
 800211c:	2309      	movs	r3, #9
 800211e:	6003      	str	r3, [r0, #0]
 8002120:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002124:	bd38      	pop	{r3, r4, r5, pc}
 8002126:	3d01      	subs	r5, #1
 8002128:	2d01      	cmp	r5, #1
 800212a:	d809      	bhi.n	8002140 <_close+0x34>
 800212c:	4b09      	ldr	r3, [pc, #36]	; (8002154 <_close+0x48>)
 800212e:	689a      	ldr	r2, [r3, #8]
 8002130:	691b      	ldr	r3, [r3, #16]
 8002132:	429a      	cmp	r2, r3
 8002134:	d104      	bne.n	8002140 <_close+0x34>
 8002136:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800213a:	6003      	str	r3, [r0, #0]
 800213c:	2000      	movs	r0, #0
 800213e:	e7f1      	b.n	8002124 <_close+0x18>
 8002140:	6820      	ldr	r0, [r4, #0]
 8002142:	f7ff ffd4 	bl	80020ee <_swiclose>
 8002146:	2800      	cmp	r0, #0
 8002148:	d1ec      	bne.n	8002124 <_close+0x18>
 800214a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800214e:	6023      	str	r3, [r4, #0]
 8002150:	e7e8      	b.n	8002124 <_close+0x18>
 8002152:	bf00      	nop
 8002154:	200000d0 	.word	0x200000d0

08002158 <_swistat>:
 8002158:	b570      	push	{r4, r5, r6, lr}
 800215a:	460c      	mov	r4, r1
 800215c:	f7ff fef6 	bl	8001f4c <findslot>
 8002160:	4606      	mov	r6, r0
 8002162:	b930      	cbnz	r0, 8002172 <_swistat+0x1a>
 8002164:	f7fe ffdc 	bl	8001120 <__errno>
 8002168:	2309      	movs	r3, #9
 800216a:	6003      	str	r3, [r0, #0]
 800216c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002170:	bd70      	pop	{r4, r5, r6, pc}
 8002172:	6863      	ldr	r3, [r4, #4]
 8002174:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002178:	6063      	str	r3, [r4, #4]
 800217a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800217e:	6463      	str	r3, [r4, #68]	; 0x44
 8002180:	250c      	movs	r5, #12
 8002182:	4628      	mov	r0, r5
 8002184:	4631      	mov	r1, r6
 8002186:	beab      	bkpt	0x00ab
 8002188:	4605      	mov	r5, r0
 800218a:	4628      	mov	r0, r5
 800218c:	f7ff fef8 	bl	8001f80 <checkerror>
 8002190:	1c43      	adds	r3, r0, #1
 8002192:	bf1c      	itt	ne
 8002194:	6120      	strne	r0, [r4, #16]
 8002196:	2000      	movne	r0, #0
 8002198:	e7ea      	b.n	8002170 <_swistat+0x18>

0800219a <_fstat>:
 800219a:	460b      	mov	r3, r1
 800219c:	b510      	push	{r4, lr}
 800219e:	2100      	movs	r1, #0
 80021a0:	4604      	mov	r4, r0
 80021a2:	2258      	movs	r2, #88	; 0x58
 80021a4:	4618      	mov	r0, r3
 80021a6:	f7fe ffe5 	bl	8001174 <memset>
 80021aa:	4601      	mov	r1, r0
 80021ac:	4620      	mov	r0, r4
 80021ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80021b2:	f7ff bfd1 	b.w	8002158 <_swistat>

080021b6 <_stat>:
 80021b6:	b538      	push	{r3, r4, r5, lr}
 80021b8:	460d      	mov	r5, r1
 80021ba:	4604      	mov	r4, r0
 80021bc:	2258      	movs	r2, #88	; 0x58
 80021be:	2100      	movs	r1, #0
 80021c0:	4628      	mov	r0, r5
 80021c2:	f7fe ffd7 	bl	8001174 <memset>
 80021c6:	4620      	mov	r0, r4
 80021c8:	2100      	movs	r1, #0
 80021ca:	f000 f811 	bl	80021f0 <_swiopen>
 80021ce:	1c43      	adds	r3, r0, #1
 80021d0:	4604      	mov	r4, r0
 80021d2:	d00b      	beq.n	80021ec <_stat+0x36>
 80021d4:	686b      	ldr	r3, [r5, #4]
 80021d6:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80021da:	606b      	str	r3, [r5, #4]
 80021dc:	4629      	mov	r1, r5
 80021de:	f7ff ffbb 	bl	8002158 <_swistat>
 80021e2:	4605      	mov	r5, r0
 80021e4:	4620      	mov	r0, r4
 80021e6:	f7ff ff91 	bl	800210c <_close>
 80021ea:	462c      	mov	r4, r5
 80021ec:	4620      	mov	r0, r4
 80021ee:	bd38      	pop	{r3, r4, r5, pc}

080021f0 <_swiopen>:
 80021f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80021f4:	4b2b      	ldr	r3, [pc, #172]	; (80022a4 <_swiopen+0xb4>)
 80021f6:	b096      	sub	sp, #88	; 0x58
 80021f8:	4682      	mov	sl, r0
 80021fa:	460e      	mov	r6, r1
 80021fc:	2500      	movs	r5, #0
 80021fe:	4698      	mov	r8, r3
 8002200:	f853 4035 	ldr.w	r4, [r3, r5, lsl #3]
 8002204:	1c61      	adds	r1, r4, #1
 8002206:	ea4f 07c5 	mov.w	r7, r5, lsl #3
 800220a:	d036      	beq.n	800227a <_swiopen+0x8a>
 800220c:	3501      	adds	r5, #1
 800220e:	2d14      	cmp	r5, #20
 8002210:	d1f6      	bne.n	8002200 <_swiopen+0x10>
 8002212:	f7fe ff85 	bl	8001120 <__errno>
 8002216:	2318      	movs	r3, #24
 8002218:	6003      	str	r3, [r0, #0]
 800221a:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800221e:	e03c      	b.n	800229a <_swiopen+0xaa>
 8002220:	f3c6 4400 	ubfx	r4, r6, #16, #1
 8002224:	f240 6301 	movw	r3, #1537	; 0x601
 8002228:	07b2      	lsls	r2, r6, #30
 800222a:	bf48      	it	mi
 800222c:	f044 0402 	orrmi.w	r4, r4, #2
 8002230:	421e      	tst	r6, r3
 8002232:	bf18      	it	ne
 8002234:	f044 0404 	orrne.w	r4, r4, #4
 8002238:	0733      	lsls	r3, r6, #28
 800223a:	bf48      	it	mi
 800223c:	f024 0404 	bicmi.w	r4, r4, #4
 8002240:	4650      	mov	r0, sl
 8002242:	bf48      	it	mi
 8002244:	f044 0408 	orrmi.w	r4, r4, #8
 8002248:	f8cd a000 	str.w	sl, [sp]
 800224c:	f7fe f830 	bl	80002b0 <strlen>
 8002250:	e9cd 4001 	strd	r4, r0, [sp, #4]
 8002254:	2401      	movs	r4, #1
 8002256:	4620      	mov	r0, r4
 8002258:	4649      	mov	r1, r9
 800225a:	beab      	bkpt	0x00ab
 800225c:	4604      	mov	r4, r0
 800225e:	2c00      	cmp	r4, #0
 8002260:	db06      	blt.n	8002270 <_swiopen+0x80>
 8002262:	4447      	add	r7, r8
 8002264:	2300      	movs	r3, #0
 8002266:	f848 4035 	str.w	r4, [r8, r5, lsl #3]
 800226a:	607b      	str	r3, [r7, #4]
 800226c:	462c      	mov	r4, r5
 800226e:	e014      	b.n	800229a <_swiopen+0xaa>
 8002270:	4620      	mov	r0, r4
 8002272:	f7ff fe95 	bl	8001fa0 <error>
 8002276:	4604      	mov	r4, r0
 8002278:	e00f      	b.n	800229a <_swiopen+0xaa>
 800227a:	f406 6320 	and.w	r3, r6, #2560	; 0xa00
 800227e:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8002282:	46e9      	mov	r9, sp
 8002284:	d1cc      	bne.n	8002220 <_swiopen+0x30>
 8002286:	4649      	mov	r1, r9
 8002288:	4650      	mov	r0, sl
 800228a:	f7ff ff94 	bl	80021b6 <_stat>
 800228e:	3001      	adds	r0, #1
 8002290:	d0c6      	beq.n	8002220 <_swiopen+0x30>
 8002292:	f7fe ff45 	bl	8001120 <__errno>
 8002296:	2311      	movs	r3, #17
 8002298:	6003      	str	r3, [r0, #0]
 800229a:	4620      	mov	r0, r4
 800229c:	b016      	add	sp, #88	; 0x58
 800229e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80022a2:	bf00      	nop
 80022a4:	200000d0 	.word	0x200000d0

080022a8 <_get_semihosting_exts>:
 80022a8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80022ac:	4607      	mov	r7, r0
 80022ae:	4688      	mov	r8, r1
 80022b0:	4829      	ldr	r0, [pc, #164]	; (8002358 <_get_semihosting_exts+0xb0>)
 80022b2:	2100      	movs	r1, #0
 80022b4:	4615      	mov	r5, r2
 80022b6:	f7ff ff9b 	bl	80021f0 <_swiopen>
 80022ba:	462a      	mov	r2, r5
 80022bc:	4604      	mov	r4, r0
 80022be:	2100      	movs	r1, #0
 80022c0:	4638      	mov	r0, r7
 80022c2:	f7fe ff57 	bl	8001174 <memset>
 80022c6:	1c63      	adds	r3, r4, #1
 80022c8:	d015      	beq.n	80022f6 <_get_semihosting_exts+0x4e>
 80022ca:	4620      	mov	r0, r4
 80022cc:	f7ff fe3e 	bl	8001f4c <findslot>
 80022d0:	260c      	movs	r6, #12
 80022d2:	4681      	mov	r9, r0
 80022d4:	4630      	mov	r0, r6
 80022d6:	4649      	mov	r1, r9
 80022d8:	beab      	bkpt	0x00ab
 80022da:	4606      	mov	r6, r0
 80022dc:	4630      	mov	r0, r6
 80022de:	f7ff fe4f 	bl	8001f80 <checkerror>
 80022e2:	2803      	cmp	r0, #3
 80022e4:	dd02      	ble.n	80022ec <_get_semihosting_exts+0x44>
 80022e6:	3803      	subs	r0, #3
 80022e8:	42a8      	cmp	r0, r5
 80022ea:	dc08      	bgt.n	80022fe <_get_semihosting_exts+0x56>
 80022ec:	4620      	mov	r0, r4
 80022ee:	f7ff ff0d 	bl	800210c <_close>
 80022f2:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80022f6:	4620      	mov	r0, r4
 80022f8:	b003      	add	sp, #12
 80022fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80022fe:	2204      	movs	r2, #4
 8002300:	eb0d 0102 	add.w	r1, sp, r2
 8002304:	4620      	mov	r0, r4
 8002306:	f7ff fe69 	bl	8001fdc <_read>
 800230a:	2803      	cmp	r0, #3
 800230c:	ddee      	ble.n	80022ec <_get_semihosting_exts+0x44>
 800230e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8002312:	2b53      	cmp	r3, #83	; 0x53
 8002314:	d1ea      	bne.n	80022ec <_get_semihosting_exts+0x44>
 8002316:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800231a:	2b48      	cmp	r3, #72	; 0x48
 800231c:	d1e6      	bne.n	80022ec <_get_semihosting_exts+0x44>
 800231e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8002322:	2b46      	cmp	r3, #70	; 0x46
 8002324:	d1e2      	bne.n	80022ec <_get_semihosting_exts+0x44>
 8002326:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800232a:	2b42      	cmp	r3, #66	; 0x42
 800232c:	d1de      	bne.n	80022ec <_get_semihosting_exts+0x44>
 800232e:	2201      	movs	r2, #1
 8002330:	4641      	mov	r1, r8
 8002332:	4620      	mov	r0, r4
 8002334:	f7ff fe6c 	bl	8002010 <_swilseek>
 8002338:	2800      	cmp	r0, #0
 800233a:	dbd7      	blt.n	80022ec <_get_semihosting_exts+0x44>
 800233c:	462a      	mov	r2, r5
 800233e:	4639      	mov	r1, r7
 8002340:	4620      	mov	r0, r4
 8002342:	f7ff fe4b 	bl	8001fdc <_read>
 8002346:	4605      	mov	r5, r0
 8002348:	4620      	mov	r0, r4
 800234a:	f7ff fedf 	bl	800210c <_close>
 800234e:	4628      	mov	r0, r5
 8002350:	f7ff fe16 	bl	8001f80 <checkerror>
 8002354:	4604      	mov	r4, r0
 8002356:	e7ce      	b.n	80022f6 <_get_semihosting_exts+0x4e>
 8002358:	08002563 	.word	0x08002563

0800235c <initialise_semihosting_exts>:
 800235c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800235e:	4d0a      	ldr	r5, [pc, #40]	; (8002388 <initialise_semihosting_exts+0x2c>)
 8002360:	4c0a      	ldr	r4, [pc, #40]	; (800238c <initialise_semihosting_exts+0x30>)
 8002362:	2100      	movs	r1, #0
 8002364:	2201      	movs	r2, #1
 8002366:	a801      	add	r0, sp, #4
 8002368:	6029      	str	r1, [r5, #0]
 800236a:	6022      	str	r2, [r4, #0]
 800236c:	f7ff ff9c 	bl	80022a8 <_get_semihosting_exts>
 8002370:	2800      	cmp	r0, #0
 8002372:	dd07      	ble.n	8002384 <initialise_semihosting_exts+0x28>
 8002374:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8002378:	f003 0201 	and.w	r2, r3, #1
 800237c:	f003 0302 	and.w	r3, r3, #2
 8002380:	602a      	str	r2, [r5, #0]
 8002382:	6023      	str	r3, [r4, #0]
 8002384:	b003      	add	sp, #12
 8002386:	bd30      	pop	{r4, r5, pc}
 8002388:	20000094 	.word	0x20000094
 800238c:	20000098 	.word	0x20000098

08002390 <_has_ext_stdout_stderr>:
 8002390:	b510      	push	{r4, lr}
 8002392:	4c04      	ldr	r4, [pc, #16]	; (80023a4 <_has_ext_stdout_stderr+0x14>)
 8002394:	6822      	ldr	r2, [r4, #0]
 8002396:	2a00      	cmp	r2, #0
 8002398:	da01      	bge.n	800239e <_has_ext_stdout_stderr+0xe>
 800239a:	f7ff ffdf 	bl	800235c <initialise_semihosting_exts>
 800239e:	6820      	ldr	r0, [r4, #0]
 80023a0:	bd10      	pop	{r4, pc}
 80023a2:	bf00      	nop
 80023a4:	20000098 	.word	0x20000098

080023a8 <initialise_monitor_handles>:
 80023a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80023ac:	b085      	sub	sp, #20
 80023ae:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 8002460 <initialise_monitor_handles+0xb8>
 80023b2:	f8cd 9004 	str.w	r9, [sp, #4]
 80023b6:	2303      	movs	r3, #3
 80023b8:	2400      	movs	r4, #0
 80023ba:	9303      	str	r3, [sp, #12]
 80023bc:	f10d 0804 	add.w	r8, sp, #4
 80023c0:	9402      	str	r4, [sp, #8]
 80023c2:	2501      	movs	r5, #1
 80023c4:	4628      	mov	r0, r5
 80023c6:	4641      	mov	r1, r8
 80023c8:	beab      	bkpt	0x00ab
 80023ca:	4605      	mov	r5, r0
 80023cc:	4e20      	ldr	r6, [pc, #128]	; (8002450 <initialise_monitor_handles+0xa8>)
 80023ce:	4a21      	ldr	r2, [pc, #132]	; (8002454 <initialise_monitor_handles+0xac>)
 80023d0:	6035      	str	r5, [r6, #0]
 80023d2:	4623      	mov	r3, r4
 80023d4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80023d8:	4614      	mov	r4, r2
 80023da:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
 80023de:	3301      	adds	r3, #1
 80023e0:	2b14      	cmp	r3, #20
 80023e2:	d1fa      	bne.n	80023da <initialise_monitor_handles+0x32>
 80023e4:	f7ff ffd4 	bl	8002390 <_has_ext_stdout_stderr>
 80023e8:	4d1b      	ldr	r5, [pc, #108]	; (8002458 <initialise_monitor_handles+0xb0>)
 80023ea:	b1d0      	cbz	r0, 8002422 <initialise_monitor_handles+0x7a>
 80023ec:	f04f 0a03 	mov.w	sl, #3
 80023f0:	2304      	movs	r3, #4
 80023f2:	f8cd 9004 	str.w	r9, [sp, #4]
 80023f6:	2701      	movs	r7, #1
 80023f8:	f8cd a00c 	str.w	sl, [sp, #12]
 80023fc:	9302      	str	r3, [sp, #8]
 80023fe:	4638      	mov	r0, r7
 8002400:	4641      	mov	r1, r8
 8002402:	beab      	bkpt	0x00ab
 8002404:	4683      	mov	fp, r0
 8002406:	4b15      	ldr	r3, [pc, #84]	; (800245c <initialise_monitor_handles+0xb4>)
 8002408:	f8cd 9004 	str.w	r9, [sp, #4]
 800240c:	f8c3 b000 	str.w	fp, [r3]
 8002410:	2308      	movs	r3, #8
 8002412:	f8cd a00c 	str.w	sl, [sp, #12]
 8002416:	9302      	str	r3, [sp, #8]
 8002418:	4638      	mov	r0, r7
 800241a:	4641      	mov	r1, r8
 800241c:	beab      	bkpt	0x00ab
 800241e:	4607      	mov	r7, r0
 8002420:	602f      	str	r7, [r5, #0]
 8002422:	682b      	ldr	r3, [r5, #0]
 8002424:	3301      	adds	r3, #1
 8002426:	bf02      	ittt	eq
 8002428:	4b0c      	ldreq	r3, [pc, #48]	; (800245c <initialise_monitor_handles+0xb4>)
 800242a:	681b      	ldreq	r3, [r3, #0]
 800242c:	602b      	streq	r3, [r5, #0]
 800242e:	6833      	ldr	r3, [r6, #0]
 8002430:	6023      	str	r3, [r4, #0]
 8002432:	2600      	movs	r6, #0
 8002434:	6066      	str	r6, [r4, #4]
 8002436:	f7ff ffab 	bl	8002390 <_has_ext_stdout_stderr>
 800243a:	b130      	cbz	r0, 800244a <initialise_monitor_handles+0xa2>
 800243c:	4b07      	ldr	r3, [pc, #28]	; (800245c <initialise_monitor_handles+0xb4>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	e9c4 3602 	strd	r3, r6, [r4, #8]
 8002444:	682b      	ldr	r3, [r5, #0]
 8002446:	e9c4 3604 	strd	r3, r6, [r4, #16]
 800244a:	b005      	add	sp, #20
 800244c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002450:	200000c8 	.word	0x200000c8
 8002454:	200000d0 	.word	0x200000d0
 8002458:	200000c4 	.word	0x200000c4
 800245c:	200000cc 	.word	0x200000cc
 8002460:	08002579 	.word	0x08002579

08002464 <_isatty>:
 8002464:	b570      	push	{r4, r5, r6, lr}
 8002466:	f7ff fd71 	bl	8001f4c <findslot>
 800246a:	2509      	movs	r5, #9
 800246c:	4604      	mov	r4, r0
 800246e:	b920      	cbnz	r0, 800247a <_isatty+0x16>
 8002470:	f7fe fe56 	bl	8001120 <__errno>
 8002474:	6005      	str	r5, [r0, #0]
 8002476:	4620      	mov	r0, r4
 8002478:	bd70      	pop	{r4, r5, r6, pc}
 800247a:	4628      	mov	r0, r5
 800247c:	4621      	mov	r1, r4
 800247e:	beab      	bkpt	0x00ab
 8002480:	4604      	mov	r4, r0
 8002482:	2c01      	cmp	r4, #1
 8002484:	d0f7      	beq.n	8002476 <_isatty+0x12>
 8002486:	f7fe fe4b 	bl	8001120 <__errno>
 800248a:	2400      	movs	r4, #0
 800248c:	4606      	mov	r6, r0
 800248e:	2513      	movs	r5, #19
 8002490:	4628      	mov	r0, r5
 8002492:	4621      	mov	r1, r4
 8002494:	beab      	bkpt	0x00ab
 8002496:	4605      	mov	r5, r0
 8002498:	6035      	str	r5, [r6, #0]
 800249a:	e7ec      	b.n	8002476 <_isatty+0x12>

0800249c <_init>:
 800249c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800249e:	bf00      	nop
 80024a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80024a2:	bc08      	pop	{r3}
 80024a4:	469e      	mov	lr, r3
 80024a6:	4770      	bx	lr

080024a8 <_fini>:
 80024a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024aa:	bf00      	nop
 80024ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80024ae:	bc08      	pop	{r3}
 80024b0:	469e      	mov	lr, r3
 80024b2:	4770      	bx	lr
